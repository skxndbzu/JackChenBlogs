import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,d as n}from"./app-Pz-t-dus.js";const t={},o=n(`<h1 id="计算机网络第1章-概述" tabindex="-1"><a class="header-anchor" href="#计算机网络第1章-概述"><span>计算机网络第1章（概述）</span></a></h1><h1 id="图示说明" tabindex="-1"><a class="header-anchor" href="#图示说明"><span>图示说明</span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>代表着主机</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957037-1.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>代表服务器</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-2.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>代表着路由器</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-3.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>代表着网络</p><h1 id="_1-1、计算机网络在信息时代的作用" tabindex="-1"><a class="header-anchor" href="#_1-1、计算机网络在信息时代的作用"><span>1.1、计算机网络在信息时代的作用</span></a></h1><ul><li>计算机网络已由一种<strong>通信基础设施</strong>发展成为一种重要的<strong>信息服务基础设施</strong></li><li>计算机网络已经像水，电，煤气这些基础设施一样，成为我们<strong>生活中不可或缺</strong>的一部分</li></ul><h2 id="我国互联网发展状况" tabindex="-1"><a class="header-anchor" href="#我国互联网发展状况"><span>我国互联网发展状况</span></a></h2><p><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.cnnic.net.cn" target="_blank" rel="noopener noreferrer">中国互联网络信息中心CNNIC</a></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-4.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-5.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-6.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><h1 id="_1-2、因特网概述" tabindex="-1"><a class="header-anchor" href="#_1-2、因特网概述"><span>1.2、因特网概述</span></a></h1><h2 id="_1、网络、互连网-互联网-和因特网" tabindex="-1"><a class="header-anchor" href="#_1、网络、互连网-互联网-和因特网"><span>1、网络、互连网（互联网）和因特网</span></a></h2><p>网络：网络（Network）由若干**结点（Node）<strong>和连接这些结点的</strong>链路（Link）**组成。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-7.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>互连网（互联网）：多个网络通过路由器互连起来，这样就构成了一个覆盖范围更大的网络，即互连网（互联网）。因此，互联网又称为“网络的网络（Network of Networks）”。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-8.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因特网：因特网（Internet）是世界上最大的互连网络（用户数以亿计，互连的网络数以百万计）。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-9.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>internet与Internet的区别</strong></p><ul><li><p><strong>internet(互联网或互连网)<strong>是一个通用名词，它泛指</strong>多个计算机网络互连而成的网络</strong>。在这些网络之间的通信协议可以是任意的。</p></li><li><p><strong>Internet（因特网）则是一个专用名词</strong>，它指<strong>当前全球最大的、开放的、由众多网络互连而成的特定计算机网络</strong>，它采用TCP/IP协议族作为通信的规则，其前身是美国的ARPANET。</p></li></ul><p><strong>任意把几个计算机网络互连起来（不管采用什么协议），并能够相互通信，这样构成的是一个互连网(internet) ，而不是互联网(Internet)。</strong></p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-10.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2、因特网发展的三个阶段" tabindex="-1"><a class="header-anchor" href="#_2、因特网发展的三个阶段"><span>2、因特网发展的三个阶段</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-11.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>因特网服务提供者ISP(Internet Service Provider)</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-12.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>普通用户是如何接入到因特网的呢？</p><p>答：<strong>通过ISP接入因特网</strong></p><p>ISP可以从因特网管理机构申请到成块的IP地址，同时拥有通信线路以及路由器等联网设备。任何机构和个人只需缴纳费用，就可从<strong>ISP的得到所需要的IP地址</strong>。</p><p><strong>因为因特网上的主机都必须有IP地址才能进行通信，这样就可以通过该ISP接入到因特网</strong></p></blockquote><p><strong>中国的三大ISP：中国电信，中国联通和中国移动</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-13.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>基于ISP的三层结构的因特网</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-14.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>一旦某个用户能够接入到因特网，那么他也可以成为一个ISP，所需要做的就是购买一些如调制解调器或路由器这样的设备，让其他用户可以和他相连。</p></blockquote><h2 id="_3、因特网的标准化工作" tabindex="-1"><a class="header-anchor" href="#_3、因特网的标准化工作"><span>3、因特网的标准化工作</span></a></h2><ul><li>因特网的标准化工作对因特网的发展起到了非常重要的作用。</li><li>因特网在指定其标准上的一个很大的特点是<strong>面向公众。</strong><ul><li>因特网所有的<strong>RFC</strong>(Request For Comments)技术文档都可从因特网上免费下载；</li><li>任何人都可以随时用电子邮件发表对某个文档的意见或建议。</li></ul></li><li><strong>因特网协会ISOC</strong>是一个国际性组织，它负责对因特网进行全面管理，以及在世界范围内促进其发展和使用。 <ul><li>因特网体系结构委员会IAB，负责管理因特网有关协议的开发；</li><li>因特网工程部IETF，负责研究中短期工程问题，主要针对协议的开发和标准化；</li><li>因特网研究部IRTF，从事理论方面的研究和开发一些需要长期考虑的问题。</li></ul></li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-15.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><p>制订因特网的正式标准要经过一下<strong>4个阶段</strong>：</p><p>1、因特网草案（在这个阶段还不是RFC文档）</p><p>2、建议标准（从这个阶段开始就成为RFC文档）</p><p>3、草案标准</p><p>4、因特网标准</p></li></ul><h2 id="_4、因特网的组成" tabindex="-1"><a class="header-anchor" href="#_4、因特网的组成"><span>4、因特网的组成</span></a></h2><ul><li><p>边缘部分</p><p>由所有连接在因特网上的<strong>主机</strong>组成（台式电脑，大型服务器，笔记本电脑，平板，智能手机等）。这部分是<strong>用户直接使用</strong>的，用来进行<strong>通信</strong>（传送数据、音频或视频）和<strong>资源共享</strong>。</p></li><li><p>核心部分</p><p>由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成。这部分是<strong>为边缘部分提供服务</strong>的（提供连通性和交换）。</p></li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-16.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>路由器是一种专用计算机，但我们不称它为主机，路由器是实现分组交换的关键构建，其任务是转发收到的分组，这是网络核心最重要的部分。</p><p>处在互联网边缘的部分就是连接在互联网上的所有的主机。这些主机又称为<strong>端系统 (end system)</strong>。</p><p><strong>端系统在功能上可能有很大的差别：</strong></p><ol><li><p>小的端系统可以是一台普通个人电脑，具有上网功能的智能手机，甚至是一个很小的网络摄像头。</p></li><li><p>大的端系统则可以是一台非常昂贵的大型计算机。</p></li><li><p>端系统的拥有者可以是个人，也可以是单位（如学校、企业、政府机关等），当然也可以是某个ISP。</p></li></ol></blockquote><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充：</span></a></h3><p><strong>端系统之间通信的含义</strong></p><p>“主机 A 和主机 B 进行通信”实际上是指：“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。<strong>即“主机</strong> <strong>A</strong> <strong>的某个进程和主机</strong> <strong>B</strong> <strong>上的另一个进程进行通信”。简称为“计算机之间通信”。</strong></p><p>端系统之间的通信方式通常可划分为两大类：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-17.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>客户-服务器方式：</strong></p><ul><li>客户 (client) 和服务器 (server) 都是指通信中所涉及的两个应用进程。</li><li>客户 - 服务器方式所描述的是进程之间服务和被服务的关系。</li><li>客户是服务的请求方，服务器是服务的提供方。</li></ul><blockquote><p><strong>服务请求方和服务提供方都要使用网络核心部分所提供的服务。</strong></p></blockquote><p><strong>对等连接方式：</strong></p><ul><li><strong>对等连接</strong> (peer-to-peer，简写为 <strong>P2P</strong> ) 是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。</li><li>只要两个主机都运行了对等连接软件 ( P2P 软件) ，它们就可以进行<strong>平等的、对等连接通信</strong>。</li><li>双方都可以下载对方已经存储在硬盘中的共享文档。</li></ul><hr><h1 id="_1-3-三种交换方式" tabindex="-1"><a class="header-anchor" href="#_1-3-三种交换方式"><span>1.3 三种交换方式</span></a></h1><p>网络核心部分是互联网中最复杂的部分。</p><p>网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。</p><p>在网络核心部分起特殊作用的是<strong>路由器</strong>(router)。</p><p><strong>路由器</strong>是实现<strong>分组交换</strong> (packet switching) 的关键构件，其任务是<strong>转发</strong>收到的分组，这是网络核心部分最重要的功能。</p><h2 id="_1、电路交换-circuit-switching" tabindex="-1"><a class="header-anchor" href="#_1、电路交换-circuit-switching"><span>1、电路交换（Circuit Switching）</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-18.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>传统两两相连的方式，当电话数量很多时，电话线也很多，就很不方便</p><p>所以要使得每一部电话能够很方便地和另一部电话进行通信，就应该使用一个<strong>中间设备</strong>将这些电话连接起来，这个中间设备就是<strong>电话交换机</strong></p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-19.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><p>电话交换机接通电话线的方式称为电路交换；</p></li><li><p>从通信资源的分配角度来看，交换（Switching）就是按照某种方式动态地分配传输线路的资源；</p></li><li><p>电路交换的三个步骤：</p><p>1、建立连接（分配通信资源）</p><p>2、通话（一直占用通信资源）</p><p>3、释放连接（归还通信资源）</p></li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-20.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>当使用电路交换来传送计算机数据时，其线路的传输效率往往很低。</p><p>这是因为计算机数据是突发式地出现在传输线路上的。</p><p>所以计算机通常采用的是<strong>分组交换</strong>，而不是线路交换</p></blockquote><h2 id="_2、分组交换-packet-switching" tabindex="-1"><a class="header-anchor" href="#_2、分组交换-packet-switching"><span>2、分组交换（Packet Switching）</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-21.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>通常我们把表示<strong>该消息的整块数据</strong>成为一个<strong>报文</strong>。</p><p>在发送报文之前，先把较长的报文划分成一个个更小的<strong>等长数据段</strong>，在每一个数据段前面。加上一些由必<strong>要的控制信息组成的首部</strong>后，就构成一个分组，也可简称为“包”，相应地，首部也可称为“包头”。</p><p>首部包含了<strong>分组的目的地址</strong></p><p>分组从源主机到目的主机，可走不同的路径。</p></blockquote><p>发送方</p><ul><li>构造分组</li><li>发送分组</li></ul><p>路由器</p><ul><li>缓存分组</li><li>转发分组</li><li>简称为“分组转发”</li></ul><blockquote><p>在路由器中的输入和输出端口之间没有直接连线。</p><p>路由器处理分组的过程是：</p><ol><li><p>把收到的分组先<strong>放入缓存（暂时存储）；</strong></p></li><li><p><strong>查找转发表</strong>，找出到某个目的地址应从哪个端口转发；</p></li><li><p>把分组送到适当的端口<strong>转发</strong>出去。</p></li></ol></blockquote><p>接收方</p><ul><li>接收分组</li><li>还原报文</li></ul><h2 id="_3、报文交换-message-switching" tabindex="-1"><a class="header-anchor" href="#_3、报文交换-message-switching"><span>3、报文交换（Message Switching）</span></a></h2><p>报文交换中的交换结点也采用存储转发方式，但报文交换对报文的大小没有限制，这就要求交换结点需要较大的缓存空间。报文交换主要用于早期的电报通信网，现在较少使用，<strong>通常被较先进的分组交换方式所取代</strong>。</p><h2 id="三种交换方式的对比" tabindex="-1"><a class="header-anchor" href="#三种交换方式的对比"><span>三种交换方式的对比</span></a></h2><blockquote><p>假设A，B，C，D是分组传输路径所要经过的4个结点交换机，纵坐标为时间</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-22.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>分析：</p><p>电路交换：</p><ul><li>通信之前首先要建立连接；连接建立好之后，就可以使用已建立好的连接进行数据传送；数据传送后，需释放连接，以归还之前建立连接所占用的通信线路资源。</li><li>一旦建立连接，中间的各结点交换机就是直通形式的，比特流可以直达终点；</li></ul><p>报文交换：</p><ul><li>可以随时发送报文，而不需要事先建立连接；整个报文先传送到相邻结点交换机，全部存储下来后进行查表转发，转发到下一个结点交换机。</li><li>整个报文需要在各结点交换机上进行存储转发，由于不限制报文大小，因此需要各结点交换机都具有较大的缓存空间。</li></ul><p>分组交换：</p><ul><li>可以随时发送分组，而不需要事先建立连接。构成原始报文的一个个分组，依次在各结点交换机上存储转发。各结点交换机在发送分组的同时，还缓存接收到的分组。</li><li>构成原始报文的一个个分组，在各结点交换机上进行存储转发，相比报文交换，减少了转发时延，还可以避免过长的报文长时间占用链路，同时也有利于进行差错控制。</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-23.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><h1 id="_1-4-计算机网络的定义和分类" tabindex="-1"><a class="header-anchor" href="#_1-4-计算机网络的定义和分类"><span>1.4 计算机网络的定义和分类</span></a></h1><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><ul><li>计算机网络的精确定义并未统一</li><li>计算机网络的最简单的定义是：一些<strong>互</strong>相<strong>连</strong>接的、<strong>自治</strong>的计算机的<strong>集合</strong>。 <ul><li>互连：是指计算机之间可以通过有线或无线的方式进行数据通信；</li><li>自治：是指独立的计算机，他有自己的硬件和软件，可以单独运行使用；</li><li>集合：是指至少需要两台计算机；</li></ul></li><li>计算机网络的较好的定义是：计算机网络主要是由一些<strong>通用的，可编程的硬件（一定包含有中央处理机CPU）互连</strong>而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用</strong>。 <ul><li>计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机等智能硬件。</li><li>计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的各种应用）。</li></ul></li></ul><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h2><p><strong>按交换技术分类：</strong></p><ul><li>电路交换网络</li><li>报文交换网络</li><li>分组交换网络</li></ul><p><strong>按使用者分类：</strong></p><ul><li>公用网</li><li>专用网</li></ul><p><strong>按传输介质分类：</strong></p><ul><li>有线网络</li><li>无线网络</li></ul><p><strong>按覆盖范围分类：</strong></p><ul><li>广域网WAN（Wide Area Network）</li></ul><p>作用范围通常为几十到几千公里，因而有时也称为远程网（long haul network）。广域网是互联网的核心部分，其任务是通过长距离（例如，跨越不同的国家）运送主机所发送的数据。</p><ul><li>城域网MAN</li></ul><p>作用范围一般是一个城市，可跨越几个街区甚至整个城市</p><ul><li>局域网LAN</li></ul><p>一般用微型计算机或工作站通过高速通信线路相连（速率通常在 10 Mbit/s 以上），但地理上范围较小（1 km 左右）</p><ul><li>个域网PAN</li></ul><p>就是在个人工作的地方把个人使用的电子设备用无线技术连接起来的网络。</p><p><strong>按拓扑结构分类：</strong></p><ul><li>总线型网络</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-24.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>星型网络</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-25.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>环形网络</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-26.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>网状型网络</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-27.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><h1 id="_1-5-计算机网络的性能指标" tabindex="-1"><a class="header-anchor" href="#_1-5-计算机网络的性能指标"><span>1.5 计算机网络的性能指标</span></a></h1><h2 id="速率" tabindex="-1"><a class="header-anchor" href="#速率"><span>速率</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-28.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-29.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="带宽" tabindex="-1"><a class="header-anchor" href="#带宽"><span>带宽</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-30.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="吞吐量" tabindex="-1"><a class="header-anchor" href="#吞吐量"><span>吞吐量</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-31.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>带宽1 Gb/s的以太网，代表其额定速率是1 Gb/s，这个数值也是该以太网的<strong>吞吐量的绝对上限值</strong>。因此，对于带宽1 Gb/s的以太网，可能实际吞吐量只有 700 Mb/s，甚至更低。</p><p>注意：吞吐量还可以用每秒传送的字节数或帧数表示</p></blockquote><h2 id="时延" tabindex="-1"><a class="header-anchor" href="#时延"><span>时延</span></a></h2><p>时延时指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。</p><p>网络时延由几部分组成：</p><ul><li>发送时延</li></ul><p>主机或路由器发送数据帧所需要的时间，也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。</p><ul><li>传播时延</li></ul><p>电磁波在信道中传播一定的距离需要花费的时间。</p><ul><li>处理时延</li></ul><p>主机或路由器在收到分组时要花费一定时间进行处理</p><ul><li>排队时延</li></ul><p>分组在进过网络传输时，要经过许多路由器。但分组在进入路由器后要先在输入队列中排队等待处理。</p><blockquote><p>有时会把排队时延看成<strong>处理时延 一部分</strong></p><p>总时延 = 发送时延 + 传播时延 + 处理时延 （处理时延 + 排队时延）</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-32.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-33.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>当处理时延忽略不计时，发送时延 和 传播时延谁占主导，要具体情况具体分析</p></blockquote><h2 id="时延带宽积" tabindex="-1"><a class="header-anchor" href="#时延带宽积"><span>时延带宽积</span></a></h2><p>时延带宽积 = 传播时延 * 带宽</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-34.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="往返时间" tabindex="-1"><a class="header-anchor" href="#往返时间"><span>往返时间</span></a></h2><p>互联网上的信息不仅仅单方向传输而是双向交互的。因此，我们有时很需要知道<strong>双向交互一次所需的时间</strong>。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-35.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="利用率" tabindex="-1"><a class="header-anchor" href="#利用率"><span>利用率</span></a></h2><p>利用率有<strong>信道利用率</strong>和<strong>网络利用率</strong>两种。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-36.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="丢包率" tabindex="-1"><a class="header-anchor" href="#丢包率"><span>丢包率</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-37.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><h1 id="_1-6-计算机网络体系结构" tabindex="-1"><a class="header-anchor" href="#_1-6-计算机网络体系结构"><span>1.6 计算机网络体系结构</span></a></h1><h2 id="_1、常见的计算机网络体系结构" tabindex="-1"><a class="header-anchor" href="#_1、常见的计算机网络体系结构"><span>1、常见的计算机网络体系结构</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-38.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>如今用的最多的是TCP/IP体系结构，现今规模最大的、覆盖全球的、基于TCP/IP的互联网并未使用OSI标准。</p><p>TCP/IP体系结构相当于将OSI体系结构的<strong>物理层</strong>和<strong>数据链路层</strong>合并为了<strong>网络接口层</strong>，并去掉了<strong>会话层</strong>和<strong>表示层</strong>。</p><p>TCP/IP在网络层使用的协议是IP协议，IP协议的意思是网际协议，因此<strong>TCP/IP体系结构的网络层称为网际层</strong></p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-39.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>在用户主机的操作系统中，通常都带有符合TCP/IP体系结构标准的TCP/IP协议族。</p><p>而用于网络互连的路由器中，也带有符合TCP/IP体系结构标准的TCP/IP协议族。</p><p>只不过路由器一般只包含网络接口层和网际层。</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667375456110.png" alt="1667375456110" tabindex="0" loading="lazy"><figcaption>1667375456110</figcaption></figure><blockquote><p><strong>网络接口层</strong>：并没有规定具体内容，这样做的目的是可以互连全世界各种不同的网络接口，例如：有线的以太网接口，无线局域网的WIFI接口等。</p><p><strong>网际层</strong>：它的核心协议是IP协议。</p><p><strong>运输层</strong>：TCP和UDP是这层的两个重要协议。</p><p><strong>应用层</strong>：这层包含了大量的应用层协议，如 HTTP , DNS 等。</p></blockquote><blockquote><p>**IP协议（网际层）<strong>可以将不同的</strong>网络接口（网络接口层）<strong>进行互连，并向其上的</strong>TCP协议和UDP协议（运输层）**提供网络互连服务</p><p>而<strong>TCP协议</strong>在享受IP协议提供的网络互连服务的基础上，可向<strong>应用层的相应协议</strong>提供<strong>可靠</strong>的传输服务。</p><p><strong>UDP协议</strong>在享受IP协议提供的网络互连服务的基础上，可向<strong>应用层的相应协议</strong>提供<strong>不可靠</strong>的传输服务。</p></blockquote><blockquote><p>TCP/IP体系结构中最重要的是<strong>IP协议</strong>和<strong>TCP协议</strong>，因此用TCP和IP来表示整个协议大家族。</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-40.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>教学时把TCP/IP体系结构的<strong>网络接口层</strong>分成了<strong>物理层</strong>和<strong>数据链路层</strong></p></blockquote><h2 id="_2、计算机网络体系结构分层的必要性" tabindex="-1"><a class="header-anchor" href="#_2、计算机网络体系结构分层的必要性"><span>2、计算机网络体系结构分层的必要性</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-41.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>物理层问题</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-42.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>这图说明</p><ul><li><p>第一，严格来说，传输媒体并不属于物理层</p></li><li><p>计算机传输的信号，并不是图示的方波信号</p></li></ul><p>这样举例只是让初学者容易理解</p></blockquote><p><strong>数据链路层问题</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-43.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>网络层问题</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-44.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>运输层问题</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-45.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>如何标识与网络通信相关的应用进程：一个分组到来，我们应该交给哪个进程处理呢？浏览器进程还是QQ进程</p></blockquote><p><strong>应用层问题</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-46.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>应用层该用什么方法（应用层协议）去解析数据</p></blockquote><p><strong>总结</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-47.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-48.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-49.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3、计算机网络体系结构分层思想举例" tabindex="-1"><a class="header-anchor" href="#_3、计算机网络体系结构分层思想举例"><span>3、计算机网络体系结构分层思想举例</span></a></h2><p>例子：主机的浏览器如何与Web服务器进行通信</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-50.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解析：</strong></p><p>主机和Web服务器之间基于网络的通信，实际上是主机中的<strong>浏览器应用进程</strong>与Web服务器中的<strong>Web服务器应用进程</strong>之间基于<strong>网络的通信</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-51.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>体系结构的各层在整个过程中起到怎样的作用？</strong></p><p><strong>1、发送方发送</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-52.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>第一步：</p><ul><li><p><strong>应用层</strong>按照HTTP协议的规定构建一个<strong>HTTP请求报文</strong></p></li><li><p>应用层将<strong>HTTP请求报文</strong>交付给<strong>运输层</strong>处理</p></li></ul></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-53.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>第二步：</p><ul><li><p><strong>运输层</strong>给<strong>HTTP请求报文</strong>添加一个<strong>TCP首部</strong>，使之成为<strong>TCP报文段</strong></p></li><li><p><strong>TCP报文段的首部格式</strong>作用是区分应用进程以及实现可靠传输</p></li><li><p><strong>运输层</strong>将T<strong>CP报文段</strong>交付给<strong>网络层</strong>处理</p></li></ul></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-54.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>第三步：</p><ul><li><p><strong>网络层</strong>给<strong>TCP报文段</strong>添加一个<strong>IP首部</strong>，使之成为<strong>IP数据报</strong></p></li><li><p><strong>IP数据报的首部格式</strong>作用是使<strong>IP数据报</strong>可以在互联网传输，也就是被路由器转发</p></li><li><p><strong>网络层</strong>将<strong>IP数据报</strong>交付给<strong>数据链路层</strong>处理</p></li></ul></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-55.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>第四步：</p><ul><li><p><strong>数据链路层</strong>给<strong>IP数据报</strong>添加一个<strong>首部</strong>和一个<strong>尾部</strong>，使之成为<strong>帧</strong> （图示右边为首部，左边为尾部）</p></li><li><p>该<strong>首部</strong>的作用主要是为了让<strong>帧</strong>能够在一段链路上或一个网络上传输，能够被相应的目的主机接收</p></li><li><p>该<strong>尾部</strong>的作用是让目的主机检查所接收到的<strong>帧</strong>是否有误码</p></li><li><p><strong>数据链路层</strong>将<strong>帧</strong>交付给<strong>物理层</strong></p></li></ul></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-56.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>第五步：</p><ul><li><p><strong>物理层</strong>先将<strong>帧</strong>看做是<strong>比特流</strong>，这里的网络N1假设是以太网，所以<strong>物理层</strong>还会给该<strong>比特流</strong>前面添加<strong>前导码</strong></p></li><li><p><strong>前导码</strong>的作用是为了让目的主机做好接收帧的准备</p></li><li><p><strong>物理层</strong>将装有<strong>前导码</strong>的<strong>比特流</strong>变换成相应的<strong>信号</strong>发送给传输媒体</p></li></ul></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-57.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>第六步：</p><ul><li><strong>信号</strong>通过<strong>传输媒体</strong>到达<strong>路由器</strong></li></ul></blockquote><p><strong>2、路由器转发</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-58.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-59.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-60.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-61.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>在路由器中</p><ul><li><p><strong>物理层</strong>将<strong>信号</strong>变为<strong>比特流</strong>，然后去掉<strong>前导码</strong>后，将其交付给<strong>数据链路层</strong></p></li><li><p><strong>数据链路层</strong>将<strong>帧</strong>的<strong>首部</strong>和<strong>尾部</strong>去掉后，将其交付给<strong>网络层</strong>，这实际交付的是<strong>IP数据报</strong></p></li><li><p><strong>网络层</strong>解析<strong>IP数据报</strong>的<strong>首部</strong>，从中提取<strong>目的网络地址</strong></p></li></ul></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-62.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-63.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-64.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>在路由器中</p><ul><li><p>提取<strong>目的网络地址</strong>后查找<strong>自身路由表</strong>。确定<strong>转发端口</strong>， 以便进行转发</p></li><li><p><strong>网络层</strong>将<strong>IP数据报</strong>交付给<strong>数据链路层</strong></p></li><li><p><strong>数据链路层</strong>给<strong>IP数据报</strong>添加一个<strong>首部</strong>和一个<strong>尾部</strong>，使之成为<strong>帧</strong></p></li><li><p><strong>数据链路层</strong>将帧交付给<strong>物理层</strong></p></li><li><p><strong>物理层</strong>先将<strong>帧</strong>看成<strong>比特流</strong>，这里的网络N2假设是以太网，所以<strong>物理层</strong>还会给该<strong>比特流</strong>前面添加<strong>前导码</strong></p></li><li><p>物理层将装有<strong>前导码</strong>的<strong>比特流</strong>变换成相应的<strong>信号</strong>发送给传输媒体，信号通过传输媒体到达<strong>Web服务器</strong></p></li></ul></blockquote><p><strong>3、接收方接收</strong></p><blockquote><p>和发送方（主机）发送过程的封装正好是反着来</p><p>在Web 服务器上</p><ul><li><p><strong>物理层</strong>将<strong>信号</strong>变换为<strong>比特流</strong>，然后去掉<strong>前导码</strong>后成为<strong>帧</strong>，交付给<strong>数据链路层</strong></p></li><li><p><strong>数据链路层</strong>将<strong>帧</strong>的<strong>首部</strong>和<strong>尾部</strong>去掉后成为<strong>IP数据报</strong>，将其交付给<strong>网络层</strong></p></li><li><p><strong>网络层</strong>将<strong>IP数据报</strong>的<strong>首部</strong>去掉后成为<strong>TCP报文段</strong>，将其交付给<strong>运输层</strong></p></li><li><p><strong>运输层</strong>将<strong>TCP报文段</strong>的<strong>首部</strong>去掉后成为<strong>HTTP请求报文</strong>，将其交付给<strong>应用层</strong></p></li><li><p><strong>应用层</strong>对<strong>HTTP请求报文</strong>进行<strong>解析</strong>，然后给主机发回<strong>响应报文</strong></p></li></ul><p><strong>发回响应报文的步骤和之前过程类似</strong></p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-65.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_4、计算机网络体系结构中的专用术语" tabindex="-1"><a class="header-anchor" href="#_4、计算机网络体系结构中的专用术语"><span>4、计算机网络体系结构中的专用术语</span></a></h2><p>以下介绍的专用术语来源于OSI的七层协议体系结构，但也适用于TCP/IP的四层体系结构和五层协议体系结构</p><p><strong>实体</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-66.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>协议</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-67.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>协议：控制两个对等实体进行逻辑通信的规则的集合</p><p>协议三要素：</p><ul><li><p>语法：定义所交换信息的格式</p></li><li><p>语义：定义收发双方所要完成的操作</p></li><li><p>同步：定义收发双发的时序关系</p></li></ul></blockquote><p><strong>服务</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-68.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957043-69.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957043-70.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_2-1、物理层的基本概念" tabindex="-1"><a class="header-anchor" href="#_2-1、物理层的基本概念"><span>2.1、物理层的基本概念</span></a></h1><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-9b987d868b26c714.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><h1 id="_2-2、物理层下面的传输媒体" tabindex="-1"><a class="header-anchor" href="#_2-2、物理层下面的传输媒体"><span>2.2、物理层下面的传输媒体</span></a></h1><p><strong>传输媒体</strong>也称为传输介质或传输媒介，他就是数据传输系统中在发送器和接收器之间的物理通路。<strong>传输媒体</strong>可分为两大类，即<strong>导向型传输媒体</strong>和<strong>非导向型传输媒体</strong></p><p>传输媒体不属于计算机网络体系结构的任何一层。如果非要将它添加到体系结构中，那只能将其放置到物理层之下。</p><h2 id="导向型传输媒体" tabindex="-1"><a class="header-anchor" href="#导向型传输媒体"><span>导向型传输媒体</span></a></h2><p>在导引型传输媒体中，电磁波被导引沿着固体媒体传播。</p><p><strong>同轴电缆</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-50d3acc8eff03935.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>双绞线</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-692dde0bbbc49a1d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>光纤</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-fc85597b91c2cd7a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-060d940d8451692e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>多模光纤</strong></p><ul><li>可以存在多条不同角度入射的光线在一条光纤中传输。这种光纤就称为<strong>多模光纤</strong>。</li></ul><p><strong>单模光纤</strong></p><ul><li>若光纤的直径减小到只有一个光的波长，则光纤就像一根波导那样，它可使光线一直向前传播，而不会产生多次反射。这样的光纤称为<strong>单模光纤</strong>。</li></ul></blockquote><p><strong>电力线</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-2c23cb1d18aa345c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1175/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="非导向型传输媒体" tabindex="-1"><a class="header-anchor" href="#非导向型传输媒体"><span>非导向型传输媒体</span></a></h2><p>非导引型传输媒体是指自由空间。</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-8432039f51003722.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-d2a8692970355b05.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>无线电波</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-357bc29ed7591006.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>image-20201008133135659</p><p><strong>微波</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-f042b478ef808a1a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>红外线</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-95eac658ca822ab2.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>可见光</strong></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%E5%8F%AF%E8%A7%81%E5%85%89%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%2F16268518%3Ffromtitle%3DLiFi%26fromid%3D5675729%26fr%3Daladdin" target="_blank" rel="noopener noreferrer">LIFI</a></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-e1bc3e93ff50114b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><h1 id="_2-3、传输方式" tabindex="-1"><a class="header-anchor" href="#_2-3、传输方式"><span>2.3、传输方式</span></a></h1><h2 id="串行传输和并行传输" tabindex="-1"><a class="header-anchor" href="#串行传输和并行传输"><span>串行传输和并行传输</span></a></h2><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-54b03a1b4fd3cdd8.png?imageMogr2/auto-orient/strip|imageView2/2/w/787/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>串行传输</strong>：</p><ul><li>数据是一个比特一个比特依次发送的，因此在发送端与接收端之间，只需要一条数据传输线路即可</li></ul><p><strong>并行传输</strong>：</p><ul><li><p>一次发送n个比特，因此，在发送端和接收端之间需要有n条传输线路</p></li><li><p>并行传输的优点是比串行传输的速度n倍，但成本高</p></li></ul><p>数据在传输线路上的传输采用是<strong>串行传输</strong>，计算机内部的数据传输常用<strong>并行传输</strong></p></blockquote><h2 id="同步传输和异步传输" tabindex="-1"><a class="header-anchor" href="#同步传输和异步传输"><span>同步传输和异步传输</span></a></h2><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-15060e3d8de110ba.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>同步传输</strong>：</p><ul><li><p>数据块以稳定的比特流的形式传输。字节之间没有间隔</p></li><li><p>接收端在每个比特信号的中间时刻进行检测，以判别接收到的是比特0还是比特1</p></li><li><p>由于不同设备的时钟频率存在一定差异，不可能做到完全相同，在传输大量数据的过程中，所产生的判别时刻的累计误差，会导致接收端对比特信号的判别错位</p></li></ul><p>所以要使收发双发时钟保持同步</p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-19cfd094ecef0538.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>异步传输</strong>：</p><ul><li><p>以字节为独立的传输单位，字节之间的时间间隔不是固定</p></li><li><p>接收端仅在每个字节的起始处对字节内的比特实现同步</p></li><li><p>通常在每个字节前后分别加上起始位和结束位</p></li></ul></blockquote><h2 id="单向通信-单工-、双向交替通信-半双工-和双向同时通信-全双工" tabindex="-1"><a class="header-anchor" href="#单向通信-单工-、双向交替通信-半双工-和双向同时通信-全双工"><span>单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）</span></a></h2><p>在许多情况下，我们要使用“<strong>信道（channel）</strong>”这一名词。信道和电路并不等同。信道一般都是用来表示向某一个方向传送信息的媒体。因此，一条通信电路往往包含一条发送信道和一条接收信道。</p><p>从通信的双方信息交互的方式来看，可以有以下三种基本方式：</p><p><strong>单向通信</strong>：</p><p>又称为<strong>单工通信</strong>，即只能有一个方向的通信而没有反方向的交互。无线电广播或有线电以及电视广播就属于这种类型</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-5b07729ff4cd3411.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>双向交替通信</strong>：</p><p>又称为<strong>半双工通信</strong>，即通信的双方可以发送信息，但不能双方同时发送（当然也就不能同时接收）。这种通信方式使一方发送另一方接收，过一段时间后可以再反过来</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-e0f90a502a95d1b4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>双向同时通信</strong>：</p><p>又称为<strong>全双工通信</strong>，即通信的双发可以同时发送和接收信息。</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-68977b7eeac3b7f2.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>单向通信</strong>只需要一条信道，而<strong>双向交替通信</strong>或<strong>双向同时通信</strong>则需要两条信道（每个方向各一条）</p><p><strong>双向同时通信</strong>的传输效率最高</p></blockquote><h1 id="_2-4、编码与调制" tabindex="-1"><a class="header-anchor" href="#_2-4、编码与调制"><span>2.4、编码与调制</span></a></h1><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-acc59055804f0890.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>常用术语</strong></p><ul><li><p><strong>数据 (data)</strong> —— 运送消息的实体。</p></li><li><p><strong>信号 (signal)</strong> —— 数据的电气的或电磁的表现。</p></li><li><p><strong>模拟信号 (analogous signal)</strong> —— 代表消息的参数的取值是连续的。</p></li><li><p><strong>数字信号 (digital signal)</strong> —— 代表消息的参数的取值是离散的。</p></li><li><p><strong>码元 (code)</strong> —— 在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</p></li><li><p><strong>基带信号</strong>（即基本频带信号）—— 来自信源的信号。像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。</p></li><li><p>基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。因此必须对基带信号进行<strong>调制</strong> (modulation)。</p></li></ul></blockquote><p>在计算机网络中，常见的是将数字基带信号通过编码或调制的方法在相应信道进行传输</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-ded8a3e566f7687b.png?imageMogr2/auto-orient/strip|imageView2/2/w/715/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="传输媒体与信道的关系" tabindex="-1"><a class="header-anchor" href="#传输媒体与信道的关系"><span><strong>传输媒体与信道的关系</strong></span></a></h2><blockquote><p><strong>信道的几个基本概念</strong></p><ul><li><p><strong>信道</strong> —— 一般用来表示向某一个方向传送信息的媒体。</p></li><li><p><strong>单向通信（单工通信）</strong>——只能有一个方向的通信而没有反方向的交互。</p></li><li><p><strong>双向交替通信（半双工通信）</strong>——通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</p></li><li><p><strong>双向同时通信（全双工通信）</strong>——通信的双方可以同时发送和接收信息。</p></li></ul></blockquote><p>严格来说，传输媒体不能和信道划等号</p><p>对于单工传输，传输媒体只包含一个信道，要么是发送信道，要么是接收信道</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-414f829a7df390e6.png?imageMogr2/auto-orient/strip|imageView2/2/w/893/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>对于半双工和全双工，传输媒体中要包含两个信道，一个发送信道，另一个是接收信道</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-d3b3583526407c45.png?imageMogr2/auto-orient/strip|imageView2/2/w/827/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>如果使用信道复用技术，一条传输媒体还可以包含多个信道</p></blockquote><h2 id="常用编码" tabindex="-1"><a class="header-anchor" href="#常用编码"><span>常用编码</span></a></h2><p><strong>不归零编码</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-2f6b70fef84339ec.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><ul><li><p>正电平表示比特1/0</p></li><li><p>负电平表示比特0/1</p></li></ul><p>中间的虚线是零电平，所谓不归零编码，就是指在整个码元时间内，电平不会出现零电平</p><p><strong>实际比特1和比特0的表示要看现实怎么规定</strong></p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-0732d0edc74846b5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>这需要发送方的发送与接收方的接收做到严格的同步</p><ul><li><p>需要<strong>额外一根传输线来传输时钟信号</strong>，使发送方和接收方同步，接收方按时钟信号的节拍来逐个接收码元</p></li><li><p><strong>但是</strong>对于计算机网络，<strong>宁愿利用这根传输线传输数据信号</strong>，而不是传输时钟信号</p></li></ul><p>由于<strong>不归零编码</strong>存在<strong>同步问题</strong>，因此计算机网络中的数据传输不采用这类编码！</p></blockquote><p><strong>归零编码</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-8aa838a116fdafb4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-2fa351ff35477f1a.png?imageMogr2/auto-orient/strip|imageView2/2/w/723/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>归零编码</strong>虽然<strong>自同步</strong>，但<strong>编码效率低</strong></p></blockquote><h5 id="曼彻斯特编码" tabindex="-1"><a class="header-anchor" href="#曼彻斯特编码"><span><strong>曼彻斯特编码</strong></span></a></h5><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-a34a686a9d052e9c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>在每个码元时间的中间时刻，信号都会发生跳变</p><ul><li><p>负跳变表示比特1</p></li><li><p>正跳变表示比特0</p></li><li><p>码元中间时刻的跳变即表示时钟，又表示数据</p></li></ul><h4 id="实际比特1和比特0的表示要看现实怎么规定" tabindex="-1"><a class="header-anchor" href="#实际比特1和比特0的表示要看现实怎么规定"><span><strong>实际比特1和比特0的表示要看现实怎么规定</strong></span></a></h4><p>传统以太网使用的就是曼切斯特编码</p></blockquote><h5 id="差分曼彻斯特编码" tabindex="-1"><a class="header-anchor" href="#差分曼彻斯特编码"><span><strong>差分曼彻斯特编码</strong></span></a></h5><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-9a758474e374329a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>在每个码元时间的中间时刻，信号都会发送跳变，但与<strong>曼彻斯特不同</strong></p><ul><li><p><strong>跳变仅表示时钟</strong></p></li><li><p><strong>码元开始处电平是否变换表示数据</strong></p></li></ul><div class="language-undefined line-numbers-mode" data-highlighter="shiki" data-ext="undefined" data-title="undefined" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>*   变化表示比特1</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>*   不变化表示比特0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实际比特1和比特0的表示要看现实怎么规定</strong></p><p>比曼彻斯特编码变化少，更适合较高的传输速率</p></blockquote><p><strong>总结</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-de92dd43d328b4f7.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="调制" tabindex="-1"><a class="header-anchor" href="#调制"><span>调制</span></a></h2><p>数字信号转换为模拟信号，在模拟信道中传输，例如WiFi，采用补码键控CCK/直接序列扩频DSSS/正交频分复用OFDM等<strong>调制</strong>方式。</p><p>模拟信号转换为另一种模拟信号，在模拟信道中传输，例如，语音数据加载到模拟的载波信号中传输。频分复用FDM技术，充分利用带宽资源。</p><p><strong>基本调制方法</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-7ce461637de91b6e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><ul><li><p><strong>调幅AM</strong>：所调制的信号由两种不同振幅的基本波形构成。每个基本波形只能表示1比特信息量。</p></li><li><p><strong>调频FM</strong>：所调制的信号由两种不同频率的基本波形构成。每个基本波形只能表示1比特信息量。</p></li><li><p><strong>调相PM</strong>：所调制的信号由两种不同初相位的基本波形构成。每个基本波形只能表示1比特信息量。</p></li></ul><p>但是使用基本调制方法，1个码元只能包含1个比特信息</p></blockquote><p><strong>混合调制</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-8fec8ccb7ff3ea77.png?imageMogr2/auto-orient/strip|imageView2/2/w/680/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-30e70220d4127135.png?imageMogr2/auto-orient/strip|imageView2/2/w/642/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-1cb6de826ba63b70.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-600f7802e1eaa18a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>上图码元所对应的4个比特是错误的，码元不能随便对应4个比特</p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-1e2617434d904ce4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="码元" tabindex="-1"><a class="header-anchor" href="#码元"><span>码元</span></a></h2><p>在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形。</p><h1 id="_2-5、信道的极限容量" tabindex="-1"><a class="header-anchor" href="#_2-5、信道的极限容量"><span>2.5、信道的极限容量</span></a></h1><ul><li>任何实际的信道都不是理想的，在传输信号时会产生各种失真以及带来多种干扰。</li><li>码元传输的速率越高，或信号传输的距离越远，或传输媒体质量越差，在信道的输出端的波形的失真就越严重。</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-0a9bbf5bcd5e8226.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>失真的原因：</p><ul><li>码元传输的速率越高</li><li>信号传输的距离越远</li><li>噪声干扰越大</li><li>传输媒体质量越差</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-b90918937a54faa6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-57e105e5df793b93.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>奈氏准则和香农公式对比：</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-5ce50e745950c8eb.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="信道复用技术" tabindex="-1"><a class="header-anchor" href="#信道复用技术"><span>信道复用技术</span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870774974.png" alt="1666870774974" tabindex="0" loading="lazy"><figcaption>1666870774974</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870798317.png" alt="1666870798317" tabindex="0" loading="lazy"><figcaption>1666870798317</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870838386.png" alt="1666870838386" tabindex="0" loading="lazy"><figcaption>1666870838386</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870871379.png" alt="1666870871379" tabindex="0" loading="lazy"><figcaption>1666870871379</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870886963.png" alt="1666870886963" tabindex="0" loading="lazy"><figcaption>1666870886963</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870915267.png" alt="1666870915267" tabindex="0" loading="lazy"><figcaption>1666870915267</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870928043.png" alt="1666870928043" tabindex="0" loading="lazy"><figcaption>1666870928043</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870957066.png" alt="1666870957066" tabindex="0" loading="lazy"><figcaption>1666870957066</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870970579.png" alt="1666870970579" tabindex="0" loading="lazy"><figcaption>1666870970579</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870986659.png" alt="1666870986659" tabindex="0" loading="lazy"><figcaption>1666870986659</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870998640.png" alt="1666870998640" tabindex="0" loading="lazy"><figcaption>1666870998640</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666871019764.png" alt="1666871019764" tabindex="0" loading="lazy"><figcaption>1666871019764</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666871028665.png" alt="1666871028665" tabindex="0" loading="lazy"><figcaption>1666871028665</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666871037061.png" alt="1666871037061" tabindex="0" loading="lazy"><figcaption>1666871037061</figcaption></figure><h2 id="频分复用、时分复用和统计时分复用" tabindex="-1"><a class="header-anchor" href="#频分复用、时分复用和统计时分复用"><span>频分复用、时分复用和统计时分复用</span></a></h2><p>复用 (multiplexing) 是通信技术中的基本概念。</p><p>它允许用户使用一个共享信道进行通信，降低成本，提高利用率。</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-8503f147c44d220f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>频分复用 FDM (Frequency Division Multiplexing)</strong></p><ul><li>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</li><li><strong>频分复用</strong>的所有用户在同样的时间<strong>占用不同的带宽资源</strong>（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-bcb9321a6a8a3d7a.png?imageMogr2/auto-orient/strip|imageView2/2/w/425/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>时分复用TDM (Time Division Multiplexing)</strong></p><ul><li><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧（TDM帧）</strong>。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是<strong>周期性地出现</strong>（其周期就是TDM帧的长度）的。</li><li>TDM 信号也称为<strong>等时</strong> (isochronous) 信号。</li><li><strong>时分复用的所有用户在不同的时间占用同样的频带宽度。</strong></li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-cb9a20b7ce00d497.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><strong>时分复用可能会造成线路资源的浪费</strong><ul><li>使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般是不高的。</li></ul></li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-c1ef02caf1f2cfda.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>统计时分复用 STDM (Statistic TDM)</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-7f0b54d1c14702ca.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="波分复用" tabindex="-1"><a class="header-anchor" href="#波分复用"><span>波分复用</span></a></h2><p>波分复用 WDM(Wavelength Division Multiplexing)</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-039cdf67599ebe3b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="码分复用" tabindex="-1"><a class="header-anchor" href="#码分复用"><span>码分复用</span></a></h2><p>码分复用 CDM (Code Division Multiplexing)</p><ul><li>常用的名词是<strong>码分多址</strong> CDMA (Code Division Multiple Access)。</li><li>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</li><li>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li></ul><h1 id="数据链路层概述" tabindex="-1"><a class="header-anchor" href="#数据链路层概述"><span>数据链路层概述</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p><strong>链路</strong>是从一个结点到相邻结点的一段物理线路，<strong>数据链路</strong>则是在链路的基础上增加了一些必要的硬件（如网络适配器）和软件（如协议的实现）</p><p><strong>网络中的主机、路由器等都必须实现数据链路层</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121577697.png" alt="1667121577697" tabindex="0" loading="lazy"><figcaption>1667121577697</figcaption></figure><p><strong>局域网中的主机、交换机等都必须实现数据链路层</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121730586.png" alt="1667121730586" tabindex="0" loading="lazy"><figcaption>1667121730586</figcaption></figure><p><strong>从层次上来看数据的流动</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121744687.png" alt="1667121744687" tabindex="0" loading="lazy"><figcaption>1667121744687</figcaption></figure><p><strong>仅从数据链路层观察帧的流动</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121766909.png" alt="1667121766909" tabindex="0" loading="lazy"><figcaption>1667121766909</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121780294.png" alt="1667121780294" tabindex="0" loading="lazy"><figcaption>1667121780294</figcaption></figure><blockquote><p>主机H1 到主机H2 所经过的网络可以是多种不同类型的</p><p><strong>注意：不同的链路层可能采用不同的数据链路层协议</strong></p></blockquote><p><strong>数据链路层使用的信道</strong></p><p>数据链路层属于计算机网路的低层。<strong>数据链路层使用的信道主要有以下两种类型：</strong></p><ul><li>点对点信道</li><li>广播信道</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121797885.png" alt="1667121797885" tabindex="0" loading="lazy"><figcaption>1667121797885</figcaption></figure><blockquote><p><strong>局域网属于数据链路层</strong></p><p>局域网虽然是个网络。但我们并不把局域网放在网络层中讨论。这是因为在网络层要讨论的是多个网络互连的问题，是讨论分组怎么从一个网络，通过路由器，转发到另一个网络。</p><p>而在同一个局域网中，分组怎么从一台主机传送到另一台主机，但并不经过路由器转发。从整个互联网来看，<strong>局域网仍属于数据链路层</strong>的范围</p></blockquote><h2 id="三个重要问题" tabindex="-1"><a class="header-anchor" href="#三个重要问题"><span>三个重要问题</span></a></h2><p>数据链路层传送的协议数据单元是<strong>帧</strong></p><p><strong>封装成帧</strong></p><ul><li><strong>封装成帧</strong> (framing) 就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。</li><li>首部和尾部的一个重要作用就是进行<strong>帧定界</strong>。</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121823427.png" alt="1667121823427" tabindex="0" loading="lazy"><figcaption>1667121823427</figcaption></figure><p><strong>差错控制</strong></p><p>在传输过程中可能会产生<strong>比特差错</strong>：1 可能会变成 0， 而 0 也可能变成 1。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121847465.png" alt="1667121847465" tabindex="0" loading="lazy"><figcaption>1667121847465</figcaption></figure><p><strong>可靠传输</strong></p><p>接收方主机收到有误码的帧后，是不会接受该帧的，会将它丢弃</p><p>如果数据链路层向其上层提供的是不可靠服务，那么丢弃就丢弃了，不会再有更多措施</p><p><strong>如果数据链路层向其上层提供的是可靠服务，那就还需要其他措施，来确保接收方主机还可以重新收到被丢弃的这个帧的正确副本</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121862449.png" alt="1667121862449" tabindex="0" loading="lazy"><figcaption>1667121862449</figcaption></figure><blockquote><p>以上三个问题都是使用<strong>点对点信道的数据链路层</strong>来举例的</p></blockquote><p><strong>如果使用广播信道的数据链路层除了包含上面三个问题外，还有一些问题要解决</strong></p><p>如图所示，主机A，B，C，D，E通过一根总线进行互连，主机A要给主机C发送数据，代表帧的信号会通过总线传输到总线上的其他各主机，那么主机B，D，E如何知道所收到的帧不是发送给她们的，主机C如何知道发送的帧是发送给自己的</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121879557.png" alt="1667121879557" tabindex="0" loading="lazy"><figcaption>1667121879557</figcaption></figure><p>可以用编址（地址）的来解决</p><p>将帧的目的地址添加在帧中一起传输</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121893578.png" alt="1667121893578" tabindex="0" loading="lazy"><figcaption>1667121893578</figcaption></figure><p>还有数据碰撞问题</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121904348.png" alt="1667121904348" tabindex="0" loading="lazy"><figcaption>1667121904348</figcaption></figure><blockquote><p>随着技术的发展，交换技术的成熟，</p><p>在 有线（局域网）领域 使用<strong>点对点链路</strong>和<strong>链路层交换机</strong>的<strong>交换式局域网</strong>取代了</p><p>共享式局域网</p><p>在无线局域网中仍然使用的是共享信道技术</p></blockquote><h1 id="_3-2、封装成帧" tabindex="-1"><a class="header-anchor" href="#_3-2、封装成帧"><span>3.2、封装成帧</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧</p><ul><li><strong>帧头和帧尾中包含有重要的控制信息</strong></li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121921172.png" alt="1667121921172" tabindex="0" loading="lazy"><figcaption>1667121921172</figcaption></figure><p>发送方的数据链路层将上层交付下来的协议数据单元封装成帧后，还要通过物理层，将构成帧的各比特，转换成电信号交给传输媒体，那么接收方的数据链路层如何从物理层交付的比特流中提取出一个个的帧？</p><p>答：需要帧头和帧尾来做<strong>帧定界</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121936852.png" alt="1667121936852" tabindex="0" loading="lazy"><figcaption>1667121936852</figcaption></figure><p>但比不是每一种数据链路层协议的帧都包含有帧定界标志，例如下面例子</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121949771.png" alt="1667121949771" tabindex="0" loading="lazy"><figcaption>1667121949771</figcaption></figure><blockquote><p>前导码</p><ul><li>前同步码：作用是使接收方的时钟同步</li><li>帧开始定界符：表明其后面紧跟着的就是MAC帧</li></ul></blockquote><h5 id="mac帧里面i的类型的值是用来指明数据载荷中的内容是由上一层的那个协议封装的-以便于将收到的mac帧的数据载荷上交给上一层的这个协议。" tabindex="-1"><a class="header-anchor" href="#mac帧里面i的类型的值是用来指明数据载荷中的内容是由上一层的那个协议封装的-以便于将收到的mac帧的数据载荷上交给上一层的这个协议。"><span>MAC帧里面i的类型的值是用来指明数据载荷中的内容是由上一层的那个协议封装的，以便于将收到的MAC帧的数据载荷上交给上一层的这个协议。</span></a></h5><h3 id="另外以太网还规定了帧间间隔为96比特时间-因此-mac帧不需要帧结束定界符" tabindex="-1"><a class="header-anchor" href="#另外以太网还规定了帧间间隔为96比特时间-因此-mac帧不需要帧结束定界符"><span>另外以太网还规定了帧间间隔为96比特时间，因此，MAC帧不需要帧结束定界符</span></a></h3><h5 id="以太网的mac帧格式" tabindex="-1"><a class="header-anchor" href="#以太网的mac帧格式"><span>以太网的MAC帧格式：</span></a></h5><h5 id="mac帧的长度不是整数个字节" tabindex="-1"><a class="header-anchor" href="#mac帧的长度不是整数个字节"><span>MAC帧的长度不是整数个字节</span></a></h5><h5 id="通过mac帧的fcs字段的值检测出帧有误码" tabindex="-1"><a class="header-anchor" href="#通过mac帧的fcs字段的值检测出帧有误码"><span>通过MAC帧的FCS字段的值检测出帧有误码</span></a></h5><h5 id="mac帧的长度不在64-1518之间" tabindex="-1"><a class="header-anchor" href="#mac帧的长度不在64-1518之间"><span>MAC帧的长度不在64~1518之间</span></a></h5><h4 id="接收方收到无效的mac帧时-就简单的将其抛弃-以太网的数据链路层没有重传机制。" tabindex="-1"><a class="header-anchor" href="#接收方收到无效的mac帧时-就简单的将其抛弃-以太网的数据链路层没有重传机制。"><span>接收方收到无效的MAC帧时，就简单的将其抛弃，以太网的数据链路层没有重传机制。</span></a></h4><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121966736.png" alt="1667121966736" tabindex="0" loading="lazy"><figcaption>1667121966736</figcaption></figure><h2 id="透明传输" tabindex="-1"><a class="header-anchor" href="#透明传输"><span>透明传输</span></a></h2><blockquote><p><strong>透明</strong></p><p>指某一个实际存在的事物看起来却好像不存在一样。</p></blockquote><p>透明传输是指<strong>数据链路层对上层交付的传输数据没有任何限制</strong>，好像数据链路层不存在一样</p><p>帧界定标志也就是个特定数据值，如果在上层交付的协议数据单元中， 恰好也包含这个特定数值，接收方就不能正确接收<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121981198.png" alt="1667121981198" loading="lazy"></p><blockquote><p>所以数据链路层应该对上层交付的数据有限制，其内容不能包含帧定界符的值</p></blockquote><p><strong>解决透明传输问题</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667186151597.png" alt="1667186151597" tabindex="0" loading="lazy"><figcaption>1667186151597</figcaption></figure><ul><li><strong>解决方法</strong>：面向字节的物理链路使用<strong>字节填充</strong> (byte stuffing) 或<strong>字符填充</strong> (character stuffing)，面向比特的物理链路使用比特填充的方法实现透明传输</li><li>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面<strong>插入一个转义字符“ESC”</strong>(其十六进制编码是1B)。</li><li>接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。</li><li>如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符 ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。</li></ul><p><strong>帧的数据部分长度</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667186162272.png" alt="1667186162272" tabindex="0" loading="lazy"><figcaption>1667186162272</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667186180239.png" alt="1667186180239" tabindex="0" loading="lazy"><figcaption>1667186180239</figcaption></figure><h1 id="_3-3、差-错检测" tabindex="-1"><a class="header-anchor" href="#_3-3、差-错检测"><span>3.3、差 错检测</span></a></h1><h2 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1"><span>介绍</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667186200691.png" alt="1667186200691" tabindex="0" loading="lazy"><figcaption>1667186200691</figcaption></figure><h2 id="奇偶校验" tabindex="-1"><a class="header-anchor" href="#奇偶校验"><span>奇偶校验</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667187940085.png" alt="1667187940085" tabindex="0" loading="lazy"><figcaption>1667187940085</figcaption></figure><h2 id="循环冗余校验crc-cyclic-redundancy-check" tabindex="-1"><a class="header-anchor" href="#循环冗余校验crc-cyclic-redundancy-check"><span>循环冗余校验CRC(Cyclic Redundancy Check)</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667187952636.png" alt="1667187952636" tabindex="0" loading="lazy"><figcaption>1667187952636</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667187970386.png" alt="1667187970386" tabindex="0" loading="lazy"><figcaption>1667187970386</figcaption></figure><p><strong>例题</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667187985429.png" alt="1667187985429" tabindex="0" loading="lazy"><figcaption>1667187985429</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667187997808.png" alt="1667187997808" tabindex="0" loading="lazy"><figcaption>1667187997808</figcaption></figure><p><strong>总结</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188008802.png" alt="1667188008802" tabindex="0" loading="lazy"><figcaption>1667188008802</figcaption></figure><blockquote><p>循环冗余校验 CRC 是一种检错方法，而帧校验序列 FCS 是添加在数据后面的冗余码</p></blockquote><h1 id="_3-4、可-靠传输" tabindex="-1"><a class="header-anchor" href="#_3-4、可-靠传输"><span>3.4、可 靠传输</span></a></h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p><strong>下面是比特差错</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188036648.png" alt="1667188036648" tabindex="0" loading="lazy"><figcaption>1667188036648</figcaption></figure><p><strong>其他传输差错</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188049380.png" alt="1667188049380" tabindex="0" loading="lazy"><figcaption>1667188049380</figcaption></figure><ul><li>分组丢失</li></ul><p>路由器输入队列快满了，主动丢弃收到的分组</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188063267.png" alt="1667188063267" tabindex="0" loading="lazy"><figcaption>1667188063267</figcaption></figure><ul><li>分组失序</li></ul><p>数据并未按照发送顺序依次到达接收端</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188076363.png" alt="1667188076363" tabindex="0" loading="lazy"><figcaption>1667188076363</figcaption></figure><ul><li>分组重复</li></ul><p>由于某些原因，有些分组在网络中滞留了，没有及时到达接收端，这可能会造成发送端对该分组的重发，重发的分组到达接收端，但一段时间后，滞留在网络的分组也到达了接收端，这就造成<strong>分组重复</strong>的传输差错</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188092073.png" alt="1667188092073" tabindex="0" loading="lazy"><figcaption>1667188092073</figcaption></figure><h2 id="三种可靠协议" tabindex="-1"><a class="header-anchor" href="#三种可靠协议"><span>三种可靠协议</span></a></h2><ul><li>停止-等待协议SW</li><li>回退N帧协议GBN</li><li>选择重传协议SR</li></ul><blockquote><p>这三种可靠传输实现机制的基本原理并不仅限于数据链路层，可以应用到计算机网络体系结构的各层协议中</p></blockquote><h2 id="停止-等待协议" tabindex="-1"><a class="header-anchor" href="#停止-等待协议"><span>停止-等待协议</span></a></h2><h3 id="停止-等待协议可能遇到的四个问题" tabindex="-1"><a class="header-anchor" href="#停止-等待协议可能遇到的四个问题"><span>停止-等待协议可能遇到的四个问题</span></a></h3><p><strong>确认与否认</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188113184.png" alt="1667188113184" tabindex="0" loading="lazy"><figcaption>1667188113184</figcaption></figure><p><strong>超时重传</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188128192.png" alt="1667188128192" tabindex="0" loading="lazy"><figcaption>1667188128192</figcaption></figure><p><strong>确认丢失</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188140249.png" alt="1667188140249" tabindex="0" loading="lazy"><figcaption>1667188140249</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188153180.png" alt="1667188153180" tabindex="0" loading="lazy"><figcaption>1667188153180</figcaption></figure><blockquote><p>既然数据分组需要编号，确认分组是否需要编号？</p><p>要。如下图所示</p></blockquote><p><strong>确认迟到</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188167865.png" alt="1667188167865" tabindex="0" loading="lazy"><figcaption>1667188167865</figcaption></figure><blockquote><p>注意，图中最下面那个数据分组与之前序号为0的那个数据分组不是同一个数据分组</p></blockquote><p><strong>注意事项</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188182362.png" alt="1667188182362" tabindex="0" loading="lazy"><figcaption>1667188182362</figcaption></figure><h3 id="停止-等待协议的信道利用率" tabindex="-1"><a class="header-anchor" href="#停止-等待协议的信道利用率"><span>停止-等待协议的信道利用率</span></a></h3><p>假设收发双方之间是一条直通的信道</p><ul><li><strong>TD</strong>：是发送方发送数据分组所耗费的发送时延</li><li><strong>RTT</strong>：是收发双方之间的往返时间</li><li><strong>TA</strong>：是接收方发送确认分组所耗费的发送时延</li></ul><p>TA一般都远小于TD，可以忽略，当RTT远大于TD时，信道利用率会非常低</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188196700.png" alt="1667188196700" tabindex="0" loading="lazy"><figcaption>1667188196700</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188212842.png" alt="1667188212842" tabindex="0" loading="lazy"><figcaption>1667188212842</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188224064.png" alt="1667188224064" tabindex="0" loading="lazy"><figcaption>1667188224064</figcaption></figure><blockquote><p>像停止-等待协议这样通过确认和重传机制实现的可靠传输协议，常称为自动请求重传协议ARQ(<strong>A</strong>utomatic <strong>R</strong>epeat re<strong>Q</strong>uest)，意思是重传的请求是自动进行，因为不需要接收方显式地请求，发送方重传某个发送的分组</p></blockquote><h2 id="回退n帧协议gbn" tabindex="-1"><a class="header-anchor" href="#回退n帧协议gbn"><span>回退N帧协议GBN</span></a></h2><h3 id="为什么用回退n帧协议" tabindex="-1"><a class="header-anchor" href="#为什么用回退n帧协议"><span>为什么用回退N帧协议</span></a></h3><p>在相同的时间内，使用停止-等待协议的发送方只能发送一个数据分组，而采用流水线传输的发送方，可以发送多个数据分组</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188236814.png" alt="1667188236814" tabindex="0" loading="lazy"><figcaption>1667188236814</figcaption></figure><p>回退N帧协议在流水线传输的基础上，利用发送窗口来限制发送方可连续发送数据分组的个数</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188245169.png" alt="1667188245169" tabindex="0" loading="lazy"><figcaption>1667188245169</figcaption></figure><h3 id="无差错情况流程" tabindex="-1"><a class="header-anchor" href="#无差错情况流程"><span>无差错情况流程</span></a></h3><p>发送方将序号落在发送窗口内的0~4号数据分组，依次连续发送出去</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188255923.png" alt="1667188255923" tabindex="0" loading="lazy"><figcaption>1667188255923</figcaption></figure><p>他们经过互联网传输正确到达接收方，就是没有乱序和误码，接收方按序接收它们，每接收一个，接收窗口就向前滑动一个位置，并给发送方发送针对所接收分组的确认分组，在通过互联网的传输正确到达了发送方</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188265919.png" alt="1667188265919" tabindex="0" loading="lazy"><figcaption>1667188265919</figcaption></figure><p>发送方每接收一个、发送窗口就向前滑动一个位置，这样就有新的序号落入发送窗口，发送方可以将收到确认的数据分组从缓存中删除了，而接收方可以择机将已接收的数据分组交付上层处理</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188376405.png" alt="1667188376405" tabindex="0" loading="lazy"><figcaption>1667188376405</figcaption></figure><h3 id="累计确认" tabindex="-1"><a class="header-anchor" href="#累计确认"><span>累计确认</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188281302.png" alt="1667188281302" tabindex="0" loading="lazy"><figcaption>1667188281302</figcaption></figure><blockquote><p>累计确认</p><p>优点:</p><ul><li>即使确认分组丢失，发送方也可能不必重传</li><li>减小接收方的开销</li><li>减小对网络资源的占用</li></ul><p>缺点：</p><ul><li>不能向发送方及时反映出接收方已经正确接收的数据分组信息</li></ul></blockquote><h3 id="有差错情况" tabindex="-1"><a class="header-anchor" href="#有差错情况"><span>有差错情况</span></a></h3><p>例如</p><p>在传输数据分组时，5号数据分组出现误码，接收方通过数据分组中的检错码发现了错误</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188397288.png" alt="1667188397288" tabindex="0" loading="lazy"><figcaption>1667188397288</figcaption></figure><p>于是丢弃该分组，而后续到达的这剩下四个分组与接收窗口的序号不匹配</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188410512.png" alt="1667188410512" tabindex="0" loading="lazy"><figcaption>1667188410512</figcaption></figure><p>接收同样也不能接收它们，讲它们丢弃，并对之前按序接收的最后一个数据分组进行确认，发送ACK4，<strong>每丢弃一个数据分组，就发送一个ACK4</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188422856.png" alt="1667188422856" tabindex="0" loading="lazy"><figcaption>1667188422856</figcaption></figure><p>当收到重复的ACK4时，就知道之前所发送的数据分组出现了差错，于是可以不等超时计时器超时就立刻开始重传，具体收到几个重复确认就立刻重传，根据具体实现决定</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188436149.png" alt="1667188436149" tabindex="0" loading="lazy"><figcaption>1667188436149</figcaption></figure><p>如果收到这4个重复的确认并不会触发发送立刻重传，一段时间后。超时计时器超时，也会将发送窗口内以发送过的这些数据分组全部重传</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188451281.png" alt="1667188451281" tabindex="0" loading="lazy"><figcaption>1667188451281</figcaption></figure><p>若WT超过取值范围，例如WT=8，会出现什么情况？</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188478125.png" alt="1667188478125" tabindex="0" loading="lazy"><figcaption>1667188478125</figcaption></figure><p>习题</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188489715.png" alt="1667188489715" tabindex="0" loading="lazy"><figcaption>1667188489715</figcaption></figure><p><strong>总结</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188497957.png" alt="1667188497957" tabindex="0" loading="lazy"><figcaption>1667188497957</figcaption></figure><ul><li>回退N帧协议在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议</li><li>在协议的工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议</li><li>由于回退N帧协议的特性，当通信线路质量不好时，其信道利用率并不比停止-等待协议高</li></ul><h2 id="选择重传协议sr" tabindex="-1"><a class="header-anchor" href="#选择重传协议sr"><span>选择重传协议SR</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188507200.png" alt="1667188507200" tabindex="0" loading="lazy"><figcaption>1667188507200</figcaption></figure><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1c4411d7jb%3Fp%3D27" target="_blank" rel="noopener noreferrer">具体流程请看视频</a></p><p><strong>习题</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188537864.png" alt="1667188537864" tabindex="0" loading="lazy"><figcaption>1667188537864</figcaption></figure><p><strong>总结</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188546727.png" alt="1667188546727" tabindex="0" loading="lazy"><figcaption>1667188546727</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188555435.png" alt="1667188555435" tabindex="0" loading="lazy"><figcaption>1667188555435</figcaption></figure><h1 id="_3-5、点对点协议ppp" tabindex="-1"><a class="header-anchor" href="#_3-5、点对点协议ppp"><span>3.5、点对点协议PPP</span></a></h1><ul><li>点对点协议PPP（Point-to-Point Protocol）是目前使用最广泛的点对点数据链路层协议</li><li>PPP协议是因特网工程任务组IEIF在1992年制定的。经过1993年和1994年的修订，现在的PPP协议已成为因特网的正式标准[RFC1661，RFC1662]</li><li>数据链路层使用的一种协议，它的特点是：简单；只检测差错，而不是纠正差错；不使用序号，也不进行流量控制；可同时支持多种网络层协议</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188562627.png" alt="1667188562627" tabindex="0" loading="lazy"><figcaption>1667188562627</figcaption></figure><ul><li>PPPoE 是为宽带上网的主机使用的链路层协议</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188573802.png" alt="1667188573802" tabindex="0" loading="lazy"><figcaption>1667188573802</figcaption></figure><h2 id="帧格式" tabindex="-1"><a class="header-anchor" href="#帧格式"><span>帧格式</span></a></h2><p>必须规定特殊的字符作为帧定界符</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188582404.png" alt="1667188582404" tabindex="0" loading="lazy"><figcaption>1667188582404</figcaption></figure><h2 id="透明传输-1" tabindex="-1"><a class="header-anchor" href="#透明传输-1"><span>透明传输</span></a></h2><p>必须保证数据传输的透明性</p><p>实现透明传输的方法</p><ul><li>面向字节的异步链路：字节填充法（插入“转义字符”）</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188591920.png" alt="1667188591920" tabindex="0" loading="lazy"><figcaption>1667188591920</figcaption></figure><ul><li>面向比特的同步链路：比特填充法（插入“比特0”）</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188604298.png" alt="1667188604298" tabindex="0" loading="lazy"><figcaption>1667188604298</figcaption></figure><h2 id="差错检测" tabindex="-1"><a class="header-anchor" href="#差错检测"><span>差错检测</span></a></h2><p>能够对接收端收到的帧进行检测，并立即丢弃有差错的帧。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188617156.png" alt="1667188617156" tabindex="0" loading="lazy"><figcaption>1667188617156</figcaption></figure><h2 id="工作状态" tabindex="-1"><a class="header-anchor" href="#工作状态"><span>工作状态</span></a></h2><ul><li>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。</li><li>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。</li><li>这些分组及其响应选择一些 PPP 参数，并进行网络层配置，NCP 给新接入的 PC 机</li><li>分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。</li><li>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188634881.png" alt="1667188634881" tabindex="0" loading="lazy"><figcaption>1667188634881</figcaption></figure><blockquote><p>可见，PPP 协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容。</p></blockquote><h1 id="_3-6、媒体接入控制-介质访问控制-——广播信道" tabindex="-1"><a class="header-anchor" href="#_3-6、媒体接入控制-介质访问控制-——广播信道"><span>3.6、媒体接入控制（介质访问控制）——广播信道</span></a></h1><p><strong>媒体接入控制（介质访问控制）使用一对多的广播通信方式</strong></p><blockquote><p><strong>Medium Access Control</strong>翻译成媒体接入控制，有些翻译成介质访问控制</p></blockquote><p><strong>局域网的数据链路层</strong></p><ul><li>局域网最主要的<strong>特点</strong>是： <ul><li>网络为一个单位所拥有；</li><li>地理范围和。站点数目均有限。</li></ul></li><li>局域网具有如下<strong>主要优点</strong>： <ul><li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li><li>提高了系统的可靠性、可用性和残存性。</li></ul></li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188647456.png" alt="1667188647456" tabindex="0" loading="lazy"><figcaption>1667188647456</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188656915.png" alt="1667188656915" tabindex="0" loading="lazy"><figcaption>1667188656915</figcaption></figure><p><strong>数据链路层的两个子层</strong></p><p>为了使数据链路层能更好地适应多种局域网标准，IEEE 802 委员会就将局域网的数据链路层拆成<strong>两个子层</strong>：</p><ol><li><strong>逻辑链路控制</strong> LLC (Logical Link Control)子层；</li><li><strong>媒体接入控制</strong> MAC (Medium Access Control)子层。</li></ol><p>与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关。 <strong>不管采用何种协议的局域网，对 LLC 子层来说都是透明的。</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188668202.png" alt="1667188668202" tabindex="0" loading="lazy"><figcaption>1667188668202</figcaption></figure><h2 id="基本概念-1" tabindex="-1"><a class="header-anchor" href="#基本概念-1"><span>基本概念</span></a></h2><p>为什么要媒体接入控制（介质访问控制）？</p><p><strong>共享信道带来的问题</strong></p><p>若多个设备在共享信道上同时发送数据，则会造成彼此干扰，导致发送失败。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188678431.png" alt="1667188678431" tabindex="0" loading="lazy"><figcaption>1667188678431</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188687492.png" alt="1667188687492" tabindex="0" loading="lazy"><figcaption>1667188687492</figcaption></figure><blockquote><p>随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的使用点对点链路和链路层交换机的交换式局域网在有线领域已完全取代了共享式局域网，但由于无线信道的广播天性，无线局域网仍然使用的是共享媒体技术</p></blockquote><h2 id="静态划分信道" tabindex="-1"><a class="header-anchor" href="#静态划分信道"><span>静态划分信道</span></a></h2><p><strong>信道复用</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188698876.png" alt="1667188698876" tabindex="0" loading="lazy"><figcaption>1667188698876</figcaption></figure><p><strong>频分复用FDM (Frequency Division Multiplexing)</strong></p><ul><li>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</li><li><strong>频分复用</strong>的所有用户在同样的时间<strong>占用不同的带宽资源</strong>（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188707766.png" alt="1667188707766" tabindex="0" loading="lazy"><figcaption>1667188707766</figcaption></figure><p><strong>时分复用TDM (Time Division Multiplexing)</strong></p><ul><li><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧（TDM帧）</strong>。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是<strong>周期性地出现</strong>（其周期就是TDM帧的长度）的。</li><li>TDM 信号也称为<strong>等时</strong> (isochronous) 信号。</li><li><strong>时分复用的所有用户在不同的时间占用同样的频带宽度。</strong></li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188716430.png" alt="1667188716430" tabindex="0" loading="lazy"><figcaption>1667188716430</figcaption></figure><p><strong>波分复用 WDM(Wavelength Division Multiplexing)</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188725782.png" alt="1667188725782" tabindex="0" loading="lazy"><figcaption>1667188725782</figcaption></figure><blockquote><p>波分复用就是光的频分复用，使用一根光纤来同时传输多个光载波信号</p><p>光信号传输一段距离后悔衰减，所以要用 掺铒光纤放大器 放大光信号</p></blockquote><p><strong>码分复用 CDM (Code Division Multiplexing)</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188739881.png" alt="1667188739881" tabindex="0" loading="lazy"><figcaption>1667188739881</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188764428.png" alt="1667188764428" tabindex="0" loading="lazy"><figcaption>1667188764428</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188796667.png" alt="1667188796667" tabindex="0" loading="lazy"><figcaption>1667188796667</figcaption></figure><h2 id="动态接入控制" tabindex="-1"><a class="header-anchor" href="#动态接入控制"><span>动态接入控制</span></a></h2><p>受控接入</p><p><strong>受控接入在局域网中使用得较少，本书不再讨论</strong></p><p><strong>随机接入</strong></p><p><strong>重点</strong></p><h2 id="随机接入-csma-cd协议" tabindex="-1"><a class="header-anchor" href="#随机接入-csma-cd协议"><span>随机接入（CSMA/CD协议）</span></a></h2><p><strong>总线局域网使用协议：CSMA/CD</strong></p><h3 id="基本概念-2" tabindex="-1"><a class="header-anchor" href="#基本概念-2"><span>基本概念</span></a></h3><p><strong>最初</strong>的<strong>以太网</strong>是将许多计算机都连接到一根总线上。易于实现广播通信。当初认为这样的连接方法既简单又可靠，因为总线上没有有源器件。</p><blockquote><p><strong>以太网（Ethernet）是一种计算机局域网技术</strong>。IEEE组织的IEEE 802.3标准制定了**以太网（Ethernet）**的技术标准</p><p>以太网采用无连接的工作方式，对发送的数据帧不进行编号，也不要求对方发回确认。目的站收到有差错帧就把它丢弃，其他什么也不做</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188811320.png" alt="1667188811320" tabindex="0" loading="lazy"><figcaption>1667188811320</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188819628.png" alt="1667188819628" tabindex="0" loading="lazy"><figcaption>1667188819628</figcaption></figure><h3 id="多址接入ma" tabindex="-1"><a class="header-anchor" href="#多址接入ma"><span>多址接入MA</span></a></h3><p>表示许多主机以多点接入的方式连接在一根总线上。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188825376.png" alt="1667188825376" tabindex="0" loading="lazy"><figcaption>1667188825376</figcaption></figure><h3 id="载波监听cs" tabindex="-1"><a class="header-anchor" href="#载波监听cs"><span>载波监听CS</span></a></h3><p>是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188831703.png" alt="1667188831703" tabindex="0" loading="lazy"><figcaption>1667188831703</figcaption></figure><p>总线上并没有什么“载波”。因此， <strong>“载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。</strong></p><h3 id="碰撞检测cd" tabindex="-1"><a class="header-anchor" href="#碰撞检测cd"><span>碰撞检测CD</span></a></h3><ul><li><strong>“碰撞检测”就是计算机边发送数据边检测</strong>信道上的信号电压大小。</li><li>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）。</li><li>当一个站检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞。</li><li><strong>所谓“碰撞”就是发生了冲突。因此“碰撞检测”也称为“冲突检测”。</strong></li><li>在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息来。</li><li><strong>每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要立即停止发送，免得继续浪费网络资源，然后等待一段随机时间后再次发送。</strong></li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188838841.png" alt="1667188838841" tabindex="0" loading="lazy"><figcaption>1667188838841</figcaption></figure><blockquote><p>为什么要进行碰撞检测？ 因为信号传播时延对载波监听产生了影响</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188846173.png" alt="1667188846173" tabindex="0" loading="lazy"><figcaption>1667188846173</figcaption></figure><p>A 需要单程传播时延的 2 倍的时间，才能检测到与 B 的发送产生了冲突</p></blockquote><h3 id="csma-cd-协议工作流程" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作流程"><span>CSMA/CD 协议工作流程</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188862464.png" alt="1667188862464" tabindex="0" loading="lazy"><figcaption>1667188862464</figcaption></figure><h3 id="csma-cd-协议工作——争用期-碰撞窗口" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作——争用期-碰撞窗口"><span>CSMA/CD 协议工作——争用期（碰撞窗口）</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188875728.png" alt="1667188875728" tabindex="0" loading="lazy"><figcaption>1667188875728</figcaption></figure><h3 id="csma-cd-协议工作——最小帧长" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作——最小帧长"><span>CSMA/CD 协议工作——最小帧长</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188890345.png" alt="1667188890345" tabindex="0" loading="lazy"><figcaption>1667188890345</figcaption></figure><h3 id="csma-cd-协议工作——最大帧长" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作——最大帧长"><span>CSMA/CD 协议工作——最大帧长</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188901046.png" alt="1667188901046" tabindex="0" loading="lazy"><figcaption>1667188901046</figcaption></figure><h3 id="csma-cd-协议工作——截断二进制指数退避算法" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作——截断二进制指数退避算法"><span>CSMA/CD 协议工作——截断二进制指数退避算法</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188908614.png" alt="1667188908614" tabindex="0" loading="lazy"><figcaption>1667188908614</figcaption></figure><h3 id="csma-cd-协议工作——信道利用率" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作——信道利用率"><span>CSMA/CD 协议工作——信道利用率</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188920322.png" alt="1667188920322" tabindex="0" loading="lazy"><figcaption>1667188920322</figcaption></figure><h3 id="csma-cd-协议工作——帧接收流程" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议工作——帧接收流程"><span>CSMA/CD 协议工作——帧接收流程</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188930465.png" alt="1667188930465" tabindex="0" loading="lazy"><figcaption>1667188930465</figcaption></figure><h3 id="csma-cd-协议的重要特性" tabindex="-1"><a class="header-anchor" href="#csma-cd-协议的重要特性"><span>CSMA/CD 协议的重要特性</span></a></h3><ul><li>使用 CSMA/CD 协议的以太网不能进行全双工通信而<strong>只能进行双向交替通信（半双工通信）。</strong></li><li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。</li><li>这种<strong>发送的不确定性</strong>使整个以太网的平均通信量远小于以太网的最高数据率。</li></ul><blockquote><p>CSMA/CD协议曾经用于各种总线结构以太网和双绞线以太网的早起版本中。</p><p><strong>现在的以太网基于交换机和全双工连接，不会有碰撞，因此没有必要使用CSMA/CS协议</strong></p></blockquote><h2 id="随机接入-csma-ca协议" tabindex="-1"><a class="header-anchor" href="#随机接入-csma-ca协议"><span>随机接入（CSMA/CA协议）</span></a></h2><p><strong>无线局域网使用的协议：CSMA/CA</strong></p><h3 id="为什么无线局域网要使用csma-ca协议" tabindex="-1"><a class="header-anchor" href="#为什么无线局域网要使用csma-ca协议"><span>为什么无线局域网要使用CSMA/CA协议</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188972959.png" alt="1667188972959" tabindex="0" loading="lazy"><figcaption>1667188972959</figcaption></figure><h3 id="帧间间隔ifs-interframe-space" tabindex="-1"><a class="header-anchor" href="#帧间间隔ifs-interframe-space"><span>帧间间隔IFS（InterFrame Space）</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188983309.png" alt="1667188983309" tabindex="0" loading="lazy"><figcaption>1667188983309</figcaption></figure><h3 id="csma-ca协议的工作原理" tabindex="-1"><a class="header-anchor" href="#csma-ca协议的工作原理"><span>CSMA/CA协议的工作原理</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188990398.png" alt="1667188990398" tabindex="0" loading="lazy"><figcaption>1667188990398</figcaption></figure><blockquote><p><strong>源站为什么在检测到信道空闲后还要再等待一段时间DIFS？</strong></p><ul><li>考虑到可能有其他的站有高优先级的帧要发送。若有，就要让高优先级帧先发送</li></ul><p><strong>目的站为什么正确接收数据帧后还要等待一段时间SIFS才能发送ACK帧？</strong></p><ul><li>SIFS是最短的帧间间隔，用来分隔开属于一次对话的各帧，在这段时间内，一个站点应当能够从发送方式切换到接收方式</li></ul></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189004680.png" alt="1667189004680" tabindex="0" loading="lazy"><figcaption>1667189004680</figcaption></figure><blockquote><p><strong>信道由忙转为空闲且经过DIFS时间后，还要退避一段随机时间才能使用信道？</strong></p><p>防止多个站点同时发送数据而产生碰撞</p></blockquote><p><strong>使用退避算法的时机</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189013273.png" alt="1667189013273" tabindex="0" loading="lazy"><figcaption>1667189013273</figcaption></figure><h3 id="csma-ca协议的退避算法" tabindex="-1"><a class="header-anchor" href="#csma-ca协议的退避算法"><span>CSMA/CA协议的退避算法</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189020406.png" alt="1667189020406" tabindex="0" loading="lazy"><figcaption>1667189020406</figcaption></figure><p><strong>退避算法的示例</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189028048.png" alt="1667189028048" tabindex="0" loading="lazy"><figcaption>1667189028048</figcaption></figure><h3 id="csma-ca协议的信道预约和虚拟载波监听" tabindex="-1"><a class="header-anchor" href="#csma-ca协议的信道预约和虚拟载波监听"><span>CSMA/CA协议的信道预约和虚拟载波监听</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189052639.png" alt="1667189052639" tabindex="0" loading="lazy"><figcaption>1667189052639</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189062387.png" alt="1667189062387" tabindex="0" loading="lazy"><figcaption>1667189062387</figcaption></figure><p><strong>虚拟载波监听机制能减少隐蔽站带来的碰撞问题的示例</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189079658.png" alt="1667189079658" tabindex="0" loading="lazy"><figcaption>1667189079658</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189100045.png" alt="1667189100045" tabindex="0" loading="lazy"><figcaption>1667189100045</figcaption></figure><h1 id="_3-7、mac地址、ip地址以及arp协议" tabindex="-1"><a class="header-anchor" href="#_3-7、mac地址、ip地址以及arp协议"><span>3.7、MAC地址、IP地址以及ARP协议</span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189113049.png" alt="1667189113049" tabindex="0" loading="lazy"><figcaption>1667189113049</figcaption></figure><h2 id="mac地址" tabindex="-1"><a class="header-anchor" href="#mac地址"><span>MAC地址</span></a></h2><blockquote><ul><li>使用点对点信道的数据链路层不需要使用地址</li><li>使用广播信道的数据链路层必须使用地址来区分各主机</li></ul></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189120509.png" alt="1667189120509" tabindex="0" loading="lazy"><figcaption>1667189120509</figcaption></figure><h3 id="广播信道的数据链路层必须使用地址-mac" tabindex="-1"><a class="header-anchor" href="#广播信道的数据链路层必须使用地址-mac"><span>广播信道的数据链路层必须使用地址（MAC）</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189168915.png" alt="1667189168915" tabindex="0" loading="lazy"><figcaption>1667189168915</figcaption></figure><blockquote><p><strong>MAC地址又称为硬件地址或物理地址</strong>。请注意：不要被 “物理” 二字误导认为物理地址属于物理层范畴，物理地址属于数据链路层范畴</p></blockquote><h3 id="ieee-802局域网的mac地址格式" tabindex="-1"><a class="header-anchor" href="#ieee-802局域网的mac地址格式"><span>IEEE 802局域网的MAC地址格式</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189182172.png" alt="1667189182172" tabindex="0" loading="lazy"><figcaption>1667189182172</figcaption></figure><blockquote><p><strong>组织唯一标识符OUI</strong></p><ul><li>生产网络设备的厂商，需要向IEEE的注册管理机构申请一个或多个OUI</li></ul><p><strong>网络接口标识符</strong></p><ul><li>由获得OUI的厂商自行随意分配</li></ul><p><strong>EUI-48</strong></p><ul><li>48是这个MAC地址的位数</li></ul></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189198611.png" alt="1667189198611" tabindex="0" loading="lazy"><figcaption>1667189198611</figcaption></figure><blockquote><p>对于使用EUI-48空间的应用程序，IEEE的目标寿命为100年（直到2080年），但是鼓励采用EUI-64作为替代</p></blockquote><p><strong>关于无效的 MAC 帧</strong></p><ul><li>数据字段的长度与长度字段的值不一致；</li><li>帧的长度不是整数个字节；</li><li>用收到的帧检验序列 FCS 查出有差错；</li><li>数据字段的长度不在 46 ~ 1500 字节之间。</li><li>有效的 MAC 帧长度为 64 ~ 1518 字节之间。</li></ul><blockquote><p><strong>对于检查出的无效</strong> <strong>MAC</strong> <strong>帧就简单地丢弃。以太网不负责重传丢弃的帧。</strong></p></blockquote><h3 id="ieee-802局域网的mac地址发送顺序" tabindex="-1"><a class="header-anchor" href="#ieee-802局域网的mac地址发送顺序"><span>IEEE 802局域网的MAC地址发送顺序</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189212571.png" alt="1667189212571" tabindex="0" loading="lazy"><figcaption>1667189212571</figcaption></figure><h3 id="单播mac地址举例" tabindex="-1"><a class="header-anchor" href="#单播mac地址举例"><span>单播MAC地址举例</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189221320.png" alt="1667189221320" tabindex="0" loading="lazy"><figcaption>1667189221320</figcaption></figure><blockquote><p>主机B给主机C发送<strong>单播帧</strong>，主机B首先要构建该<strong>单播帧</strong>，<strong>在帧首部中的目的地址字段填入主机C的MAC地址</strong>，源地址字段填入自己的MAC地址，再加上帧首部的其他字段、数据载荷以及帧尾部，就构成了该<strong>单播帧</strong></p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189231141.png" alt="1667189231141" tabindex="0" loading="lazy"><figcaption>1667189231141</figcaption></figure><blockquote><p>主机B将该<strong>单播帧</strong>发送出去，主机A和C都会收到该<strong>单播帧</strong></p><p>主机A的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址不匹配，丢弃该帧</p><p>主机C的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址匹配，接受该帧</p><p>并将该帧交给其上层处理</p></blockquote><h3 id="广播mac地址举例" tabindex="-1"><a class="header-anchor" href="#广播mac地址举例"><span>广播MAC地址举例</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189239477.png" alt="1667189239477" tabindex="0" loading="lazy"><figcaption>1667189239477</figcaption></figure><blockquote><p>假设主机B要发送一个<strong>广播帧</strong>，主机B首先要构建该<strong>广播帧</strong>，<strong>在帧首部中的目的地址字段填入广播地址</strong>，也就是十六进制的全F，源地址字段填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>广播帧</strong></p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189249602.png" alt="1667189249602" tabindex="0" loading="lazy"><figcaption>1667189249602</figcaption></figure><blockquote><p>主机B讲该<strong>广播帧</strong>发送出去，主机A和C都会收到该<strong>广播帧</strong>，<strong>发现该帧首部中的目的地址字段的内容是广播地址</strong>，就知道该帧是<strong>广播帧</strong>，主机A和主机C都接受该帧，并将该帧交给上层处理</p></blockquote><h3 id="多播mac地址举例" tabindex="-1"><a class="header-anchor" href="#多播mac地址举例"><span>多播MAC地址举例</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189262040.png" alt="1667189262040" tabindex="0" loading="lazy"><figcaption>1667189262040</figcaption></figure><blockquote><p>假设主机A要发送<strong>多播帧</strong>给该<strong>多播地址</strong>。将该<strong>多播地址</strong>的左起第一个字节写成8个比特，第一个字节的最低比特位是1，这就表明该地址是<strong>多播地址</strong>。</p><p>快速判断地址是不是<strong>多播地址</strong>，就是上图所示箭头所指的第十六进制数不能整除2（1,3,5,7,9,B,D,F），则该地址是<strong>多播地址</strong></p><p>假设主机B，C和D支持多播，各用户给自己的主机配置多播组列表<strong>如下所示</strong></p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189279286.png" alt="1667189279286" tabindex="0" loading="lazy"><figcaption>1667189279286</figcaption></figure><blockquote><p>主机B属于两个多播组，主机C也属于两个多播组，而主机D不属于任何多播组</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189288959.png" alt="1667189288959" tabindex="0" loading="lazy"><figcaption>1667189288959</figcaption></figure><blockquote><p>主机A首先要构建该<strong>多播帧</strong>，<strong>在帧首部中的目的地址字段填入该多播地址</strong>，源地址点填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>多播帧</strong></p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189304163.png" alt="1667189304163" tabindex="0" loading="lazy"><figcaption>1667189304163</figcaption></figure><blockquote><p>主机A将该<strong>多播帧</strong>发送出去，主机B、C、D都会收到该<strong>多播帧</strong></p><p><strong>主机B和C发现该多播帧的目的MAC地址在自己的多播组列表中</strong>，主机B和C都会接受该帧</p><p>主机D发现该<strong>多播帧</strong>的目的MAC地址不在自己得多播组列表中，则丢弃该<strong>多播帧</strong></p></blockquote><blockquote><p>给主机配置多播组列表进行私有应用时，不得使用公有的标准多播地址</p></blockquote><h2 id="ip地址" tabindex="-1"><a class="header-anchor" href="#ip地址"><span>IP地址</span></a></h2><p>IP地址属于网络层的范畴，不属于数据链路层的范畴</p><p>下面内容讲的是IP地址的使用，详细的IP地址内容在网络层中介绍</p><h3 id="基本概念-3" tabindex="-1"><a class="header-anchor" href="#基本概念-3"><span>基本概念</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189315176.png" alt="1667189315176" tabindex="0" loading="lazy"><figcaption>1667189315176</figcaption></figure><h3 id="从网络体系结构看ip地址与mac地址" tabindex="-1"><a class="header-anchor" href="#从网络体系结构看ip地址与mac地址"><span>从网络体系结构看IP地址与MAC地址</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189322840.png" alt="1667189322840" tabindex="0" loading="lazy"><figcaption>1667189322840</figcaption></figure><h3 id="数据包转发过程中ip地址与mac地址的变化情况" tabindex="-1"><a class="header-anchor" href="#数据包转发过程中ip地址与mac地址的变化情况"><span>数据包转发过程中IP地址与MAC地址的变化情况</span></a></h3><p>图上各主机和路由器各接口的IP地址和MAC地址用简单的标识符来表示</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189338360.png" alt="image-20201015105455043" tabindex="0" loading="lazy"><figcaption>image-20201015105455043</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189350338.png" alt="1667189350338" tabindex="0" loading="lazy"><figcaption>1667189350338</figcaption></figure><blockquote><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP协议</p></blockquote><h2 id="arp协议" tabindex="-1"><a class="header-anchor" href="#arp协议"><span>ARP协议</span></a></h2><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP（地址解析协议）</p><h3 id="流程" tabindex="-1"><a class="header-anchor" href="#流程"><span>流程</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189359734.png" alt="1667189359734" tabindex="0" loading="lazy"><figcaption>1667189359734</figcaption></figure><p>ARP高速缓存表</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189367425.png" alt="1667189367425" tabindex="0" loading="lazy"><figcaption>1667189367425</figcaption></figure><blockquote><p>当主机B要给主机C发送数据包时，会首先在自己的ARP高速缓存表中查找主机C的IP地址所对应的MAC地址，但未找到，因此，主机B需要发送ARP请求报文，来获取主机C的MAC地址</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189375649.png" alt="1667189375649" tabindex="0" loading="lazy"><figcaption>1667189375649</figcaption></figure><blockquote><p>ARP请求报文有具体的格式，上图的只是简单描述</p><p>ARP请求报文被封装在MAC帧中发送，目的地址为广播地址</p><p>主机B发送封装有ARP请求报文的广播帧，总线上的其他主机都能收到该广播帧</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189384570.png" alt="1667189384570" tabindex="0" loading="lazy"><figcaption>1667189384570</figcaption></figure><blockquote><p>收到ARP请求报文的主机A和主机C会把ARP请求报文交给上层的ARP进程</p><p>主机A发现所询问的IP地址不是自己的IP地址，因此不用理会</p><p>主机C的发现所询问的IP地址是自己的IP地址，需要进行相应</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189395809.png" alt="1667189395809" tabindex="0" loading="lazy"><figcaption>1667189395809</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189454264.png" alt="1667189454264" tabindex="0" loading="lazy"><figcaption>1667189454264</figcaption></figure><p>动态与静态的区别</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189465116.png" alt="1667189465116" tabindex="0" loading="lazy"><figcaption>1667189465116</figcaption></figure><p><strong>ARP协议只能在一段链路或一个网络上使用，而不能跨网络使用</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189476955.png" alt="1667189476955" tabindex="0" loading="lazy"><figcaption>1667189476955</figcaption></figure><blockquote><p>ARP协议的使用是逐段链路进行的</p></blockquote><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189488569.png" alt="1667189488569" tabindex="0" loading="lazy"><figcaption>1667189488569</figcaption></figure><blockquote><p>ARP表中的IP地址与MAC地址的对应关系记录，是<strong>会定期自动删除的</strong>，<strong>因为IP地址与MAC地址的对应关系不是永久性的</strong></p></blockquote><h1 id="_3-8、集线器与交换机的区别" tabindex="-1"><a class="header-anchor" href="#_3-8、集线器与交换机的区别"><span>3.8、集线器与交换机的区别</span></a></h1><h2 id="集线器-在物理层扩展以太网" tabindex="-1"><a class="header-anchor" href="#集线器-在物理层扩展以太网"><span>集线器-在物理层扩展以太网</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189501150.png" alt="1667189501150" tabindex="0" loading="lazy"><figcaption>1667189501150</figcaption></figure><blockquote><ul><li>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线。</li><li>采用双绞线的以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做<strong>集线器</strong> (hub)。</li><li><strong>集线器</strong>是也可以看做多口中继器，每个端口都可以成为一个中继器，中继器是对减弱的信号进行放大和发送的设备</li><li><strong>集线器</strong>的以太网在逻辑上仍是个总线网，需要使用CSMA/CD协议来协调各主机争用总线，只能工作在半双工模式，收发帧不能同时进行</li></ul></blockquote><h3 id="集线器hub在物理层扩展以太网" tabindex="-1"><a class="header-anchor" href="#集线器hub在物理层扩展以太网"><span>集线器HUB在物理层扩展以太网</span></a></h3><p><strong>使用集线器扩展</strong>：将多个以太网段连成更大的、多级星形结构的以太网</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189508844.png" alt="1667189508844" tabindex="0" loading="lazy"><figcaption>1667189508844</figcaption></figure><blockquote><ul><li><strong>优点</strong><ol><li>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信。</li><li>扩大了以太网覆盖的地理范围。</li></ol></li><li><strong>缺点</strong><ol><li>碰撞域增大了，但总的吞吐量并未提高。</li><li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。</li></ol></li></ul></blockquote><p><strong>碰撞域</strong></p><ul><li><strong>碰撞域（collision domain）又称为冲突域</strong>，是指网络中一个站点发出的帧会与其他站点发出的帧产生碰撞或冲突的那部分网络。</li><li>碰撞域越大，发生碰撞的概率越高。</li></ul><h2 id="以太网交换机-在数据链路层扩展以太网" tabindex="-1"><a class="header-anchor" href="#以太网交换机-在数据链路层扩展以太网"><span>以太网交换机-在数据链路层扩展以太网</span></a></h2><h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1"><span>概念</span></a></h3><ul><li>扩展以太网更常用的方法是在数据链路层进行。</li><li>早期使用<strong>网桥</strong>，现在使用<strong>以太网交换机</strong>。</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189514827.png" alt="1667189514827" tabindex="0" loading="lazy"><figcaption>1667189514827</figcaption></figure><blockquote><p><strong>网桥</strong></p><ul><li>网桥工作在数据链路层。</li><li>它根据 MAC 帧的目的地址对收到的帧进行转发和过滤。</li><li>当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的MAC 地址，然后再确定将该帧转发到哪一个接口，或把它丢弃。</li></ul><p><strong>交换机</strong></p><ul><li>1990 年问世的交换式集线器 (switching hub) 可明显地提高以太网的性能。</li><li>交换式集线器常称为<strong>以太网交换机</strong> (switch) 或<strong>第二层交换机</strong> (L2 switch)，强调这种交换机工作在数据链路层。</li><li>以太网交换机实质上就是一个<strong>多接口的网桥</strong></li></ul></blockquote><h3 id="集线器hub与交换机switch区别" tabindex="-1"><a class="header-anchor" href="#集线器hub与交换机switch区别"><span>集线器HUB与交换机SWITCH区别</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189521101.png" alt="1667189521101" tabindex="0" loading="lazy"><figcaption>1667189521101</figcaption></figure><blockquote><p>使用<strong>集线器</strong>互连而成的共享总线式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧会通过共享总线传输到<strong>总线上的其他各个主机</strong></p><p>使用交换机互连而成的交换式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧进入交换机后，交换机会将该单播帧转发给目的主机，<strong>而不是网络中的其他各个主机</strong></p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189530434.png" alt="1667189530434" tabindex="0" loading="lazy"><figcaption>1667189530434</figcaption></figure><blockquote><p><strong>以太网交换机的交换方式</strong></p><ul><li>存储转发方式 <ul><li>把整个数据帧<strong>先缓存</strong>后再进行处理。</li></ul></li><li>直通 (cut-through) 方式 <ul><li>接收数据帧的同时就<strong>立即按数据帧的目的 MAC 地址决定该帧的转发接口</strong>，因而提高了帧的转发速度。</li><li><strong>缺点</strong>是它不检查差错就直接将帧转发出去，因此有可能也将一些无效帧转发给其他的站。</li></ul></li></ul><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>对比集线器和交换机</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189541998.png" alt="1667189541998" tabindex="0" loading="lazy"><figcaption>1667189541998</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189573439.png" alt="1667189573439" tabindex="0" loading="lazy"><figcaption>1667189573439</figcaption></figure><blockquote><p>多台主机同时给另一台主机发送单播帧</p><p>集线器以太网：会产生碰撞，遭遇碰撞的帧会传播到总线上的各主机</p><p>交换机以太网：会将它们缓存起来，然后逐个转发给目的主机，不会产生碰撞</p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>集线器扩展以太网和交换机扩展以太网区别</strong></p><p><strong>单播</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189591351.png" alt="1667189591351" tabindex="0" loading="lazy"><figcaption>1667189591351</figcaption></figure><p><strong>广播</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189599939.png" alt="1667189599939" tabindex="0" loading="lazy"><figcaption>1667189599939</figcaption></figure><p><strong>多个单播</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189610114.png" alt="1667189610114" tabindex="0" loading="lazy"><figcaption>1667189610114</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189616737.png" alt="1667189616737" tabindex="0" loading="lazy"><figcaption>1667189616737</figcaption></figure><p>广播域（broadcast domain）：指这样一部分网络，其中任何一台设备发出的广播通信都能被该部分网络中的所有其他设备所接收。</p><h2 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189629310.png" alt="1667189629310" tabindex="0" loading="lazy"><figcaption>1667189629310</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189645196.png" alt="1667189645196" tabindex="0" loading="lazy"><figcaption>1667189645196</figcaption></figure><blockquote><p>工作在数据链路层的以太网交换机，其性能远远超过工作在物理层的集线器，而且价格并不贵，这就使得集线器逐渐被市场淘汰</p></blockquote><h1 id="_3-9、以太网交换机自学习和转发帧的流程" tabindex="-1"><a class="header-anchor" href="#_3-9、以太网交换机自学习和转发帧的流程"><span>3.9、以太网交换机自学习和转发帧的流程</span></a></h1><h2 id="自学习和转发帧的例子" tabindex="-1"><a class="header-anchor" href="#自学习和转发帧的例子"><span>自学习和转发帧的例子</span></a></h2><p>以下例子假设各主机知道网络中其他各主机的MAC地址（无需进行ARP）</p><p><strong>A -&gt; B</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189654987.png" alt="1667189654987" tabindex="0" loading="lazy"><figcaption>1667189654987</figcaption></figure><blockquote><ol><li>A 先向 B 发送一帧。该帧从接口 1 进入到交换机</li><li>交换机收到帧后，先查找（图中左边）交换表。没有查到应从哪个接口转发这个帧给 B</li><li>交换机把这个帧的源地址 A 和接口 1 写入（图中左边）交换表中</li><li>交换机向除接口 1 以外的所有的接口广播这个帧</li><li>接口 4到接口 2，先查找（图中右边）交换表。没有查到应从哪个接口转发这个帧给 B</li><li>交换机把这个帧的源地址 A 和接口 1 写入（图中右边）交换表中</li><li>除B主机之外与该帧的目的地址不相符，将丢弃该帧</li><li>主机B发现是给自己的帧，接受该帧</li></ol></blockquote><p><strong>B -&gt; A</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189664283.png" alt="1667189664283" tabindex="0" loading="lazy"><figcaption>1667189664283</figcaption></figure><blockquote><ol><li>B 向 A 发送一帧。该帧从接口 3 进入到交换机</li><li>交换机收到帧后，先查找（图中左边）交换表。发现（图中左边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</li><li>主机 A 发现目的地址是它，就接受该帧</li><li>交换机把这个帧的源地址 B 和接口 3 写入（图中左边）交换表中</li></ol></blockquote><p><strong>E -&gt; A</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189672338.png" alt="1667189672338" tabindex="0" loading="lazy"><figcaption>1667189672338</figcaption></figure><blockquote><ol><li>E 向 A发送一帧</li><li>交换机收到帧后，先查找（图中右边）交换表。发现（图中右边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口2转发出去。于是就把这个帧传送到接口 2 转发给 接口 4。</li><li>交换机把这个帧的源地址 E 和接口 3 写入（图中右边）交换表中</li><li>接口 4 到 左边的交换机，先查找（图中左边）交换表。发现（图中左边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</li><li>交换机把这个帧的源地址 E 和接口 4 写入（图中左边）交换表中</li><li>主机 A 发现目的地址是它，就接受该帧</li></ol></blockquote><p><strong>G -&gt; A</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189680567.png" alt="1667189680567" tabindex="0" loading="lazy"><figcaption>1667189680567</figcaption></figure><blockquote><p>主机 A、主机 G、交换机 1的接口 1就共享同一条总线（相当于总线式网络，可以想象成用集线器连接了）</p><ol><li>主机 G 发送给 主机 A 一个帧</li><li>主机 A 和 交换机接口 1都能接收到</li><li>主机 A 的网卡收到后，根据帧的目的MAC地址A，就知道是发送给自己的帧，就接受该帧</li><li>交换机 1收到该帧后，首先进行登记工作</li><li>然后交换机 1对该帧进行转发，该帧的MAC地址是A，在（图中左边）交换表查找MAC 地址有 A</li><li>MAC 地址为 A的接口号是1，但是该帧正是从接口 1 进入交换机的，交换机不会再从该接口 1 讲帧转发出去，因为这是没有必要，于是丢弃该帧</li></ol></blockquote><p>随着网络中各主机都发送了帧后，网络中的各交换机就可以学习到各主机的MAC地址，以及它们与自己各接口的对应关系</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189691073.png" alt="1667189691073" tabindex="0" loading="lazy"><figcaption>1667189691073</figcaption></figure><blockquote><p>考虑到可能有时要在交换机的接口更换主机，或者主机要更换其网络适配器，这就需要更改交换表中的项目。为此，在交换表中每个项目都设有一定的<strong>有效时间</strong>。<strong>过期的项目就自动被删除</strong>。</p><p><strong>以太网交换机的这种自学习方法使得以太网交换机能够即插即用，不必人工进行配置，因此非常方便。</strong></p></blockquote><h2 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3"><span>总结</span></a></h2><p><strong>交换机自学习和转发帧的步骤归纳</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189702919.png" alt="1667189702919" tabindex="0" loading="lazy"><figcaption>1667189702919</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189717565.png" alt="1667189717565" tabindex="0" loading="lazy"><figcaption>1667189717565</figcaption></figure><h1 id="_3-10、以太网交换机的生成树协议stp" tabindex="-1"><a class="header-anchor" href="#_3-10、以太网交换机的生成树协议stp"><span>3.10、以太网交换机的生成树协议STP</span></a></h1><h2 id="如何提高以太网的可靠性" tabindex="-1"><a class="header-anchor" href="#如何提高以太网的可靠性"><span>如何提高以太网的可靠性</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189738993.png" alt="1667189738993" tabindex="0" loading="lazy"><figcaption>1667189738993</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189748697.png" alt="1667189748697" tabindex="0" loading="lazy"><figcaption>1667189748697</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189755970.png" alt="1667189755970" tabindex="0" loading="lazy"><figcaption>1667189755970</figcaption></figure><h2 id="生成树协议stp" tabindex="-1"><a class="header-anchor" href="#生成树协议stp"><span>生成树协议STP</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189764624.png" alt="1667189764624" tabindex="0" loading="lazy"><figcaption>1667189764624</figcaption></figure><blockquote><ul><li>IEEE 802.1D 标准制定了一个<strong>生成树协议 STP</strong> (Spanning Tree Protocol)。</li><li>其<strong>要点</strong>是：<strong>不改变</strong>网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是<strong>无环路的树状结构</strong>，从而消除了兜圈子现象。</li></ul></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189771362.png" alt="1667189771362" tabindex="0" loading="lazy"><figcaption>1667189771362</figcaption></figure><h1 id="_3-11、虚拟局域网vlan" tabindex="-1"><a class="header-anchor" href="#_3-11、虚拟局域网vlan"><span>3.11、虚拟局域网VLAN</span></a></h1><h2 id="为什么要虚拟局域网vlan" tabindex="-1"><a class="header-anchor" href="#为什么要虚拟局域网vlan"><span>为什么要虚拟局域网VLAN</span></a></h2><p><strong>广播风暴</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189789438.png" alt="1667189789438" tabindex="0" loading="lazy"><figcaption>1667189789438</figcaption></figure><p><strong>分割广播域的方法</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189797625.png" alt="1667189797625" tabindex="0" loading="lazy"><figcaption>1667189797625</figcaption></figure><blockquote><p>为了分割广播域，所以虚拟局域网VLAN技术应运而生</p></blockquote><h2 id="概念-2" tabindex="-1"><a class="header-anchor" href="#概念-2"><span>概念</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189807699.png" alt="1667189807699" tabindex="0" loading="lazy"><figcaption>1667189807699</figcaption></figure><blockquote><ul><li><p>利用以太网交换机可以很方便地实现虚拟局域网 VLAN (Virtual LAN)。</p></li><li><p>IEEE 802.1Q 对虚拟局域网 VLAN 的<strong>定义</strong>： <strong>虚拟局域网 VLAN</strong> 是由一些局域网网段构成的<strong>与物理位置无关的逻辑组</strong>，而这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个 VLAN。</p></li><li><p>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</p></li><li><p><strong>虚拟局域网其实只是局域网给用户提供的一种服务，而并不是一种新型局域网。</strong></p></li><li><p>由于虚拟局域网是用户和网络资源的逻辑组合，因此可按照需要将有关设备和资源非常方便地重新组合，使用户从不同的服务器或数据库中存取所需的资源。</p></li><li><h5 id="虚拟局域网vlan并不是一种新型网络-他只是局域网能够提供给用户的一种服务" tabindex="-1"><a class="header-anchor" href="#虚拟局域网vlan并不是一种新型网络-他只是局域网能够提供给用户的一种服务"><span>虚拟局域网VLAN并不是一种新型网络，他只是局域网能够提供给用户的一种服务</span></a></h5></li></ul></blockquote><h2 id="虚拟局域网vlan的实现机制" tabindex="-1"><a class="header-anchor" href="#虚拟局域网vlan的实现机制"><span>虚拟局域网VLAN的实现机制</span></a></h2><p>虚拟局域网VLAN技术是在交换机上实现的，需要交换机能够实现以下功能</p><ul><li>能够处理带有VLAN标记的帧——IEEE 802.1 Q帧</li><li>交换机的各端口可以支持不同的端口类型，不同端口类型的端口对帧的处理方式有所不同</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189825122.png" alt="1667189825122" tabindex="0" loading="lazy"><figcaption>1667189825122</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189838407.png" alt="1667189838407" tabindex="0" loading="lazy"><figcaption>1667189838407</figcaption></figure><p><strong>Access端口</strong></p><p>交换机与用户计算机之间的互连</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189853348.png" alt="1667189853348" tabindex="0" loading="lazy"><figcaption>1667189853348</figcaption></figure><blockquote><p>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</p></blockquote><p><strong>Truck端口</strong></p><p>交换机之间或交换机与路由器之间的互连</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189866850.png" alt="1667189866850" tabindex="0" loading="lazy"><figcaption>1667189866850</figcaption></figure><p><strong>小例题</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189876752.png" alt="1667189876752" tabindex="0" loading="lazy"><figcaption>1667189876752</figcaption></figure><p><strong>华为交换机私有的Hybrid端口类型</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189890543.png" alt="1667189890543" tabindex="0" loading="lazy"><figcaption>1667189890543</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189897398.png" alt="1667189897398" tabindex="0" loading="lazy"><figcaption>1667189897398</figcaption></figure><h2 id="总结-4" tabindex="-1"><a class="header-anchor" href="#总结-4"><span>总结</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667177509564.png" alt="1667177509564" tabindex="0" loading="lazy"><figcaption>1667177509564</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667177616124.png" alt="1667177616124" tabindex="0" loading="lazy"><figcaption>1667177616124</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667177644767.png" alt="1667177644767" tabindex="0" loading="lazy"><figcaption>1667177644767</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667177674778.png" alt="1667177674778" tabindex="0" loading="lazy"><figcaption>1667177674778</figcaption></figure><blockquote><p><strong>虚拟局域网优点</strong></p><p>虚拟局域网（VLAN）技术具有以下主要优点：</p><ol><li><p>改善了性能</p></li><li><p>简化了管理</p></li><li><p>降低了成本</p></li><li><p>改善了安全性</p></li></ol></blockquote><h1 id="以太网的发展" tabindex="-1"><a class="header-anchor" href="#以太网的发展"><span><strong>以太网的发展</strong></span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180040280.png" alt="1667180040280" tabindex="0" loading="lazy"><figcaption>1667180040280</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180018563.png" alt="1667180018563" tabindex="0" loading="lazy"><figcaption>1667180018563</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180065115.png" alt="1667180065115" tabindex="0" loading="lazy"><figcaption>1667180065115</figcaption></figure><p><strong>吉比特以太网</strong></p><p><strong>当千兆以太网工作在半双工方式时，需要使用CSMA/CD协议。由于速率已经提高到了1000Mb/s，因此只有减小网段最大长度或增大最小帧长，才能使3.4.2节中介绍的以太网的参数a（τ∕T_0 ）保持为较小的数值</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180201150.png" alt="1667180201150" tabindex="0" loading="lazy"><figcaption>1667180201150</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180421835.png" alt="1667180421835" tabindex="0" loading="lazy"><figcaption>1667180421835</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180459805.png" alt="1667180459805" tabindex="0" loading="lazy"><figcaption>1667180459805</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180484234.png" alt="1667180484234" tabindex="0" loading="lazy"><figcaption>1667180484234</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180497289.png" alt="1667180497289" tabindex="0" loading="lazy"><figcaption>1667180497289</figcaption></figure><h1 id="无线局域网" tabindex="-1"><a class="header-anchor" href="#无线局域网"><span><strong>无线局域网</strong></span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667182555780.png" alt="1667182555780" tabindex="0" loading="lazy"><figcaption>1667182555780</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667182605776.png" alt="1667182605776" tabindex="0" loading="lazy"><figcaption>1667182605776</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667182649623.png" alt="1667182649623" tabindex="0" loading="lazy"><figcaption>1667182649623</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667182670331.png" alt="1667182670331" tabindex="0" loading="lazy"><figcaption>1667182670331</figcaption></figure><p><strong>802.11无线局域网的adhoc模式允许网络中的各站点在其通信范围内直接通信，也就是支持站点间的单跳通信，而标准中并没有包括多跳路由功能。因此，802.11无线局域网的adhoc模式应用较少</strong></p><h3 id="无线局域网的物理层" tabindex="-1"><a class="header-anchor" href="#无线局域网的物理层"><span><strong>无线局域网的物理层</strong></span></a></h3><h4 id="" tabindex="-1"><a class="header-anchor" href="#"><span><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667183097483.png" alt="1667183097483" loading="lazy"></span></a></h4><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667183140091.png" alt="1667183140091" tabindex="0" loading="lazy"><figcaption>1667183140091</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667183154688.png" alt="1667183154688" tabindex="0" loading="lazy"><figcaption>1667183154688</figcaption></figure><p><strong>802.11无线局域网的MAC帧</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667185166188.png" alt="1667185166188" tabindex="0" loading="lazy"><figcaption>1667185166188</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667190530501.png" alt="1667190530501" tabindex="0" loading="lazy"><figcaption>1667190530501</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667190512830.png" alt="1667190512830" tabindex="0" loading="lazy"><figcaption>1667190512830</figcaption></figure><h1 id="_4-1、网络层概述" tabindex="-1"><a class="header-anchor" href="#_4-1、网络层概述"><span>4.1、网络层概述</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><ul><li>网络层的主要任务<strong>是将分组从源主机经过多个网络和多段链路传输到主机，可以将该任务划分为分组转发和路由选择两种重要的功能。</strong></li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-afcf88ff0d16dc80.png?imageMogr2/auto-orient/strip|imageView2/2/w/1190/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>这些异构型网络N1~N7如果只是需要各自内部通信，他们只要实现各自的物理层和数据链路层即可</p><p>但是如果要将这些异构型网络互连起来，形成一个更大的互联网，就需要实现网络层设备路由器</p><p>有时为了简单起见，可以不用画出这些网络，图中N1~N7，而将他们看做是一条链路即可</p></blockquote><ul><li><p>要实现网络层任务，需要解决一下主要问题：</p><ul><li>网络层向运输层提供怎样的服务（“可靠传输”还是“不可靠传输”）</li></ul><p>在数据链路层那课讲过的可靠传输，详情可以看那边的笔记：网络层对以下的<strong>分组丢失</strong>、<strong>分组失序</strong>、<strong>分组重复</strong>的传输错误采取措施，使得接收方能正确接受发送方发送的数据，就是<strong>可靠传输</strong>，反之，如果什么措施也不采取，则是<strong>不可靠传输</strong></p><ul><li>网络层寻址问题</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-5993e7f74bf3a7ff.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>路由选择问题</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-8db9ef0ef83c53ba.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>路由器收到数据后，是依据什么来决定将数据包从自己的哪个接口转发出去？</p><p><strong>依据数据包的目的地址和路由器中的路由表</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-14fffa90e5256d53.png?imageMogr2/auto-orient/strip|imageView2/2/w/438/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但在实际当中，路由器是怎样知道这些路由记录？</p><ul><li><p>由用户或网络管理员进行人工配置，这种方法只适用于规模较小且网络拓扑不改变的小型互联网</p></li><li><p><strong>另一种是实现各种路由选择协议，由路由器执行路由选择协议中所规定的路由选择算法，而自动得出路由表中的路有记录，这种方法更适合规模较大且网络拓扑经常改变的大型互联网</strong></p></li></ul></blockquote></li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-87fc7ad0cc9ba272.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>补充 <strong>网络层（网际层）<strong>除了 <strong>IP协议</strong>外，还有之前介绍过的</strong>地址解析协议ARP</strong>，还有<strong>网际控制报文协议ICMP</strong>，<strong>网际组管理协议IGMP</strong></p></blockquote><h2 id="总结-5" tabindex="-1"><a class="header-anchor" href="#总结-5"><span>总结</span></a></h2><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-a692d0cb739f39ea.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span></span></a></h1><hr><h1 id="_4-2、网络层提供的两种服务" tabindex="-1"><a class="header-anchor" href="#_4-2、网络层提供的两种服务"><span>4.2、网络层提供的两种服务</span></a></h1><ul><li>在计算机网络领域，网络层应该向运输层提供怎样的服务（“<strong>面向连接</strong>”还是“<strong>无连接</strong>”）曾引起了长期的争论。</li><li>争论焦点的实质就是：<strong>在计算机通信中，可靠交付应当由谁来负责</strong>？是<strong>网络</strong>还是<strong>端系统</strong>？</li></ul><h2 id="面向连接的虚电路服务" tabindex="-1"><a class="header-anchor" href="#面向连接的虚电路服务"><span>面向连接的虚电路服务</span></a></h2><p><strong>一种观点：让网络负责可靠交付</strong></p><ul><li>这种观点认为，应借助于电信网的成功经验，让网络负责可靠交付，计算机网络应模仿电信网络，使用<strong>面向连接</strong>的通信方式。</li><li>通信之前先建立<strong>虚电路</strong> (Virtual Circuit)，以保证双方通信所需的一切网络资源。</li><li>如果再使用可靠传输的网络协议，就可使所发送的分组无差错按序到达终点，不丢失、不重复。</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-3e9eab4cca1d0298.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>发送方</strong> 发送给 <strong>接收方</strong> 的所有分组都沿着同一条虚电路传送</p><blockquote><ul><li><p>虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。</p></li><li><p>请注意，电路交换的电话通信是先建立了一条真正的连接。</p></li><li><p>因此分组交换的虚连接和电路交换的连接只是类似，但并不完全一样</p></li></ul></blockquote><h2 id="无连接的数据报服务" tabindex="-1"><a class="header-anchor" href="#无连接的数据报服务"><span>无连接的数据报服务</span></a></h2><p><strong>另一种观点：网络提供数据报服务</strong></p><ul><li>互联网的先驱者提出了一种崭新的网络设计思路。</li><li>网络层向上只提供简单灵活的、<strong>无连接的</strong>、<strong>尽最大努力交付</strong>的<strong>数据报服务</strong>。</li><li>网络在发送分组时不需要先建立连接。每一个分组（即 IP 数据报）独立发送，与其前后的分组无关（不进行编号）。</li><li><strong>网络层不提供服务质量的承诺</strong>。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），当然也不保证分组传送的时限。</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-0a52c46cee7f1ffd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>发送方</strong> 发送给 <strong>接收方</strong> 的分组可能沿着不同路径传送</p><blockquote><p><strong>尽最大努力交付</strong></p><ul><li><p>如果主机（即端系统）中的进程之间的通信需要是可靠的，那么就由网络的<strong>主机中的运输层负责可靠交付（包括差错处理、流量控制等）</strong> 。</p></li><li><p><strong>采用这种设计思路的好处是</strong>：网络的造价大大降低，运行方式灵活，能够适应多种应用。</p></li><li><p>互连网能够发展到今日的规模，充分证明了当初采用这种设计思路的正确性。</p></li></ul></blockquote><h2 id="虚电路服务与数据报服务的对比" tabindex="-1"><a class="header-anchor" href="#虚电路服务与数据报服务的对比"><span>虚电路服务与数据报服务的对比</span></a></h2><table><thead><tr><th><strong>对比的方面</strong></th><th><strong>虚电路服务</strong></th><th><strong>数据报服务</strong></th></tr></thead><tbody><tr><td><strong>思路</strong></td><td><strong>可靠通信应当由网络来保证</strong></td><td><strong>可靠通信应当由用户主机来保证</strong></td></tr><tr><td><strong>连接的建立</strong></td><td><strong>必须有</strong></td><td><strong>不需要</strong></td></tr><tr><td><strong>终点地址</strong></td><td><strong>仅在连接建立阶段使用，每个分组使用短的虚电路号</strong></td><td><strong>每个分组都有终点的完整地址</strong></td></tr><tr><td><strong>分组的转发</strong></td><td><strong>属于同一条虚电路的分组均按照同一路由进行转发</strong></td><td><strong>每个分组独立选择路由进行转发</strong></td></tr><tr><td><strong>当结点出故障时</strong></td><td><strong>所有通过出故障的结点的虚电路均不能工作</strong></td><td><strong>出故障的结点可能会丢失分组，一些路由可能会发生变化</strong></td></tr><tr><td><strong>分组的顺序</strong></td><td><strong>总是按发送顺序到达终点</strong></td><td><strong>到达终点时不一定按发送顺序</strong></td></tr><tr><td><strong>端到端的差错处理和流量控制</strong></td><td><strong>可以由网络负责，也可以由用户主机负责</strong></td><td><strong>由用户主机负责</strong></td></tr></tbody></table><hr><h1 id="_4-3、ipv4" tabindex="-1"><a class="header-anchor" href="#_4-3、ipv4"><span>4.3、IPv4</span></a></h1><h2 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1"><span>概述</span></a></h2><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-90e2d995adf53e57.png?imageMogr2/auto-orient/strip|imageView2/2/w/1199/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="分类编制的ipv4地址" tabindex="-1"><a class="header-anchor" href="#分类编制的ipv4地址"><span>分类编制的IPv4地址</span></a></h2><h3 id="简介-1" tabindex="-1"><a class="header-anchor" href="#简介-1"><span>简介</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-617a75508f564e07.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>每一类地址都由两个固定长度的字段组成，其中一个字段是<strong>网络号 net-id</strong>，它标志主机（或路由器）所连接到的网络，而另一个字段则是<strong>主机号 host-id</strong>，它标志该主机（或路由器）。</li><li>主机号在它前面的网络号所指明的网络范围内必须是唯一的。</li><li>由此可见，<strong>一个 IP 地址在整个互联网范围内是唯一的</strong>。</li></ul><p><strong>A类地址</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-eacc61b12148d0fe.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>B类地址</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-3e51c8657163a587.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>C类地址</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-82018abf428effc4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>练习</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-c1a55b79b312df0a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="总结-6" tabindex="-1"><a class="header-anchor" href="#总结-6"><span>总结</span></a></h3><p><strong>IP 地址的指派范围</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-0fd510a88683ce19.png?imageMogr2/auto-orient/strip|imageView2/2/w/881/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>一般不使用的特殊的 IP 地址</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-6ac646caef2b89d6.png?imageMogr2/auto-orient/strip|imageView2/2/w/882/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>IP 地址的一些重要特点</strong></p><p>(1) <strong>IP 地址是一种分等级的地址结构</strong>。分两个等级的好处是：</p><ul><li><strong>第一</strong>，IP 地址管理机构在分配 IP 地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理。</li><li><strong>第二</strong>，路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间。</li></ul><p>(2) <strong>实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口</strong>。</p><ul><li>当一个主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。这种主机称为<strong>多归属主机</strong> (multihomed host)。</li><li>由于一个路由器至少应当连接到两个网络（这样它才能将 IP 数据报从一个网络转发到另一个网络），因此<strong>一个路由器至少应当有两个不同的 IP 地址</strong>。</li></ul><p>(3) <strong>用转发器或网桥连接起来的若干个局域网仍为一个网络</strong>，因此这些局域网都具有同样的网络号 net-id。</p><p>(4) <strong>所有分配到网络号 net-id 的网络，无论是范围很小的局域网，还是可能覆盖很大地理范围的广域网，都是平等的。</strong></p><h2 id="划分子网的ipv4地址" tabindex="-1"><a class="header-anchor" href="#划分子网的ipv4地址"><span>划分子网的IPv4地址</span></a></h2><h3 id="为什么要划分子网" tabindex="-1"><a class="header-anchor" href="#为什么要划分子网"><span>为什么要划分子网</span></a></h3><p>在 ARPANET 的早期，IP 地址的设计确实不够合理：</p><ul><li>IP 地址空间的利用率有时很低。</li><li>给每一个物理网络分配一个网络号会使路由表变得太大因而使网络性能变坏。</li><li>两级的 IP 地址不够灵活。</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-7e6aa3fe4c6184e4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果想要将原来的网络划分成三个独立的网路</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-9c21430ca1484519.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>所以是否可以从主机号部分借用一部分作为子网号</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-5925336afb4dfe54.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>但是如果未在图中标记子网号部分，那么我们和计算机又如何知道分类地址中主机号有多少比特被用作子网号了呢？</p><p>所以就有了划分子网的工具：<strong>子网掩码</strong></p><ul><li><p>从 1985 年起在 IP 地址中又增加了一个“<strong>子网号字段</strong>”，使两级的 IP 地址变成为<strong>三级的 IP 地址</strong>。</p></li><li><p>这种做法叫做<strong>划分子网</strong> (subnetting) 。</p></li><li><p>划分子网已成为互联网的正式标准协议。</p></li></ul></blockquote><h3 id="如何划分子网" tabindex="-1"><a class="header-anchor" href="#如何划分子网"><span>如何划分子网</span></a></h3><p>基本思路</p><ul><li>划分子网纯属一个<strong>单位内部的事情</strong>。单位对外仍然表现为没有划分子网的网络。</li><li>从主机号<strong>借用</strong>若干个位作为<strong>子网号</strong> subnet-id，而主机号 host-id 也就相应减少了若干个位。</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-5006c8be601f1a11.png?imageMogr2/auto-orient/strip|imageView2/2/w/545/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>凡是从其他网络发送给本单位某个主机的 IP 数据报，仍然是根据 IP 数据报的<strong>目的网络号</strong> net-id，先找到连接在本单位网络上的路由器。</li><li>然后<strong>此路由器</strong>在收到 IP 数据报后，再按<strong>目的网络号</strong> net-id 和<strong>子网号</strong> subnet-id 找到目的子网。</li><li>最后就将 IP 数据报直接交付目的主机。</li></ul><p>划分为三个子网后对外仍是一个网络</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-5eaab61ca2770932.png?imageMogr2/auto-orient/strip|imageView2/2/w/773/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><ul><li><strong>优点</strong></li></ul><div class="language-undefined line-numbers-mode" data-highlighter="shiki" data-ext="undefined" data-title="undefined" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>1.  减少了 IP 地址的浪费</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>2.  使网络的组织更加灵活</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>3.  更便于维护和管理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>划分子网纯属一个单位内部的事情，对外部网络透明</strong>，对外仍然表现为没有划分子网的一个网络。</li></ul></blockquote><h3 id="子网掩码" tabindex="-1"><a class="header-anchor" href="#子网掩码"><span>子网掩码</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-0050159cd99737aa.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>(IP 地址) AND (子网掩码) = 网络地址</strong> 重要，下面很多相关知识都会用到</p></blockquote><p>举例</p><p>例子1</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-24fc0f5e02ad49ab.png?imageMogr2/auto-orient/strip|imageView2/2/w/969/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>例子2</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-4e988e8ed1e154e3.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>默认子网掩码</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-5e9d1b71bd598e62.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="总结-7" tabindex="-1"><a class="header-anchor" href="#总结-7"><span>总结</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-143b8b8433293353.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><ul><li><p>子网掩码是一个网络或一个子网的重要属性。</p></li><li><p>路由器在和相邻路由器交换路由信息时，必须把自己所在网络（或子网）的子网掩码告诉相邻路由器。</p></li><li><p>路由器的路由表中的每一个项目，除了要给出目的网络地址外，还必须同时给出该网络的子网掩码。</p></li><li><p>若一个路由器连接在两个子网上，就拥有两个网络地址和两个子网掩码。</p></li></ul></blockquote><h2 id="无分类编址的ipv4地址" tabindex="-1"><a class="header-anchor" href="#无分类编址的ipv4地址"><span>无分类编址的IPv4地址</span></a></h2><h3 id="为什么使用无分类编址" tabindex="-1"><a class="header-anchor" href="#为什么使用无分类编址"><span>为什么使用无分类编址</span></a></h3><h5 id="无分类域间路由选择-cidr" tabindex="-1"><a class="header-anchor" href="#无分类域间路由选择-cidr"><span><strong>无分类域间路由选择 CIDR</strong></span></a></h5><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-dc335c4f88cede6c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>CIDR 最主要的特点</strong></p><ul><li><p>CIDR使用各种长度的“<strong>网络前缀</strong>”(network-prefix)来代替分类地址中的网络号和子网号。</p></li><li><p><strong>IP 地址从三级编址（使用子网掩码）又回到了两级编址</strong>。</p></li></ul></blockquote><h3 id="如何使用无分类编址" tabindex="-1"><a class="header-anchor" href="#如何使用无分类编址"><span>如何使用无分类编址</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-88843ec1d5739f3c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>举例</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-bdff407b4d15ec43.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="注意-聚合c类网的数量-该地址块的地址数量除以1个c类网所包含的地址数量-此处为0011" tabindex="-1"><a class="header-anchor" href="#注意-聚合c类网的数量-该地址块的地址数量除以1个c类网所包含的地址数量-此处为0011"><span>注意：聚合c类网的数量=该地址块的地址数量除以1个c类网所包含的地址数量（此处为0011）</span></a></h4><h3 id="路由聚合-构造超网" tabindex="-1"><a class="header-anchor" href="#路由聚合-构造超网"><span>路由聚合（构造超网）</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-a495310e8e5bc13a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="总结-8" tabindex="-1"><a class="header-anchor" href="#总结-8"><span>总结</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-38c44dc0521cfc1b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1181/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="ipv4地址的应用规划" tabindex="-1"><a class="header-anchor" href="#ipv4地址的应用规划"><span>IPv4地址的应用规划</span></a></h2><p>给定一个IPv4地址快，如何将其划分成几个更小的地址块，并将这些地址块分配给互联网中不同网络，进而可以给各网络中的主机和路由器接口分配IPv4地址</p><h3 id="定长的子网掩码flsm-fixed-length-subnet-mask" tabindex="-1"><a class="header-anchor" href="#定长的子网掩码flsm-fixed-length-subnet-mask"><span>定长的子网掩码FLSM（Fixed Length Subnet Mask）</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-097ed78c469f6c87.png?imageMogr2/auto-orient/strip|imageView2/2/w/882/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>划分子网的IPv4就是定长的子网掩码</strong></p><p>举例</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-814f06bb5874b724.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-a90a636c0ff5f71c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1156/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-da16abd19e811578.png?imageMogr2/auto-orient/strip|imageView2/2/w/1146/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>通过上面步骤分析，就可以从子网1 ~ 8中任选5个分配给左图中的N1 ~ N5</p><p><strong>采用定长的子网掩码划分，只能划分出2^n个子网，其中n是从主机号部分借用的用来作为子网号的比特数量，每个子网所分配的IP地址数量相同</strong></p><p><strong>但是也因为每个子网所分配的IP地址数量相同，不够灵活，容易造成IP地址的浪费</strong></p></blockquote><h3 id="变长的子网掩码vlsm-variable-length-subnet-mask" tabindex="-1"><a class="header-anchor" href="#变长的子网掩码vlsm-variable-length-subnet-mask"><span>变长的子网掩码VLSM（Variable Length Subnet Mask）</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-2c1bfb1250975630.png?imageMogr2/auto-orient/strip|imageView2/2/w/874/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>无分类编址的IPv4就是变长的子网掩码</strong></p><p>举例</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-e7a3b3efa0032ed5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-b855ffbf02fe4306.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="ipv4地址与mac地址的关系" tabindex="-1"><a class="header-anchor" href="#ipv4地址与mac地址的关系"><span>IPv4地址与MAC地址的关系</span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667273967224.png" alt="1667273967224" tabindex="0" loading="lazy"><figcaption>1667273967224</figcaption></figure><h1 id="地址解析协议arp" tabindex="-1"><a class="header-anchor" href="#地址解析协议arp"><span>地址解析协议ARP</span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274112340.png" alt="1667274112340" tabindex="0" loading="lazy"><figcaption>1667274112340</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274165038.png" alt="1667274165038" tabindex="0" loading="lazy"><figcaption>1667274165038</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274182115.png" alt="1667274182115" tabindex="0" loading="lazy"><figcaption>1667274182115</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274213025.png" alt="1667274213025" tabindex="0" loading="lazy"><figcaption>1667274213025</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274225330.png" alt="1667274225330" tabindex="0" loading="lazy"><figcaption>1667274225330</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274269940.png" alt="1667274269940" tabindex="0" loading="lazy"><figcaption>1667274269940</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274279067.png" alt="1667274279067" tabindex="0" loading="lazy"><figcaption>1667274279067</figcaption></figure><hr><h1 id="_4-4、ip数据报的发送和转发过程" tabindex="-1"><a class="header-anchor" href="#_4-4、ip数据报的发送和转发过程"><span>4.4、IP数据报的发送和转发过程</span></a></h1><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-591d4b10e724a0c2.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>举例</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-cb603ff4350d2927.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-6017dc6fd05d7dc3.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>源主机如何知道目的主机是否与自己在同一个网络中，是直接交付，还是间接交付？</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-1350e20953ab73c3.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>可以通过<strong>目的地址IP</strong>和<strong>源地址的子网掩码</strong>进行<strong>逻辑与运算</strong>得到<strong>目的网络地址</strong></p><ul><li><p>如果<strong>目的网络地址</strong>和<strong>源网络地址</strong> <strong>相同</strong>，就是<strong>在同一个网络</strong>中，属于<strong>直接交付</strong></p></li><li><p>如果<strong>目的网络地址</strong>和<strong>源网络地址</strong> <strong>不相同</strong>，就<strong>不在同一个网络</strong>中，属于<strong>间接交付</strong>，传输给主机所在网络的<strong>默认网关</strong>（路由器——下图会讲解）,由默认网关帮忙转发</p></li></ul></blockquote><p>主机C如何知道路由器R的存在？</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-5f7abd26ae50d253.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>用户为了让本网络中的主机能和其他网络中的主机进行通信，就必须给其指定本网络的一个路由器的接口，由该路由器帮忙进行转发，所指定的路由器，也被称为<strong>默认网关</strong></p><p>例如。路由器的接口0的IP地址192.168.0.128做为左边网络的默认网关</p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-0351946f5505b37a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>主机A会将该IP数据报传输给自己的默认网关，也就是图中所示的路由器接口0</p></blockquote><p>路由器收到IP数据报后如何转发？</p><ul><li>检查IP数据报首部是否出错： <ul><li>若出错，则直接丢弃该IP数据报并通告源主机</li><li>若没有出错，则进行转发</li></ul></li><li>根据IP数据报的目的地址在路由表中查找匹配的条目： <ul><li>若找到匹配的条目，则转发给条目中指示的吓一跳</li><li>若找不到，则丢弃该数据报并通告源主机</li></ul></li></ul><p>假设IP数据报首部没有出错，路由器取出IP数据报首部各地址字段的值</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-09e48a4a2debf9dd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来路由器对该IP数据报进行查表转发</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-6ec850736125c7f6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>逐条检查路由条目，将目的地址与路由条目中的地址掩码进行逻辑与运算得到目的网络地址，然后与路由条目中的目的网络进行比较，如果相同，则这条路由条目就是匹配的路由条目，按照它的下一条指示，图中所示的也就是接口1转发该IP数据报</p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-4ff7f2294cf39cef.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>路由器是隔离广播域的</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-f38fdc3eb91af37f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><h1 id="_4-5、静态路由配置及其可能产生的路由环路问题" tabindex="-1"><a class="header-anchor" href="#_4-5、静态路由配置及其可能产生的路由环路问题"><span>4.5、静态路由配置及其可能产生的路由环路问题</span></a></h1><h2 id="概念-3" tabindex="-1"><a class="header-anchor" href="#概念-3"><span>概念</span></a></h2><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-cf80167248b787a0.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="多种情况举例" tabindex="-1"><a class="header-anchor" href="#多种情况举例"><span>多种情况举例</span></a></h2><p><strong>静态路由配置</strong></p><p>举例</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-214e6a6830649edd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>默认路由</strong></p><p>举例</p><p>默认路由可以被所有网络匹配，但路由匹配有优先级，默认路由是优先级最低的</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-8887ba23edaae006.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>特定主机路由</strong></p><p>举例</p><p>有时候，我们可以给路由器添加针对某个主机的特定主机路由条目</p><p>一般用于网络管理人员对网络的管理和测试</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-434c1eec83abd86f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>多条路由可选，匹配路由最具体的</p></blockquote><p><strong>静态路由配置错误导致路由环路</strong></p><p>举例</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-8b1a3cadc08a931f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>假设将R2的路由表中第三条目 配置错了下一跳</p><p>、致R2和R3之间产生了路由环</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-d30fc31c76fe75b2.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>聚合了不存在的网络而导致路由环路</strong></p><p>举例</p><p>正常情况</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-9e22a85322dfb654.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-56bce2f676ef8d09.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>错误情况</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-030c93bce1443043.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>解决方法</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-caeddc52bde20f9c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-d91cb3837cfc2b6f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>黑洞路由的下一跳为null0，这是路由器内部的虚拟接口，IP数据报进入它后就被丢弃</p></blockquote><p><strong>网络故障而导致路由环路</strong></p><p>举例</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-e3848e2bfcfc2c62.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-99cc1b342b3f645f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>解决方法</p><p>添加故障的网络为黑洞路由</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-0c30655d3122a50d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-d8107f8fc71dd1f4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>假设。一段时间后故障网络恢复了</p><p>R1又自动地得出了其接口0的直连网络的路由条目</p><p>针对该网络的黑洞网络会自动失效</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-3f60a84d11d15f41.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果又故障</p><p>则生效该网络的黑洞网络</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-dfe2cfdcdd6af09e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="总结-9" tabindex="-1"><a class="header-anchor" href="#总结-9"><span>总结</span></a></h2><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-3bc2906b99f6940d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="路由器的基本工作原理" tabindex="-1"><a class="header-anchor" href="#路由器的基本工作原理"><span>路由器的基本工作原理</span></a></h4><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667303251187.png" alt="1667303251187" tabindex="0" loading="lazy"><figcaption>1667303251187</figcaption></figure><hr><h1 id="_4-6、路由选择协议" tabindex="-1"><a class="header-anchor" href="#_4-6、路由选择协议"><span>4.6、路由选择协议</span></a></h1><h2 id="概述-2" tabindex="-1"><a class="header-anchor" href="#概述-2"><span>概述</span></a></h2><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-a6ddde977e3398ad.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>因特网所采用的路由选择协议的主要特点</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-b3382290a3965ffc.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>因特网采用分层次的路由选择协议</strong></p><ul><li><strong>自治系统 AS</strong>：在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由。</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-9e37d1229ec7836e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>自治系统之间的路由选择简称为域间路由选择，自治系统内部的路由选择简称为域内路由选择</p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-8729bdd2bd367edf.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>域间路由选择使用外部网关协议EGP这个类别的路由选择协议</p><p>域内路由选择使用内部网关协议IGP这个类别的路由选择协议</p><p><strong>网关协议</strong>的名称可称为<strong>路由协议</strong></p></blockquote><p><strong>常见的路由选择协议</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-6b1876963d6d9de0.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>路由器的基本结构</strong></p><p>路由器是一种具有多个输入端口，和输出端口的专用计算机，其任务是转发分组</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-e6b69c1f176e24c5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>路由器结构可划分为两大部分：</p><p>1、<strong>分组转发部分</strong></p><p>由三部分构成</p><ul><li><p>交换结构</p></li><li><p>一组输入端口：</p><p>信号从某个输入端口进入路由器</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-2bd1e24a95010cc8.png?imageMogr2/auto-orient/strip|imageView2/2/w/742/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>物理层将信号转换成比特流，送交数据链路层处理</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-93fa25cf949ddf32.png?imageMogr2/auto-orient/strip|imageView2/2/w/627/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>数据链路层识别从比特流中识别出帧，去掉帧头和帧尾后，送交网络层处理</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-be61420be381fce0.png?imageMogr2/auto-orient/strip|imageView2/2/w/632/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>image-20201019141242246</p><p>如果送交网络层的分组是普通待转发的数据分组</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-13bf3933ea84f8cf.png?imageMogr2/auto-orient/strip|imageView2/2/w/625/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>则根据分组首部中的目的地址进行查表转发</p><p>若找不到匹配的转发条目，则丢弃该分组，否则，按照匹配条目中所指示的端口进行转发</p></li><li><p>一组输出端口</p><p>网络层更新数据分组首部中某些字段的值，例如将数据分组的生存时间减1，然后送交数据链路层进行封装</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-c20bbb057497a7dd.png?imageMogr2/auto-orient/strip|imageView2/2/w/661/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>数据链路层将数据分组封装成帧，交给物理层处理</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-243c60046346ab42.png?imageMogr2/auto-orient/strip|imageView2/2/w/566/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>物理层将帧看成比特流将其变换成相应的电信号进行发送</p></li></ul><blockquote><p>路由器的各端口还会有输入缓冲区和输出缓冲区</p><ul><li><p>输入缓冲区用来暂存新进入路由器但还来不及处理的分组</p></li><li><p>输出缓冲区用来暂存已经处理完毕但还来不及发送的分组</p></li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-af72fd2149d2c01e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>路由器的端口一般都具有输入和输出功能</strong>，这些实例分出了输入端口和输出端口是更好演示路由基本工作过程</p></blockquote><p>2、<strong>路由选择部分</strong></p><ul><li><p>路由选择部分的核心构件是路由选择处理机，它的任务是根据所使用的路由选择协议。周期性地与其他路由器 进行路由信息的交互，来更新路由表</p><p>如果送交给输入端口的网络层的分组是路由器之间交换路由信息的路由报文，则把这种分组送交给路由选择处理机</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-109a369b44639a9a.png?imageMogr2/auto-orient/strip|imageView2/2/w/419/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>路由选择处理机根据分组的内容来更新自己的<strong>路由表</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-af4af7e182ea3f97.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>image-20201019142415055</p><p>路由选择处理机还会周期性地给其他路由器发送自己所知道的路由信息</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-9c1dca34462b76ab.png?imageMogr2/auto-orient/strip|imageView2/2/w/1106/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span></span></a></h2></li></ul><h2 id="内部网关协议igp" tabindex="-1"><a class="header-anchor" href="#内部网关协议igp"><span>内部网关协议IGP</span></a></h2><h3 id="路由信息协议rip" tabindex="-1"><a class="header-anchor" href="#路由信息协议rip"><span>路由信息协议RIP</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-850c29aaf1e744d6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-81a38e546cd55ec2.png?imageMogr2/auto-orient/strip|imageView2/2/w/913/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>RIP的基本工作过程</strong></p><p>举例</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-6bf4e045a90846e0.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>RIP的路由条目的更新规则</strong></p><p>举例1</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-671231845f242b38.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>路由器C的表到达各目的网络的下一条都记为问号，可以理解为路由器D并不需要关心路由器C的这些内容</p><p>假设路由器C的RIP更新报文发送周期到了，则路由器C将自己路由表中的相关路由信息封装到RIP更新报文中发送给路由器D</p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-bacf546778de9f8a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>路由器C能到达这些网络，说明路由器C的相邻路由器也能到达，只是比路由器C的距离大1，于是根据距离的对比，路由器D更新自己的路由表</p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-79852776853b7463.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>举例2</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-7a0db5b1f8900318.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>RIP存在“坏消息传播得慢”的问题</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-edc2c694de1a9ec9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-bedb4b539faf44dd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-4d1eda70d2f555bf.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>解决方法</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-3a055002b79a9cda.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>但是，这些方法也不能完全解决“坏消息传播得慢”的问题，这是距离向量的本质决定</p></blockquote><p><strong>总结</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-6bcb92e542416b41.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>RIP 协议的优缺点</p><p>优点：</p><ol><li>实现简单，开销较小。</li></ol><p>缺点：</p><ol><li><p>RIP 限制了网络的规模，它能使用的最大距离为 15（16 表示不可达）。</p></li><li><p>路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。</p></li><li><p>“坏消息传播得慢”，使更新过程的收敛时间过长。</p></li></ol></blockquote><h3 id="开放最短路径优先ospf" tabindex="-1"><a class="header-anchor" href="#开放最短路径优先ospf"><span>开放最短路径优先OSPF</span></a></h3><p><strong>开放最短路径优先 OSPF (Open Shortest Path First)</strong></p><p><strong>注意</strong>：OSPF 只是一个协议的名字，它并不表示其他的路由选择协议不是“最短路径优先”。</p><p><strong>概念</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-f5dc77f36b5b1047.png?imageMogr2/auto-orient/strip|imageView2/2/w/940/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>问候（Hello）分组</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-f9c642e76e871651.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>IP数据报首部中协议号字段的取值应为89，来表明IP数据报的数据载荷为OSPF分组</p></blockquote><p><strong>发送链路状态通告LSA</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-bbed8a0d31bf19c3.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>洪泛法有点类似于广播，就是从一个接口进来，从其他剩余所有接口出去</p></blockquote><p><strong>链路状态数据库同步</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-6b8e10e2d82cfa6f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>使用SPF算法计算出各自路由器到达其他路由器的最短路径</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-4239eee0b6040f52.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>OSPF五种分组类型</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-a2a83ab2654e270f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>OSPF的基本工作过程</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-339786779f0e1a82.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>OSPF在多点接入网络中路由器邻居关系建立</strong></p><p>如果不采用其他机制，将会产生大量的多播分组</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-6420e503df73b7ef.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>若DR出现问题，则由BDR顶替DR</p></blockquote><p><strong>为了使OSPF能够用于规模很大的网络，OSPF把一个自治系统再划分为若干个更小的范围，叫做区域（Area）</strong></p><ul><li>在该自治系统内，所有路由器都使用OSPF协议，OSPF将该自治系统再划分成4个更小的区域</li><li>每个区域都有一个32比特的区域标识符</li><li>主干区域的区域标识符必须为0，主干区域用于连通其他区域</li><li>其他区域的区域标识符不能为0且不相同</li><li>每个区域一般不应包含路由器超过200个</li><li>划分区域的好处就是，利用洪泛法交换链路状态信息局限于每一个区域而不是自治系统，这样减少整个网络上的通信量</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-725b3aab5aa350b1.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>总结</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-6382df507ddd76d6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="外部网关协议egp" tabindex="-1"><a class="header-anchor" href="#外部网关协议egp"><span>外部网关协议EGP</span></a></h2><h3 id="边界网关协议bgp" tabindex="-1"><a class="header-anchor" href="#边界网关协议bgp"><span>边界网关协议BGP</span></a></h3><p>BGP（Border Gateway Protocol） 是<strong>不同自治系统的路由器之间</strong>交换路由信息的协议</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-5aae9c53795e17a7.png?imageMogr2/auto-orient/strip|imageView2/2/w/970/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-04fe6f98036db57c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-bc71c2ee5976ac53.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-b472dd1a51f30666.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-67b837e6c27d5e9c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>总结</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-ce7dcde013985e95.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="直接封装rip、ospf和bgp报文的协议" tabindex="-1"><a class="header-anchor" href="#直接封装rip、ospf和bgp报文的协议"><span>直接封装RIP、OSPF和BGP报文的协议</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-40cf22cbd65e9ed8.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><h1 id="_4-7、ipv4数据报的首部格式" tabindex="-1"><a class="header-anchor" href="#_4-7、ipv4数据报的首部格式"><span>4.7、IPv4数据报的首部格式</span></a></h1><h2 id="各字段的作用" tabindex="-1"><a class="header-anchor" href="#各字段的作用"><span>各字段的作用</span></a></h2><ul><li>一个 IP 数据报由<strong>首部</strong>和<strong>数据</strong>两部分组成。</li><li><strong>首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的。</strong></li><li>在首部的固定部分的后面是一些可选字段，其长度是可变的。</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-73800cce52c3a91e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>图中的每一行都由32个比特（也就是4个字节）构成，每个小格子称为字段或者域，每个字段或某些字段的组合用来表达IP协议的相关功能</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-f1cf7dd2ea4eb52e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1196/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>IP数据报的首部长度一定是4字节的整数倍</strong></p><p>因为首部中的可选字段的长度从1个字节到40个字节不等，那么，当20字节的固定部分加上1到40个字节长度不等的可变部分，<strong>会造成首部长度不是4字节整数倍时，就用取值为全0的填充字段填充相应个字节</strong>，以确保IP数据报的首部长度是4字节的整数倍</p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-f7bb4a2e440abdc6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-a014cde6b0ff9691.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>对IPv4数据报进行分片</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-d7b3a6145ac1dde9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>现在假定分片2的IP数据报经过某个网络时还需要进行分片</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-5d538557f988dc41.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h5 id="生存时间ttl" tabindex="-1"><a class="header-anchor" href="#生存时间ttl"><span>生存时间TTL</span></a></h5><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-45ab400eac660e4a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-94a3b7c0b1f01488.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h5 id="首部检验和" tabindex="-1"><a class="header-anchor" href="#首部检验和"><span>首部检验和</span></a></h5><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667379409703.png" alt="1667379409703" tabindex="0" loading="lazy"><figcaption>1667379409703</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-b074f6fffe538c0e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-07ac459878b48666.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="总结-10" tabindex="-1"><a class="header-anchor" href="#总结-10"><span>总结</span></a></h2><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-95863501601f7757.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><h1 id="_4-8、网际控制报文协议icmp" tabindex="-1"><a class="header-anchor" href="#_4-8、网际控制报文协议icmp"><span>4.8、网际控制报文协议ICMP</span></a></h1><h2 id="概念-4" tabindex="-1"><a class="header-anchor" href="#概念-4"><span>概念</span></a></h2><p>架构IP网络时需要特别注意两点：</p><ul><li>确认网络是否正常工作</li><li>遇到异常时进行问题诊断</li></ul><p><strong>而ICMP就是实现这些问题的协议</strong></p><p>ICMP的主要功能包括：</p><ul><li>确认IP包是否成功送达目标地址</li><li>通知在发送过程当中IP包被废弃的具体原因</li><li>改善网络设置等</li></ul><p><strong>有了这些功能以后，就可以获得网络是否正常，设置是否有误以及设备有何异常等信息，从而便于进行网络上的问题诊断</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-8739d970a0300acc.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>ICMP 不是高层协议（看起来好像是高层协议，因为 ICMP 报文是装在 IP 数据报中，作为其中的数据部分），而是 IP 层的协议</strong></p><p>ICMP 报文的格式</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-6a02675fccdc2958.png?imageMogr2/auto-orient/strip|imageView2/2/w/813/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="icmp差错报告报文" tabindex="-1"><a class="header-anchor" href="#icmp差错报告报文"><span>ICMP差错报告报文</span></a></h2><h3 id="终点不可达" tabindex="-1"><a class="header-anchor" href="#终点不可达"><span>终点不可达</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-855edabd9c1e6298.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="源点抑制" tabindex="-1"><a class="header-anchor" href="#源点抑制"><span>源点抑制</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-e7f27ef6c93c9621.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="时间超过" tabindex="-1"><a class="header-anchor" href="#时间超过"><span>时间超过</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-49d82185c88813fe.png?imageMogr2/auto-orient/strip|imageView2/2/w/1191/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="参数问题" tabindex="-1"><a class="header-anchor" href="#参数问题"><span>参数问题</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-e2457fe1291c9bca.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="改变路由-重定向" tabindex="-1"><a class="header-anchor" href="#改变路由-重定向"><span>改变路由（重定向）</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-0ef50227f921ca79.png?imageMogr2/auto-orient/strip|imageView2/2/w/1186/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="不应发送icmp差错报告报文情况" tabindex="-1"><a class="header-anchor" href="#不应发送icmp差错报告报文情况"><span>不应发送ICMP差错报告报文情况</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-a0c3a21bb04ede42.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="icmp应用举例" tabindex="-1"><a class="header-anchor" href="#icmp应用举例"><span>ICMP应用举例</span></a></h2><h3 id="分组网间探测ping-packet-internet-groper" tabindex="-1"><a class="header-anchor" href="#分组网间探测ping-packet-internet-groper"><span>分组网间探测PING（Packet InterNet Groper）</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-75d7bc12ca942415.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="跟踪路由-traceroute" tabindex="-1"><a class="header-anchor" href="#跟踪路由-traceroute"><span>跟踪路由（traceroute）</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-185af899d5e5a922.png?imageMogr2/auto-orient/strip|imageView2/2/w/964/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>tracert命令的实现原理</strong></p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-f59a9cacb015f074.png?imageMogr2/auto-orient/strip|imageView2/2/w/1191/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-982e09181a0bc4ab.png?imageMogr2/auto-orient/strip|imageView2/2/w/1191/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-aeefc9f3ac87d9d7.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="总结-11" tabindex="-1"><a class="header-anchor" href="#总结-11"><span>总结</span></a></h2><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-571c2187a7833f0d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><h1 id="_4-9、虚拟专用网vpn与网络地址转换nat" tabindex="-1"><a class="header-anchor" href="#_4-9、虚拟专用网vpn与网络地址转换nat"><span>4.9、虚拟专用网VPN与网络地址转换NAT</span></a></h1><h2 id="虚拟专用网vpn-ip隧道技术" tabindex="-1"><a class="header-anchor" href="#虚拟专用网vpn-ip隧道技术"><span>虚拟专用网VPN (IP隧道技术)</span></a></h2><ul><li>由于 <strong>IP 地址的紧缺</strong>，一个机构能够申请到的IP地址数往往远小于本机构所拥有的主机数。</li><li>考虑到<strong>互联网并不很安全</strong>，一个机构内也并不需要把所有的主机接入到外部的互联网。</li><li>假定在一个机构内部的计算机通信也是采用 TCP/IP 协议，那么从原则上讲，对于这些仅在<strong>机构内部使用</strong>的计算机就可以由本机构<strong>自行分配其 IP 地址</strong>。</li></ul><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-f295c690e2c90d69.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-aee1ae10f8ccb65f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-f983b11370b6f354.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>上图是因特网数字分配机构IANA官网查看IPv4地址空间中特殊地址的分配方案</p><p>用粉红色标出来的地址就是无需申请的、可自由分配的专用地址，或称私有地址</p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-93cca695182bf40f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>私有地址只能用于一个机构的内部通信，而不能用于和因特网上的主机通信</p><p>私有地址只能用作本地地址而不能用作全球地址</p><p>因特网中所有路由器对目的地址是私有地址的IP数据报一律不进行转发</p><p><strong>本地地址与全球地址</strong></p><ul><li><p><strong>本地地址</strong>——仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向互联网的管理机构申请。</p></li><li><p><strong>全球地址</strong>——全球唯一的 IP 地址，必须向互联网的管理机构申请。</p></li><li><p><strong>问题</strong>：在内部使用的本地地址就有可能和互联网中某个 IP 地址重合，这样就会出现地址的二义性问题。</p></li></ul></blockquote><p>所以部门A和部门B至少需要一个 路由器具有合法的全球IP地址，这样各自的专用网才能利用公用的因特网进行通信</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-ab2d75fcfc34f709.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>部门A向部门B发送数据流程</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-3a739ef0d60a031e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>两个专用网内的主机间发送的数据报是通过了公用的因特网，但在效果上就好像是在本机构的专用网上传送一样</p><p>数据报在因特网中可能要经过多个网络和路由器，但从逻辑上看，R1和R2之间好像是一条直通的点对点链路</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-ad9e5dcca8c0a1c9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因此也被称为IP隧道技术</p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-6731dbc8b1ee1abc.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="网络地址转换nat" tabindex="-1"><a class="header-anchor" href="#网络地址转换nat"><span>网络地址转换NAT</span></a></h2><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-f9f42bd392a2375a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>举例</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-c489215f07bc88f6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>使用私有地址的主机，如何才能与因特网上使用全球IP地址的主机进行通信？</p><p>这需要在专用网络连接到因特网的路由器上安装NAT软件</p></blockquote><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-41ae75149e86d0fc.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>专有NAT软件的路由器叫做NAT路由器</p><p>它至少有一个有效的外部全球IP地址</p><p>这样，所有使用私有地址的主机在和外界通信时，都要在NAT路由器上将其私有地址转换为全球IP地址</p></blockquote><p>假设，使用私有地址的主机要给因特网上使用全球IP地址的另一台主机发送IP数据报</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-a74e4efad5297fc9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因特网上的这台主机给源主机发回数据报</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-c0463dd919523857.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当专用网中的这两台使用私有地址的主机都要给因特网使用全球地址的另一台主机发送数据报时，在NAT路由器的NAT转换表中就会产生两条记录，分别记录两个私有地址与全球地址的对应关系</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-3f71256d68f6a39a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这种基本转换存在一个问题</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-ff2eca30cc7a7b41.png?imageMogr2/auto-orient/strip|imageView2/2/w/953/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>解决方法</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-05d3e1e3fd4b1998.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>我们现在用的很多家用路由器都是这种NART路由器</p></blockquote><p>内网主机与外网主机的通信，是否能由外网主机首先发起？</p><p>否定</p><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-d2fd109d060e4853.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-ff43ea52e61da271.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="总结-12" tabindex="-1"><a class="header-anchor" href="#总结-12"><span>总结</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667353104296.png" alt="1667353104296" tabindex="0" loading="lazy"><figcaption>1667353104296</figcaption></figure><p>​</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667353156210.png" alt="1667353156210" tabindex="0" loading="lazy"><figcaption>1667353156210</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667353168950.png" alt="1667353168950" tabindex="0" loading="lazy"><figcaption>1667353168950</figcaption></figure><h1 id="_4-10ip多播" tabindex="-1"><a class="header-anchor" href="#_4-10ip多播"><span>4.10IP多播</span></a></h1><h2 id="ip多播技术的相关基本概念" tabindex="-1"><a class="header-anchor" href="#ip多播技术的相关基本概念"><span><strong>IP多播技术的相关基本概念</strong></span></a></h2><p>多播（Multicast，也称为组播）是一种实现“一对多”通信的技术，与传统单播“一对一”通信相比，多播可以极大地节省网络资源*。</p><p>在因特网上进行的多播，称为IP多播。</p><h1 id="-3" tabindex="-1"><a class="header-anchor" href="#-3"><span><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667353967275.png" alt="1667353967275" loading="lazy"></span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667354016916.png" alt="1667354016916" tabindex="0" loading="lazy"><figcaption>1667354016916</figcaption></figure><p><strong>IPv4多播地址又可分为预留的多播地址（永久多播地址）、全球范围可用的多播地址以及本地管理的多播地址[RFC3330]。</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667354111917.png" alt="1667354111917" tabindex="0" loading="lazy"><figcaption>1667354111917</figcaption></figure><h2 id="在局域网上进行硬件多播" tabindex="-1"><a class="header-anchor" href="#在局域网上进行硬件多播"><span><strong>在局域网上进行硬件多播</strong></span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355190027.png" alt="1667355190027" tabindex="0" loading="lazy"><figcaption>1667355190027</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355225753.png" alt="1667355225753" tabindex="0" loading="lazy"><figcaption>1667355225753</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355243806.png" alt="1667355243806" tabindex="0" loading="lazy"><figcaption>1667355243806</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355290437.png" alt="1667355290437" tabindex="0" loading="lazy"><figcaption>1667355290437</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355309962.png" alt="1667355309962" tabindex="0" loading="lazy"><figcaption>1667355309962</figcaption></figure><h2 id="在因特网上进行ip多播需要的两种协议" tabindex="-1"><a class="header-anchor" href="#在因特网上进行ip多播需要的两种协议"><span>在因特网上进行IP多播需要的两种协议</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355912799.png" alt="1667355912799" tabindex="0" loading="lazy"><figcaption>1667355912799</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355925848.png" alt="1667355925848" tabindex="0" loading="lazy"><figcaption>1667355925848</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355942431.png" alt="1667355942431" tabindex="0" loading="lazy"><figcaption>1667355942431</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355954876.png" alt="1667355954876" tabindex="0" loading="lazy"><figcaption>1667355954876</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355977035.png" alt="1667355977035" tabindex="0" loading="lazy"><figcaption>1667355977035</figcaption></figure><h1 id="_4-11网际组管理协议igmp" tabindex="-1"><a class="header-anchor" href="#_4-11网际组管理协议igmp"><span>4.11网际组管理协议IGMP</span></a></h1><h1 id="-4" tabindex="-1"><a class="header-anchor" href="#-4"><span><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667357700449.png" alt="1667357700449" loading="lazy"></span></a></h1><h1 id="多播路由选择协议" tabindex="-1"><a class="header-anchor" href="#多播路由选择协议"><span><strong>多播路由选择协议</strong></span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667359257784.png" alt="1667359257784" tabindex="0" loading="lazy"><figcaption>1667359257784</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667359271001.png" alt="1667359271001" tabindex="0" loading="lazy"><figcaption>1667359271001</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667359294138.png" alt="1667359294138" tabindex="0" loading="lazy"><figcaption>1667359294138</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667359307466.png" alt="1667359307466" tabindex="0" loading="lazy"><figcaption>1667359307466</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667359365849.png" alt="1667359365849" tabindex="0" loading="lazy"><figcaption>1667359365849</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667359390169.png" alt="1667359390169" tabindex="0" loading="lazy"><figcaption>1667359390169</figcaption></figure><h1 id="移动ip技术" tabindex="-1"><a class="header-anchor" href="#移动ip技术"><span><strong>移动IP</strong>技术</span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667360514829.png" alt="1667360514829" tabindex="0" loading="lazy"><figcaption>1667360514829</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667360595120.png" alt="1667360595120" tabindex="0" loading="lazy"><figcaption>1667360595120</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667360625889.png" alt="1667360625889" tabindex="0" loading="lazy"><figcaption>1667360625889</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667360674057.png" alt="1667360674057" tabindex="0" loading="lazy"><figcaption>1667360674057</figcaption></figure><p><strong>当外地代理和移动主机不是同一台设备时，转交地址实际上是外地代理的地址而不是移动主机的地址，转交地址既不会作为移动主机发送IP数据报的源地址，也不会作为移动主机所接收的IP数据报的目的地址。</strong></p><p><strong>转交地址仅仅是归属代理到外地代理的IP隧道的出口地址。</strong></p><p><strong>所有使用同一外地代理的移动主机都可以共享同一个转交地址。</strong></p><p>当外地代理从IP隧道中收到并解封出原IP数据报时，会在自己的代理注册表中查找移动主机的永久地址所对应的MAC地址，并将该数据报封装到目的地址为该MAC地址的帧中发送给移动主机。</p><p>这与我们之前在4.2.6节中介绍的IP数据报的正常转发流程是不同的，否则会造成该数据报又被发回移动主机的归属网络。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667360960551.png" alt="1667360960551" tabindex="0" loading="lazy"><figcaption>1667360960551</figcaption></figure><p>​ <strong>为此，移动主机可以将外地代理作为自己的默认路由器，也可以通过代理发现协议从外地代理获取外地网络中其他路由器的地址，并将其设置为自己的默认路由器。</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667361405519.png" alt="1667361405519" tabindex="0" loading="lazy"><figcaption>1667361405519</figcaption></figure><h1 id="_4-12-1-ipv6引进的主要变化" tabindex="-1"><a class="header-anchor" href="#_4-12-1-ipv6引进的主要变化"><span>4.12.1 IPv6引进的主要变化</span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667361967727.png" alt="1667361967727" tabindex="0" loading="lazy"><figcaption>1667361967727</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667361980906.png" alt="1667361980906" tabindex="0" loading="lazy"><figcaption>1667361980906</figcaption></figure><h2 id="ipv6数据报的首部" tabindex="-1"><a class="header-anchor" href="#ipv6数据报的首部"><span><strong>IPv6数据报的首部</strong></span></a></h2><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364455274.png" alt="1667364455274" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364467715.png" alt="1667364467715" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364485841.png" alt="1667364485841" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364512533.png" alt="1667364512533" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364531999.png" alt="1667364531999" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364544365.png" alt="1667364544365" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364558739.png" alt="1667364558739" loading="lazy"></p><h2 id="ipv6地址" tabindex="-1"><a class="header-anchor" href="#ipv6地址"><span><strong>IPv6地址</strong></span></a></h2><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365553256.png" alt="1667365553256" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365564902.png" alt="1667365564902" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365574186.png" alt="1667365574186" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365582813.png" alt="1667365582813" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365594632.png" alt="1667365594632" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365614526.png" alt="1667365614526" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365627131.png" alt="1667365627131" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365643356.png" alt="1667365643356" loading="lazy"></p><h2 id="从ipv4向ipv6过渡" tabindex="-1"><a class="header-anchor" href="#从ipv4向ipv6过渡"><span><strong>从IPv4向IPv6过渡</strong></span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667366322044.png" alt="1667366322044" tabindex="0" loading="lazy"><figcaption>1667366322044</figcaption></figure><p><strong>使用双协议栈</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667366334865.png" alt="1667366334865" tabindex="0" loading="lazy"><figcaption>1667366334865</figcaption></figure><p><strong>使用隧道技术</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667366354992.png" alt="1667366354992" tabindex="0" loading="lazy"><figcaption>1667366354992</figcaption></figure><h2 id="网际控制报文协议icmpv6" tabindex="-1"><a class="header-anchor" href="#网际控制报文协议icmpv6"><span><strong>网际控制报文协议</strong>ICMPv6</span></a></h2><h3 id="网际控制报文协议icmpv6概述" tabindex="-1"><a class="header-anchor" href="#网际控制报文协议icmpv6概述"><span><strong>网际控制报文协议</strong>ICMPv6<strong>概述</strong></span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667367093439.png" alt="1667367093439" tabindex="0" loading="lazy"><figcaption>1667367093439</figcaption></figure><h3 id="icmpv6报文的封装" tabindex="-1"><a class="header-anchor" href="#icmpv6报文的封装"><span>ICMPv6报文的封装</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667367103607.png" alt="1667367103607" tabindex="0" loading="lazy"><figcaption>1667367103607</figcaption></figure><h3 id="icmpv6报文的分类" tabindex="-1"><a class="header-anchor" href="#icmpv6报文的分类"><span><strong>ICMPv6报文的分类</strong></span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667367117783.png" alt="1667367117783" tabindex="0" loading="lazy"><figcaption>1667367117783</figcaption></figure><h1 id="_5-1、运输层概述" tabindex="-1"><a class="header-anchor" href="#_5-1、运输层概述"><span>5.1、运输层概述</span></a></h1><h2 id="概念-5" tabindex="-1"><a class="header-anchor" href="#概念-5"><span>概念</span></a></h2><p><strong>进程之间的通信</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134234644.png" alt="image-20240711134234644" tabindex="0" loading="lazy"><figcaption>image-20240711134234644</figcaption></figure><ul><li>从通信和信息处理的角度看，运输层向它上面的应用层提供通信服务，<strong>它属于面向通信部分的最高层，同时也是用户功能中的最低层</strong>。</li><li>当网络的边缘部分中的两个主机使用网络的核心部分的功能进行端到端的通信时，<strong>只有位于网络边缘部分的主机的协议栈才有运输层</strong>，而网络核心部分中的路由器在转发分组时都只用到三层（到网络层）的功能。</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134318751.png" alt="image-20240711134318751" tabindex="0" loading="lazy"><figcaption>image-20240711134318751</figcaption></figure><p><strong>进程之间通信流程</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134334827.png" alt="image-20240711134334827" tabindex="0" loading="lazy"><figcaption>image-20240711134334827</figcaption></figure><p>“逻辑通信”是指运输层之间的通信好像是沿水平方向传送数据，但事实上，这两条数据并没有一条水平方向的物理连接，要传送的数据是沿着图中上下多次的虚线方向传送的</p><blockquote><p>进程Ap1与Ap4之间进行基于网络的通信，进程Ap2与Ap3之间进行基于网络的通信</p><p>在运输层使用不同的端口，来对应不同的应用进程</p><p>然后通过网络层及其下层来传输应用层报文</p><p>接收方的运输层通过不同的端口，将收到的应用层报文，交付给应用层中相应的应用进程</p><p>这里端口并不是指看得见、摸得着的物理端口，而是指用来区分不同应用进程的标识符</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134406908.png" alt="image-20240711134406908" tabindex="0" loading="lazy"><figcaption>image-20240711134406908</figcaption></figure><h2 id="总结-13" tabindex="-1"><a class="header-anchor" href="#总结-13"><span>总结</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134418029.png" alt="image-20240711134418029" tabindex="0" loading="lazy"><figcaption>image-20240711134418029</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134433785.png" alt="image-20240711134433785" tabindex="0" loading="lazy"><figcaption>image-20240711134433785</figcaption></figure><h1 id="_5-2、tcp报文段的首部格式" tabindex="-1"><a class="header-anchor" href="#_5-2、tcp报文段的首部格式"><span>5.2、TCP报文段的首部格式</span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134443479.png" alt="image-20240711134443479" tabindex="0" loading="lazy"><figcaption>image-20240711134443479</figcaption></figure><h2 id="各字段的作用-1" tabindex="-1"><a class="header-anchor" href="#各字段的作用-1"><span>各字段的作用</span></a></h2><p>源端口和目的端口</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134503541.png" alt="image-20240711134503541" tabindex="0" loading="lazy"><figcaption>image-20240711134503541</figcaption></figure><p>序号、确认号和确认标志位</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134516270.png" alt="image-20240711134516270" tabindex="0" loading="lazy"><figcaption>image-20240711134516270</figcaption></figure><p>数据偏移、保留、窗口和校验和</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134541087.png" alt="image-20240711134541087" tabindex="0" loading="lazy"><figcaption>image-20240711134541087</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134603284.png" alt="image-20240711134603284" tabindex="0" loading="lazy"><figcaption>image-20240711134603284</figcaption></figure><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381281856.png" alt="1667381281856" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381292243.png" alt="1667381292243" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381303984.png" alt="1667381303984" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381314725.png" alt="1667381314725" loading="lazy"></p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381329339.png" alt="1667381329339" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381340262.png" alt="1667381340262" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381363263.png" alt="1667381363263" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381369190.png" alt="1667381369190" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381379709.png" alt="1667381379709" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381387881.png" alt="1667381387881" loading="lazy"></p><h5 id="最大报文段长度-mss" tabindex="-1"><a class="header-anchor" href="#最大报文段长度-mss"><span>最大报文段长度（MSS）</span></a></h5><h5 id="往返时间rtt" tabindex="-1"><a class="header-anchor" href="#往返时间rtt"><span>往返时间RTT</span></a></h5><h5 id="防止序号绕回paws" tabindex="-1"><a class="header-anchor" href="#防止序号绕回paws"><span>防止序号绕回PAWS</span></a></h5><h5 id="序号ack和确认序号seq" tabindex="-1"><a class="header-anchor" href="#序号ack和确认序号seq"><span>序号ACK和确认序号Seq</span></a></h5><p>Seq:就是我们常说的序号。对于要发送的数据的第一个序号而言这个序号是通过一个算法计算得到一个初始序号（ISN）加1。至于ISN怎么计算而来这里不讨论。这里我们以wireshark序号为准。假设某时序号为1000，简单的理解就是发送方告诉接收端“我发送的数据是从第1000开始的”。</p><p>ACK序号：就是我们常说的确认序号。确认序号是上一次已经成功接收到数据字节序号加1。还可以理解为接收端告诉发送端下一次想接收开始序号。假设某时确认序号为1000，简单的理解就是接收方告诉发送方“我已经收到第999序号了，我下一次想接收的数据是从1000开始的”。</p><p>窗口扩大选项：用来扩大窗口，提高吞吐率。</p><p>时间戳选项：</p><p>​ •用于计算往返时间RTT</p><p>​ •用于处理序号超范围的情况，又称为防止序号绕回PAWS。</p><p>选择确认选项：用来实现选择确认功能。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381397883.png" alt="1667381397883" tabindex="0" loading="lazy"><figcaption>1667381397883</figcaption></figure><p>同步标志位、终止标志位、复位标志位、推送标志位、紧急标志位和紧急指针</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134733148.png" alt="image-20240711134733148" tabindex="0" loading="lazy"><figcaption>image-20240711134733148</figcaption></figure><p>选项和填充</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134748102.png" alt="image-20240711134748102" tabindex="0" loading="lazy"><figcaption>image-20240711134748102</figcaption></figure><hr><h2 id="运输层端口号、复用与分用的概念" tabindex="-1"><a class="header-anchor" href="#运输层端口号、复用与分用的概念"><span>运输层端口号、复用与分用的概念</span></a></h2><h2 id="为什么用端口号" tabindex="-1"><a class="header-anchor" href="#为什么用端口号"><span>为什么用端口号</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667376639187.png" alt="1667376639187" tabindex="0" loading="lazy"><figcaption>1667376639187</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667380989020.png" alt="1667380989020" tabindex="0" loading="lazy"><figcaption>1667380989020</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134829336.png" alt="image-20240711134829336" tabindex="0" loading="lazy"><figcaption>image-20240711134829336</figcaption></figure><h2 id="发送方的复用和接收方的分用" tabindex="-1"><a class="header-anchor" href="#发送方的复用和接收方的分用"><span>发送方的复用和接收方的分用</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134843058.png" alt="image-20240711134843058" tabindex="0" loading="lazy"><figcaption>image-20240711134843058</figcaption></figure><blockquote><p><strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）<strong>发送</strong>数据称为 <strong>复用</strong></p><p><strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）<strong>接收</strong>时叫做 <strong>分用</strong>。</p></blockquote><h2 id="tcp-ip体系的应用层常用协议所使用的运输层熟知端口号" tabindex="-1"><a class="header-anchor" href="#tcp-ip体系的应用层常用协议所使用的运输层熟知端口号"><span>TCP/IP体系的应用层常用协议所使用的运输层熟知端口号</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134856908.png" alt="image-20240711134856908" tabindex="0" loading="lazy"><figcaption>image-20240711134856908</figcaption></figure><h2 id="运输层传输流程" tabindex="-1"><a class="header-anchor" href="#运输层传输流程"><span>运输层传输流程</span></a></h2><p>举例</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134908104.png" alt="image-20240711134908104" tabindex="0" loading="lazy"><figcaption>image-20240711134908104</figcaption></figure><blockquote><p>在浏览器输入域名，回车浏览</p><p>然后用户PC中的DNS客户端进程会发送一个DNS查询请求报文</p><p>DNS查询请求报文需要使用运输层的UDP协议</p><p>首部中的源端口字段的值，在短暂端口号49151~65535中挑选一个未被占用的，用来表示DNS客户端进程</p><p>首部中的目的端口字段的值：53，是DNS服务器端进程所使用的熟知端口号</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134923506.png" alt="image-20240711134923506" tabindex="0" loading="lazy"><figcaption>image-20240711134923506</figcaption></figure><blockquote><p>之后，将UDP用户数据报封装在IP数据报中，通过以太网发送给DNS服务器</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134934296.png" alt="image-20240711134934296" tabindex="0" loading="lazy"><figcaption>image-20240711134934296</figcaption></figure><blockquote><p>DNS服务器收到该IP数据报后，从中解封出UDP用户数据报</p><p>UDP首部中的目的端口号为53，这表明应将该UDP用户数据报的数据载荷部分，也就是DNS查询请求报文，交付给本服务器中的DNS服务器端进程</p><p>DNS服务器端进程解析DNS查询请求报文的内容，然后按其要求查找对应的IP地址</p><p>之后，会给用户PC发送DNS响应报文，DNS响应报文需要使用运输层的UDP协议封装成UDP用户数据报</p><p>其首部中的源端口字段的值设置为熟知端口号53，表明这是DNS服务器端进程所发送的UDP用户数据报，目的端口的值设置为49152，这是之前用户PC中发送DNS查询请求报文的DNS客户端进程所使用的短暂端口号</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134947448.png" alt="image-20240711134947448" tabindex="0" loading="lazy"><figcaption>image-20240711134947448</figcaption></figure><blockquote><p>将UDP用户数据报封装在IP数据报中，通过以太网发送给用户PC</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134956692.png" alt="image-20240711134956692" tabindex="0" loading="lazy"><figcaption>image-20240711134956692</figcaption></figure><blockquote><p>用户PC收到该数据报后，从中解封出UDP用户数据报</p><p>UDP首部中的目的端口号为49152，这表明应将该UDP用户数据报的数据载荷部分，也就是DNS响应报文，交付给用户PC中的DNS客户端进程</p><p>DNS客户端进程解析DNS响应报文的内容，就可知道自己之前所请求的Web服务器的域名对应的IP地址</p></blockquote><p>现在用户PC中的HTTP客户端进程可以向Web服务器发送HTTP请求报文（和DNS发送和接收流程差不多）</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135014517.png" alt="image-20240711135014517" tabindex="0" loading="lazy"><figcaption>image-20240711135014517</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135023459.png" alt="image-20240711135023459" tabindex="0" loading="lazy"><figcaption>image-20240711135023459</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135031226.png" alt="image-20240711135031226" tabindex="0" loading="lazy"><figcaption>image-20240711135031226</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135048325.png" alt="image-20240711135048325" tabindex="0" loading="lazy"><figcaption>image-20240711135048325</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135057507.png" alt="image-20240711135057507" tabindex="0" loading="lazy"><figcaption>image-20240711135057507</figcaption></figure><hr><h1 id="_5-3、udp和tcp的对比" tabindex="-1"><a class="header-anchor" href="#_5-3、udp和tcp的对比"><span>5.3、UDP和TCP的对比</span></a></h1><h2 id="概念-6" tabindex="-1"><a class="header-anchor" href="#概念-6"><span>概念</span></a></h2><ul><li><strong>UDP</strong> 和 <strong>TCP</strong> 是TCP/IP体系结构<strong>运输层</strong>中的两个重要协议</li><li>当运输层采用面向连接的 <strong>TCP</strong> 协议时，尽管下面的网络是不可靠的（只提供尽最大努力服务），但这种逻辑通信信道就相当于一条<strong>全双工的可靠信道</strong>。</li><li>当运输层采用无连接的 <strong>UDP</strong> 协议时，这种逻辑通信信道是一条<strong>不可靠信道</strong>。</li></ul><p>可靠信道与不可靠信道</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135107133.png" alt="image-20240711135107133" tabindex="0" loading="lazy"><figcaption>image-20240711135107133</figcaption></figure><ul><li>两个对等运输实体在通信时传送的数据单位叫作<strong>运输协议数据单元</strong> TPDU (Transport Protocol Data Unit)。</li><li>TCP 传送的数据单位协议是 <strong>TCP 报文段</strong>(segment)。</li><li>UDP 传送的数据单位协议是 <strong>UDP 报文</strong>或<strong>用户数据报</strong>。</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135124752.png" alt="image-20240711135124752" tabindex="0" loading="lazy"><figcaption>image-20240711135124752</figcaption></figure><p>UDP的通信是无连接的，不需要套接字（Socket）</p><p>TCP是面向连接的，TCP之间的通信必须要在两个套接字（Socket）之间建立连接</p><h2 id="用户数据报协议udp-user-datagram-protocol" tabindex="-1"><a class="header-anchor" href="#用户数据报协议udp-user-datagram-protocol"><span>用户数据报协议UDP（User Datagram Protocol）</span></a></h2><p>可以发送广播</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135136533.png" alt="image-20240711135136533" tabindex="0" loading="lazy"><figcaption>image-20240711135136533</figcaption></figure><p>可以向某个多播组发送多播</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135149480.png" alt="image-20240711135149480" tabindex="0" loading="lazy"><figcaption>image-20240711135149480</figcaption></figure><p>还可以发送单播</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135202401.png" alt="image-20240711135202401" tabindex="0" loading="lazy"><figcaption>image-20240711135202401</figcaption></figure><blockquote><p>UDP 支持单播、多播以及广播</p><p>换句话说，UDP支持一对一，一对多，以及一对全的通信</p></blockquote><p>运输过程</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135218012.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>UDP对应用进程交下来的报文既不合并也不拆分，而是保留这些报文的边界</p><p>换句话说，UDP是面向应用报文的</p></blockquote><p>UDP向上层提供无连接不可靠传输服务</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135228954.png" alt="image-20240711135228954" tabindex="0" loading="lazy"><figcaption>image-20240711135228954</figcaption></figure><p>UDP结构</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135249451.png" alt="image-20240711135249451" tabindex="0" loading="lazy"><figcaption>image-20240711135249451</figcaption></figure><h2 id="传输控制协议tcp-transmission-control-protocol" tabindex="-1"><a class="header-anchor" href="#传输控制协议tcp-transmission-control-protocol"><span>传输控制协议TCP（Transmission Control Protocol）</span></a></h2><p>使用TCP协议的通信双方，在进行数据传输之前，必须使用“三报文握手”建立TCP连接</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135258254.png" alt="image-20240711135258254" tabindex="0" loading="lazy"><figcaption>image-20240711135258254</figcaption></figure><p>TCP连接建立成功后，通信双方之间就好像有一条可靠的通信信道，通信双方使用这条基于TCP连接的可靠信道进行通信</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135307605.png" alt="image-20240711135307605" tabindex="0" loading="lazy"><figcaption>image-20240711135307605</figcaption></figure><blockquote><p>很显然，TCP仅支持单播，也就是一对一的通信</p></blockquote><p>运输过程</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135320493.png" alt="image-20240711135320493" tabindex="0" loading="lazy"><figcaption>image-20240711135320493</figcaption></figure><blockquote><p>发送方</p><ul><li><p>TCP会把应用进程交付下来的数据块看作是一连串无结构的字节流，TCP并不知道这些待传送的字节流的含义</p></li><li><p>并将他们编号，并存储在自己发送缓存中</p></li><li><p>TCP会根据发送策略，提取一定量的字节构建TCP报文并发送</p></li></ul><p>接收方</p><ul><li><p>一方面从所接受到的TCP报文段中，取出数据载荷部分并存储在接收缓存中；一方面将接收缓存中的一些字节交付给应用进程</p></li><li><p>TCP不保证接收方应用进程所收到的数据块与发送方发送的数据块，具有对应大小的关系（例如，发送方应用进程交给发送方的TCP共10个数据块，但接收方的TCP可能只用了4个数据块，就把收到的字节流交付给了上层的应用进程，但接收方收到的字节流必须和发送方应用进程发出的字节流完全一样）</p></li><li><p>接收方的应用进程必须有能力识别收到的字节流，把它还原成有意义的应用层数据</p></li></ul><p>TCP是面向字节流的，这正是TCP实现可靠传输、流量控制、以及拥塞控制的基础</p><p>本图只画了一个方向的数据流，在实际网络中，基于TCP连接的两端，可以同时进行TCP报文段的发送和接收</p></blockquote><p>TCP向上层提供面向连接的可靠传输服务</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135335781.png" alt="image-20240711135335781" tabindex="0" loading="lazy"><figcaption>image-20240711135335781</figcaption></figure><p>TCP结构</p><figure><img src="" alt="image-20240711135349710" tabindex="0" loading="lazy"><figcaption>image-20240711135349710</figcaption></figure><h2 id="总结-14" tabindex="-1"><a class="header-anchor" href="#总结-14"><span>总结</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135359402.png" alt="image-20240711135359402" tabindex="0" loading="lazy"><figcaption>image-20240711135359402</figcaption></figure><hr><h1 id="_5-4、tcp的流量控制" tabindex="-1"><a class="header-anchor" href="#_5-4、tcp的流量控制"><span>5.4、TCP的流量控制</span></a></h1><h2 id="概念-7" tabindex="-1"><a class="header-anchor" href="#概念-7"><span>概念</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135408827.png" alt="image-20240711135408827" tabindex="0" loading="lazy"><figcaption>image-20240711135408827</figcaption></figure><p>举例</p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1c4411d7jb%3Fp%3D60" target="_blank" rel="noopener noreferrer">具体流程的视频</a></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135418634.png" alt="image-20240711135418634" tabindex="0" loading="lazy"><figcaption>image-20240711135418634</figcaption></figure><p>上图主机A现在可将发送缓存中序号1~200的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135427945.png" alt="image-20240711135427945" tabindex="0" loading="lazy"><figcaption>image-20240711135427945</figcaption></figure><p>上图主机A现在可将发送缓存中序号201~500的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135436637.png" alt="image-20240711135436637" tabindex="0" loading="lazy"><figcaption>image-20240711135436637</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135446264.png" alt="image-20240711135446264" tabindex="0" loading="lazy"><figcaption>image-20240711135446264</figcaption></figure><p>上图主机A现在可将发送缓存中序号501~600的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135459316.png" alt="image-20240711135459316" tabindex="0" loading="lazy"><figcaption>image-20240711135459316</figcaption></figure><p><strong>实际上TCP规定：即使接收窗口值为0，也必须接受零窗口探测报文段、确认报文段以及携带有紧急数据的报文段。</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135510133.png" alt="image-20240711135510133" tabindex="0" loading="lazy"><figcaption>image-20240711135510133</figcaption></figure><blockquote><p>上图如果零窗口探测报文在发送过程中如果丢失，还是能打破死锁局面</p><p>因为零窗口探测报文段也有重传计时器，重传计时器超时后，零窗口探测报文段会被重传</p></blockquote><h2 id="总结-15" tabindex="-1"><a class="header-anchor" href="#总结-15"><span>总结</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135519519.png" alt="image-20240711135519519" tabindex="0" loading="lazy"><figcaption>image-20240711135519519</figcaption></figure><hr><h1 id="_5-5、tcp的拥塞控制" tabindex="-1"><a class="header-anchor" href="#_5-5、tcp的拥塞控制"><span>5.5、TCP的拥塞控制</span></a></h1><h2 id="概念-8" tabindex="-1"><a class="header-anchor" href="#概念-8"><span>概念</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135531763.png" alt="image-20240711135531763" tabindex="0" loading="lazy"><figcaption>image-20240711135531763</figcaption></figure><p><strong>网络拥塞往往是由许多因素引起的。例如：</strong></p><ol><li>点缓存的容量太小；</li><li>链路的容量不足；</li><li>处理机处理的速率太慢；</li><li>拥塞本身会进一步加剧拥塞；</li></ol><p><strong>拥塞控制的一般原理</strong></p><ul><li>拥塞控制的前提：网络能够承受现有的网络负荷。</li><li>实践证明，拥塞控制是很难设计的，因为它是一个<strong>动态问题</strong>。</li><li>分组的丢失是网络发生拥塞的<strong>征兆</strong>而不是原因。</li><li>在许多情况下，甚至正是<strong>拥塞控制本身</strong>成为引起网络性能恶化、甚至发生死锁的原因。</li></ul><p><strong>开环控制和闭环控制</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135555067.png" alt="image-20240711135555067" tabindex="0" loading="lazy"><figcaption>image-20240711135555067</figcaption></figure><p><strong>监测网络的拥塞</strong></p><p>主要指标有：</p><ol><li>由于缺少缓存空间而被丢弃的分组的百分数；</li><li>平均队列长度；</li><li>超时重传的分组数；</li><li>平均分组时延；</li><li>分组时延的标准差，等等。</li></ol><p>上述这些指标的上升都标志着拥塞的增长。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667456595891.png" alt="1667456595891" tabindex="0" loading="lazy"><figcaption>1667456595891</figcaption></figure><h2 id="拥塞控制的算法" tabindex="-1"><a class="header-anchor" href="#拥塞控制的算法"><span>拥塞控制的算法</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135636714.png" alt="image-20240711135636714" tabindex="0" loading="lazy"><figcaption>image-20240711135636714</figcaption></figure><p><strong>TCP最大报文段长度MSS，并不是指整个TCP报文段的长度，而是指TCP报文段的数据载荷的长度。</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135651288.png" alt="image-20240711135651288" tabindex="0" loading="lazy"><figcaption>image-20240711135651288</figcaption></figure><blockquote><p>真正的发送窗口值 = Min (接收方窗口值，拥塞窗口值)</p></blockquote><p>下图的实例横纵坐标的意思</p><p>传输轮次：</p><ul><li>发送方给接收方发送数据报文段后，接收方给发送方发发回相应的确认报文段</li><li>一个传输轮次所经历的时间其实就是往返时间，往返时间并非是恒定的数值</li><li>使用传输轮次是为了强调把拥塞窗口所允许发送的报文段都连续发送出去，并受到了对已发送的最后一个报文段的确认</li></ul><p>拥塞窗口：</p><ul><li>它会随网络拥塞程度，以及所使用的拥塞控制算法动态变化</li></ul><h3 id="慢开始和拥塞避免" tabindex="-1"><a class="header-anchor" href="#慢开始和拥塞避免"><span>慢开始和拥塞避免</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667457213426.png" alt="1667457213426" tabindex="0" loading="lazy"><figcaption>1667457213426</figcaption></figure><h6 id="接收方的接收窗口rwnd" tabindex="-1"><a class="header-anchor" href="#接收方的接收窗口rwnd"><span>接收方的接收窗口rwnd</span></a></h6><h4 id="慢开始-slow-start" tabindex="-1"><a class="header-anchor" href="#慢开始-slow-start"><span>慢开始（slow-start）</span></a></h4><ul><li>目的：用来确定网络的负载能力或拥塞程度。</li><li>算法的思路：由小到大逐渐增大拥塞窗口数值。</li><li>两个变量： <ul><li><strong>拥塞窗口（cwnd）</strong>：初始拥塞窗口值：2 种设置方法。窗口值逐渐增大。 <ul><li>1 至 2 个最大报文段 （旧标准）</li><li>2 至 4 个最大报文段 （RFC 5681）</li></ul></li><li><strong>慢开始门限（ssthresh）</strong>：防止拥塞窗口增长过大引起网络拥塞。</li></ul></li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135710219.png" alt="image-20240711135710219" tabindex="0" loading="lazy"><figcaption>image-20240711135710219</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135719074.png" alt="image-20240711135719074" tabindex="0" loading="lazy"><figcaption>image-20240711135719074</figcaption></figure><blockquote><p>图中swnd是发送窗口</p><p>每经过一个传输轮次，拥塞窗口就加倍</p><p>窗口大小按<strong>指数增加</strong>，2的n-1次方</p></blockquote><h4 id="拥塞避免-congestion-avoidance" tabindex="-1"><a class="header-anchor" href="#拥塞避免-congestion-avoidance"><span>拥塞避免（congestion avoidance）</span></a></h4><ul><li>思路：让拥塞窗口 cwnd <strong>缓慢地增大</strong>，避免出现拥塞。</li><li>每经过一个传输轮次，拥塞窗口 <strong>cwnd = cwnd + 1</strong>。</li><li>使拥塞窗口 cwnd 按线性规律缓慢增长。</li><li>在拥塞避免阶段，具有 “<strong>加法增大</strong>” (Additive Increase) 的特点。</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135731718.png" alt="image-20240711135731718" tabindex="0" loading="lazy"><figcaption>image-20240711135731718</figcaption></figure><p>如果在发送过程中出现部分报文段丢失，这必然会造成发送方对这些丢失报文段的超时重传</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135740853.png" alt="image-20240711135740853" tabindex="0" loading="lazy"><figcaption>image-20240711135740853</figcaption></figure><p>这个时候又回到了慢开始</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135748262.png" alt="image-20240711135748262" tabindex="0" loading="lazy"><figcaption>image-20240711135748262</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135757902.png" alt="image-20240711135757902" tabindex="0" loading="lazy"><figcaption>image-20240711135757902</figcaption></figure><h4 id="两个算法完整示意图" tabindex="-1"><a class="header-anchor" href="#两个算法完整示意图"><span>两个算法完整示意图</span></a></h4><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135810864.png" alt="image-20240711135810864" tabindex="0" loading="lazy"><figcaption>image-20240711135810864</figcaption></figure><h3 id="快重传和快恢复" tabindex="-1"><a class="header-anchor" href="#快重传和快恢复"><span>快重传和快恢复</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135825877.png" alt="image-20240711135825877" tabindex="0" loading="lazy"><figcaption>image-20240711135825877</figcaption></figure><h4 id="快重传-fast-retrasmit" tabindex="-1"><a class="header-anchor" href="#快重传-fast-retrasmit"><span>快重传（fast retrasmit）</span></a></h4><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135835070.png" alt="image-20240711135835070" tabindex="0" loading="lazy"><figcaption>image-20240711135835070</figcaption></figure><h4 id="快恢复-fast-recovery" tabindex="-1"><a class="header-anchor" href="#快恢复-fast-recovery"><span>快恢复（fast recovery）</span></a></h4><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135843881.png" alt="image-20240711135843881" tabindex="0" loading="lazy"><figcaption>image-20240711135843881</figcaption></figure><h4 id="改进后的整体算法的示意图" tabindex="-1"><a class="header-anchor" href="#改进后的整体算法的示意图"><span>改进后的整体算法的示意图</span></a></h4><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135850788.png" alt="image-20240711135850788" tabindex="0" loading="lazy"><figcaption>image-20240711135850788</figcaption></figure><h5 id="tcp拥塞控制与网际层拥塞控制的关系" tabindex="-1"><a class="header-anchor" href="#tcp拥塞控制与网际层拥塞控制的关系"><span>TCP拥塞控制与网际层拥塞控制的关系</span></a></h5><h5 id="随机早期丢弃策略red" tabindex="-1"><a class="header-anchor" href="#随机早期丢弃策略red"><span>随机早期丢弃策略RED</span></a></h5><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667457290051.png" alt="1667457290051" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667457310694.png" alt="1667457310694" loading="lazy"></p><hr><h1 id="_5-6、tcp超时重传时间-rto-的选择" tabindex="-1"><a class="header-anchor" href="#_5-6、tcp超时重传时间-rto-的选择"><span>5.6、TCP超时重传时间（RTO）的选择</span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135909411.png" alt="image-20240711135909411" tabindex="0" loading="lazy"><figcaption>image-20240711135909411</figcaption></figure><blockquote><p>如果超时重传时间RTO的值设置得比RTT0的值小很多，这会引起报文段不必要的重传，使网络负荷增大</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135918810.png" alt="image-20240711135918810" tabindex="0" loading="lazy"><figcaption>image-20240711135918810</figcaption></figure><blockquote><p>如果超时重传时间RTO的值设置得远大于RTT0的值，这会使重传时间推迟的太长，使网络的空闲时间增大，降低传输效率</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135927766.png" alt="image-20240711135927766" tabindex="0" loading="lazy"><figcaption>image-20240711135927766</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135936238.png" alt="image-20240711135936238" tabindex="0" loading="lazy"><figcaption>image-20240711135936238</figcaption></figure><p><strong>RFC6298建议使用下式计算超时重传时间RTO</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135943659.png" alt="image-20240711135943659" tabindex="0" loading="lazy"><figcaption>image-20240711135943659</figcaption></figure><p><strong>往返时间RTT的测量比较复杂</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135952433.png" alt="image-20240711135952433" tabindex="0" loading="lazy"><figcaption>image-20240711135952433</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140001363.png" alt="image-20240711140001363" tabindex="0" loading="lazy"><figcaption>image-20240711140001363</figcaption></figure><p><strong>TCP超时重传的计算</strong></p><p>举例</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140010329.png" alt="image-20240711140010329" tabindex="0" loading="lazy"><figcaption>image-20240711140010329</figcaption></figure><p><strong>总结</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140021799.png" alt="image-20240711140021799" tabindex="0" loading="lazy"><figcaption>image-20240711140021799</figcaption></figure><hr><h1 id="_5-7、tcp可靠传输的实现" tabindex="-1"><a class="header-anchor" href="#_5-7、tcp可靠传输的实现"><span>5.7、TCP可靠传输的实现</span></a></h1><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1c4411d7jb%3Fp%3D63" target="_blank" rel="noopener noreferrer">本集具体讲解</a></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140037288.png" alt="image-20240711140037288" tabindex="0" loading="lazy"><figcaption>image-20240711140037288</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140046369.png" alt="image-20240711140046369" tabindex="0" loading="lazy"><figcaption>image-20240711140046369</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140052790.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h1 id="_5-8、tcp的运输连接管理" tabindex="-1"><a class="header-anchor" href="#_5-8、tcp的运输连接管理"><span>5.8、TCP的运输连接管理</span></a></h1><h2 id="概念-9" tabindex="-1"><a class="header-anchor" href="#概念-9"><span>概念</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140103018.png" alt="image-20240711140103018" tabindex="0" loading="lazy"><figcaption>image-20240711140103018</figcaption></figure><h2 id="tcp的连接建立" tabindex="-1"><a class="header-anchor" href="#tcp的连接建立"><span>TCP的连接建立</span></a></h2><ul><li>TCP 建立连接的过程叫做<strong>握手</strong>。</li><li>握手需要在客户和服务器之间交换三个 TCP 报文段。称之为<strong>三报文握手</strong>。</li><li>采用<strong>三报文握手</strong>主要是为了防止已失效的连接请求报文段突然又传送到了，因而产生错误。</li></ul><h3 id="tcp的连接建立要解决以下三个问题" tabindex="-1"><a class="header-anchor" href="#tcp的连接建立要解决以下三个问题"><span>TCP的连接建立要解决以下三个问题</span></a></h3><figure><img src="https:////upload-images.jianshu.io/upload_images/24878825-84c2b6dbb20379bd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="tcp使用-三报文握手-建立连接" tabindex="-1"><a class="header-anchor" href="#tcp使用-三报文握手-建立连接"><span>TCP使用“三报文握手”建立连接</span></a></h3><ul><li>TCP 连接的建立<strong>采用客户服务器方式</strong>。</li><li>主动发起连接建立的应用进程叫做<strong>TCP客户</strong> (client)。</li><li>被动等待连接建立的应用进程叫做<strong>TCP服务器</strong> (server)。</li></ul><p>“握手”需要在TCP客户端和服务器之间交换三个TCP报文段</p><p>过程</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140113717.png" alt="image-20240711140113717" tabindex="0" loading="lazy"><figcaption>image-20240711140113717</figcaption></figure><blockquote><p>最初两端的TCP进程都处于关闭状态</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140126706.png" alt="image-20240711140126706" tabindex="0" loading="lazy"><figcaption>image-20240711140126706</figcaption></figure><blockquote><p>一开始，TCP服务器进程首先创建传输控制块，用来存储TCP连接中的一些重要信息。例如TCP连接表、指向发送和接收缓存的指针、指向重传队列的指针，当前的发送和接收序号等</p><p>之后，就准备接受TCP客户端进程的连接请求</p><p>此时，TCP服务器进程就进入监听状态，等待TCP客户端进程的连接请求</p></blockquote><p>TCP服务器进程是被动等待来自TCP客户端进程的连接请求，因此成为<strong>被动打开</strong>连接</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140139175.png" alt="image-20240711140139175" tabindex="0" loading="lazy"><figcaption>image-20240711140139175</figcaption></figure><blockquote><p>TCP客户进程也是首先创建传输控制块</p></blockquote><p>由于TCP连接建立是由TCP客户端主动发起的，因此称为<strong>主动打开</strong>连接</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140145464.png" alt="image-20240711140145464" tabindex="0" loading="lazy"><figcaption>image-20240711140145464</figcaption></figure><blockquote><p>然后，在打算建立TCP连接时，向TCP服务器进程发送TCP连接请求报文段，并进入同步已发送状态</p><p>TCP连接请求报文段首部中</p><ul><li><p>同步位SYN被设置为1，表明这是一个TCP连接请求报文段</p></li><li><p>序号字段seq被设置了一个初始值x，作为TCP客户端进程所选择的初始序号</p></li></ul><p>请注意：TCP规定SYN被设置为1的报文段不能携带数据，但要消耗掉一个序号</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140154476.png" alt="image-20240711140154476" tabindex="0" loading="lazy"><figcaption>image-20240711140154476</figcaption></figure><blockquote><p>TCP服务器进程收到TCP连接请求报文段后，如果同意建立连接，则向TCP客户进程发送TCP连接请求确认报文段，并进入同步已接收状态</p><p>TCP连接请求确认报文段首部中</p><ul><li><p>同步位SYN和确认为ACK都设置为1，表明这是一个TCP连接请求确认报文段</p></li><li><p>序号字段seq被设置了一个初始值y，作为TCP服务器进程所选择的初始序号，</p></li><li><p>确认号字段ack的值被设置成了x+1，这是对TCP客户进程所选择的初始序号（seq）的确认</p></li></ul><p>请注意：这个报文段也不能携带数据，因为它是SYN被设置为1的报文段，但同样要消耗掉一个序号</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140205702.png" alt="image-20240711140205702" tabindex="0" loading="lazy"><figcaption>image-20240711140205702</figcaption></figure><blockquote><p>TCP客户进程收到TCP连接请求确认报文段后，还要向TCP服务器进程发送一个普通的TCP确认报文段，并进入连接已连接状态</p><p>普通的TCP确认报文段首部中</p><ul><li><p>确认位ACK被设置为1，表明这是一个普通的TCP确认报文段</p></li><li><p>序号字段seq被设置为x+1，这是因为TCP客户进程发送的第一个TCP报文段的序号为x，所以TCP客户进程发送的第二个报文段的序号为x+1</p></li><li><p>确认号字段ack被设置为y+1，这是对TCP服务器进程所选择的初始序号的确认</p></li></ul><p>请注意：TCP规定普通的TCP确认报文段可以携带数据，但如果不携带数据，则不消耗序号</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140215771.png" alt="image-20240711140215771" tabindex="0" loading="lazy"><figcaption>image-20240711140215771</figcaption></figure><blockquote><p>TCP服务器进程收到该确认报文段后也进入连接已建立状态</p><p>现在，TCP双方都进入了连接已建立状态，它们可以基于已建立好的TCP连接，进行可靠的数据传输</p></blockquote><p>为什么TCP客户进程最后还要发送一个普通的TCP确认报文段？能否使用“两报文握手”建立连接？</p><p>下图实例是“两报文握手”</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140221679.png" alt="image-20240711140221679" tabindex="0" loading="lazy"><figcaption>image-20240711140221679</figcaption></figure><blockquote><p>为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误”，这种情况是：一端(client)A发出去的第一个连接请求报文并没有&gt; 丢失，而是因为某些未知的原因在某个网络节点上发生滞留，导致延迟到连接释放以后的某个时间才到达另一端(server)B。本来这是一个早已失效的报文段，但是B收到此失效的报文之后，会误认为是A再次发出的一个新的连接请求，于是B端就向A又发出确认报文，表示同&gt;意建立连接。如果不采用“三次握手”，那么只要B端发出确认报文就会认为新的连接已经建立了，但是A端并没有发出建立连接的请求，因此不会去向B端发送数据，B端没有收到数据就会一直等待，这样B端就会白白浪费掉很多资源。 所以并不<strong>多余</strong>，这是为了防止已失效的连接请求报文段突然又传送到了TCP服务器，因而导致错误</p></blockquote><h3 id="总结-16" tabindex="-1"><a class="header-anchor" href="#总结-16"><span>总结</span></a></h3><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667383413616.png" alt="1667383413616" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667383426851.png" alt="1667383426851" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667383439824.png" alt="1667383439824" loading="lazy"></p><h2 id="tcp的连接释放" tabindex="-1"><a class="header-anchor" href="#tcp的连接释放"><span>TCP的连接释放</span></a></h2><ul><li>TCP 连接释放过程比较复杂。</li><li>数据传输结束后，通信的双方都可释放连接。</li><li>TCP 连接释放过程是<strong>四报文握手</strong>。</li></ul><h3 id="tcp通过-四报文挥手-来释放连接" tabindex="-1"><a class="header-anchor" href="#tcp通过-四报文挥手-来释放连接"><span>TCP通过“四报文挥手”来释放连接</span></a></h3><ul><li>TCP 连接的建立<strong>采用客户服务器方式</strong>。</li><li>主动发起连接建立的应用进程叫做<strong>TCP客户</strong> (client)。</li><li>被动等待连接建立的应用进程叫做<strong>TCP服务器</strong> (server)。</li><li><strong>任何一方都可以在数据传送结束后发出连接释放的通知</strong></li></ul><p>过程</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140239564.png" alt="image-20240711140239564" tabindex="0" loading="lazy"><figcaption>image-20240711140239564</figcaption></figure><blockquote><p>现在TCP客户进程和TCP服务器进程都处于连接已建立状态</p><p>TCP客户进程的应用进程通知其主动关闭TCP连接</p><p>TCP客户进程会发送TCP连接释放报文段，并进入终止等待1状态</p><p>TCP连接释放报文段首部中</p><ul><li><p>终止位FIN和确认为ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认</p></li><li><p>序号seq字段的值设置为u，它等于TCP客户进程之前已传送过的数据的最后一个字节的序号加1</p></li><li><p>确认号ack字段的值设置为v，它等于TCP客户进程之前已收到的、数据的最后一个字节的序号加1</p></li></ul><p>请注意：TCP规定终止位FIN等于1的报文段即使不携带数据，也要消耗掉一个序号</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140246552.png" alt="image-20240711140246552" tabindex="0" loading="lazy"><figcaption>image-20240711140246552</figcaption></figure><blockquote><p>TCP服务器进程收到TCP连接释放报文段后，会发送一个普通的TCP确认报文段并进入关闭等待状态</p><p>普通的TCP确认报文段首部中</p><ul><li><p>确认位ACK的值被设置为1，表明这是一个普通的TCP确认报文段</p></li><li><p>序号seq字段的值设置为v，它等于TCP服务器进程之前已传送过的数据的最后一个字节的序号加1，这也与之前收到的TCP连接释放报文段中的确认号匹配</p></li><li><p>确认号ack字段的值设置为u+1，这是对TCP连接释放报文段的确认</p></li></ul></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140253270.png" alt="image-20240711140253270" tabindex="0" loading="lazy"><figcaption>image-20240711140253270</figcaption></figure><blockquote><p>TCP服务器进程应该通知高层应用进程，TCP客户进程要断开与自己的TCP连接</p><p>此时，从TCP客户进程到TCP服务器进程这个方向的连接就释放了</p><p>这时的TCP连接属于半关闭状态，也就是TCP客户进程已经没有数据要发送了</p><p>但如果TCP服务器进程还有数据要发送，TCP客户进程仍要接收，也就是说从TCP服务器进程到TCP客户进程这个方向的连接并未关闭</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140303176.png" alt="image-20240711140303176" tabindex="0" loading="lazy"><figcaption>image-20240711140303176</figcaption></figure><blockquote><p>TCP客户进程收到TCP确认报文段后就进入终止等待2状态，等待TCP服务器进程发出的TCP连接释放报文段</p><p>若使用TCP服务器进程的应用进程已经没有数据要发送了，应用进程就通知其TCP服务器进程释放连接</p><p>由于TCP连接释放是由TCP客户进程主动发起的，因此TCP服务器进程对TCP连接的释放称为被动关闭连接</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140309246.png" alt="image-20240711140309246" tabindex="0" loading="lazy"><figcaption>image-20240711140309246</figcaption></figure><blockquote><p>TCP服务器进程发送TCP连接释放报文段并进入最后确认状态</p><p>该报文段首部中</p><ul><li><p>终止位FIN和确认位ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认</p></li><li><p>序号seq字段的值为w，这是因为在半关闭状态下，TCP服务器进程可能又发送</p></li><li><p>确认号ack字段的值为u+1，这是对之前收到的TCP连接释放报文段的重复确认</p></li></ul></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140315235.png" alt="image-20240711140315235" tabindex="0" loading="lazy"><figcaption>image-20240711140315235</figcaption></figure><blockquote><p>TCP客户进程收到TCP连接释放报文段后，必须针对该报文段发送普通的TCP确认报文段，之后进入时间等待状态</p><p>该报文段首部中</p><ul><li><p>确认为ACK的值被设置为1，表明这是一个普通的TCP确认报文段</p></li><li><p>序号seq字段的值设置为u+1，这是因为TCP客户进程之前发送的TCP连接释放报文段虽然不携带数据，但要消耗掉一个序号</p></li><li><p>确认号ack字段的值设置为w+1，这是对所收到的TCP连接释放报文段的确认</p></li></ul><p>TCP服务器进程收到该报文段后就进入关闭状态，而TCP客户进程还要进过2MSL后才能进入关闭状态</p></blockquote><p>TCP客户进程在发送完最后一个确认报文后，为什么不直接进入关闭状态？而是要进入时间等待状态？</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140322621.png" alt="image-20240711140322621" tabindex="0" loading="lazy"><figcaption>image-20240711140322621</figcaption></figure><blockquote><p>因为时间等待状态以及处于该状态2MSL时长，可以确保TCP服务器进程可以收到最后一个TCP确认报文段而进入关闭状态</p><p>另外，TCP客户进程在发送完最后一个TCP确认报文段后，在经过2MSL时长，就可以使本次连接持续时间内所产生的所有报文段都从网络中消失，这样就可以使下一个新的TCP连接中，不会出现旧连接中的报文段</p></blockquote><h3 id="tcp保活计时器的作用" tabindex="-1"><a class="header-anchor" href="#tcp保活计时器的作用"><span>TCP保活计时器的作用</span></a></h3><p>TCP双方已经建立了连接，后来，TCP客户进程所在的主机突然出现了故障</p><p>TCP服务器进程以后就不能再收到TCP客户进程发来的数据</p><p>因此，应当有措施使TCP服务器进程不要再白白等待下去</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140328600.png" alt="image-20240711140328600" tabindex="0" loading="lazy"><figcaption>image-20240711140328600</figcaption></figure><h1 id="_5-9tcp的连接确认" tabindex="-1"><a class="header-anchor" href="#_5-9tcp的连接确认"><span>5.9TCP的连接确认</span></a></h1><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667464800635.png" alt="1667464800635" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667464808648.png" alt="1667464808648" loading="lazy"></p><p>1、若主机甲与主机乙已建立一条TCP连接，最大段长MSS为1KB，往返时间RTT为1ms，则在不出现拥塞的前提下，拥塞窗口从8KB增长到11KB所需的最长时间是()</p><p>A.1ms B.2ms C.3ms D.4ms 解析：TCP拥塞控慢开始，加法增大，快重传，快恢复。 由于慢开始门限ssthresh可以根据需求设置，为了得到最长时间，可以把门限设置的小于8KB，这样只要不出现拥塞，一开始到后面都是加法增大（每经历一个传输轮次（RTT），拥塞窗口逐次加1）。 因此(11 - 8) * 1ms = 3 ms。</p><p>2、主机甲与主机乙之间已建立一个TCP连接，双方持续有数据传输，且数据无差错与丢失。若甲收到1个来自乙的TCP段，该段的序号为2020、确认号为1166、有效载荷为300字节，则甲立即发送给乙的TCP段的序号和确认号分别是()</p><p>A.1166，2319 B.1166，2320 C.\uFEFF1167，2319 D.1167，2320 解析： 若甲收到1个来自乙的TCP段，该段的序号seq=2020、确认序号ack=1166、有效载荷为300字节，则甲立即发送给乙的TCP段的序号seq1=ack=1166和确认序号ack1=seq+300=2320。</p><p>3、若主机甲主动发起一个和主机乙的TCP连接，甲、乙选择的初始序号分别为2020和1666，则第三次握手TCP段的确认序号是()</p><p>A.2019 B.2020 C.1666 D.1667 解析：第三次握手的TCP段由甲发出，在接收到乙发来的序号1666后，甲应该发出确认号1666+1=1667。</p><p>4、‌下列关于UDP协议的叙述中，正确的是()</p><p>‌I. 是TCP/IP参考模型网际层中的协议 ‌II. 提供无连接服务 ‌III. 通过差错校验，保证可靠数据传输 ‌IV. 提供复用/分用服务</p><p>A.仅I B.仅I、III C.仅II、IV D.I、II、III、IV 解析： UDP协议是TCP/IP参考模型运输层中的协议，叙述I错误； UDP协议向上提供的是无连接的不可靠传输服务，叙述II正确； UDP协议虽然有差错校验机制，但仅仅是检查数据报在传输过程中是否出现误码，误码的数据报直接丢弃，并没有重传机制，不能保证可靠传输，叙述III错误； UDP协议使用端口来区分不同的应用进程，进而为应用进程提供复用/分用服务，叙述IV正确。</p><p>5、若甲向乙发起一个TCP连接，最大段长MSS=1KB，RTT=8ms，乙开辟的接收缓存为32KB，则甲从连接建立成功至发送窗口达到16KB，需经过的时间至少是()</p><p>A.16ms B.32ms C.64ms D.128ms 解析：按照慢开始算法，发送窗口=min{拥塞窗口，接收窗口}，初始的拥塞窗口为最大报文段长度1KB。每经过一个RTT，拥塞窗口翻倍，因此需至少经过4个RTT(4×8ms=32ms)，发送窗口才能达到16KB。</p><p>6、‌主机甲发起与主机乙的TCP连接，主机甲选择的初始序号seq=16666，若主机乙接受该连接请求，则主机乙向主机甲发送的正确的TCP段的首部相关标志位和字段的值可能是()</p><p>A.SYN=0, ACK=0, seq=16667, ack=16667 B.SYN=1, ACK=1, seq=16666, ack=16666 C.SYN=0, ACK=0, seq=16666, ack=16666 D.SYN=1, ACK=1, seq=16667, ack=16667 解析：如图所示</p><p>7、下列关于TCP协议的叙述中，正确的是()</p><p>‍I. 是TCP/IP参考模型网际层中的协议 ‍II. 提供无连接服务 ‍III. 仅通过差错校验，即可确保可靠数据传输 ‍IV. 提供复用/分用服务</p><p>A.仅I B.仅I、III C.仅II、IV D.仅IV 解析： TCP协议是TCP/IP参考模型运输层中的协议，叙述I错误； TCP协议向上提供的是面向连接的可靠传输服务，叙述II错误； TCP协议通过差错校验、滑动窗口等一系列机制来确保可靠数据传输，叙述III错误； TCP协议使用端口来区分不同的应用进程，进而为应用进程提供复用/分用服务，叙述IV正确。</p><p>8、‎下列能反映出网络中发生了拥塞现象的是()</p><p>A.随着网络负载的增加，吞吐量反而降低 B.随着网络负载的增加，吞吐量也相应增加 C.网络结点接收和发出的分组越来越多 D.网络结点接收和发出的分组越来越少 解析：随着网络负载的增加，吞吐量反而降低，这说明发生了拥塞现象。就比如说，修建一条路，后面这条路，经过改善，变得更宽阔了，承载能力更强了，但是来来往往的车辆反而少了，说明堵车了。也就是发生了拥塞。</p><p>9、TCP的通信双方，有一方发送了FIN标志位为1的报文段，这表示()</p><p>A.将断开通信双方的TCP连接 B.单方面释放连接，表示本方已无数据发送，但可以接收对方的数据 C.终止数据发送，双方都不能发送数据 D.TCP连接被重新建立 解析：本题其实仔细看了看，考查的是TCP首部FIN标志位和TCP的连接管理。TCP采用对称释放法释放连接。 任何一方想要释放连接时，发送一个FIN=1的TCP段，当这个段被确认后，这个方向的连接就释放了。 当双方都发送了FIN=1的TCP段并得到了确认时，这条TCP连接就释放了。通常释放TCP连接需要4个TCP段，但第一个FIN的确认可以和第二个FIN合并，从而只需要3个段。 当双方同时向对方发送FIN=1的段时，按正常方法响应，事实上同时释放和顺序释放没有什么不同。 因此本题中，甲方单方面释放连接，但乙方有数据还可以继续发送，因此答案是B</p><h1 id="_6-1、应用层概述" tabindex="-1"><a class="header-anchor" href="#_6-1、应用层概述"><span>6.1、应用层概述</span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140901604.png" alt="image-20240711140901604" tabindex="0" loading="lazy"><figcaption>image-20240711140901604</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140908935.png" alt="image-20240711140908935" tabindex="0" loading="lazy"><figcaption>image-20240711140908935</figcaption></figure><p>我们在浏览器的地址中输入某个网站的域名后，就可以访问该网站的内容，这个就是<strong>万维网WWW应用</strong>，其相关的应用层协议为<strong>超文本传送协议HTTP</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140919026.png" alt="image-20240711140919026" tabindex="0" loading="lazy"><figcaption>image-20240711140919026</figcaption></figure><p>用户在浏览器地址栏中输入的是“见名知意”的<strong>域名</strong>，而TCP/IP的网际层使用<strong>IP地址</strong>来表示目的主机，从域名到IP地址的装转换，由属于<strong>应用层范畴的域名系统DNS</strong>，在后台帮用户完成</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140926846.png" alt="image-20240711140926846" tabindex="0" loading="lazy"><figcaption>image-20240711140926846</figcaption></figure><p>常见的应用</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140939960.png" alt="image-20240711140939960" tabindex="0" loading="lazy"><figcaption>image-20240711140939960</figcaption></figure><p>总结</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140954148.png" alt="image-20240711140954148" tabindex="0" loading="lazy"><figcaption>image-20240711140954148</figcaption></figure><hr><h1 id="_6-2、客户-服务器方式-c-s方式-和对等方式-p2p方式" tabindex="-1"><a class="header-anchor" href="#_6-2、客户-服务器方式-c-s方式-和对等方式-p2p方式"><span>6.2、客户/服务器方式（C/S方式）和对等方式（P2P方式）</span></a></h1><h2 id="概念-10" tabindex="-1"><a class="header-anchor" href="#概念-10"><span>概念</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141002285.png" alt="image-20240711141002285" tabindex="0" loading="lazy"><figcaption>image-20240711141002285</figcaption></figure><h2 id="客户-服务器方式-c-s方式" tabindex="-1"><a class="header-anchor" href="#客户-服务器方式-c-s方式"><span>客户/服务器方式（C/S方式）</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141009874.png" alt="image-20240711141009874" tabindex="0" loading="lazy"><figcaption>image-20240711141009874</figcaption></figure><h2 id="对等方式-p2p方式" tabindex="-1"><a class="header-anchor" href="#对等方式-p2p方式"><span>对等方式（P2P方式）</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141020852.png" alt="image-20240711141020852" tabindex="0" loading="lazy"><figcaption>image-20240711141020852</figcaption></figure><h2 id="总结-17" tabindex="-1"><a class="header-anchor" href="#总结-17"><span>总结</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141026616.png" alt="image-20240711141026616" tabindex="0" loading="lazy"><figcaption>image-20240711141026616</figcaption></figure><hr><h1 id="_6-3、动态主机配置协议dhcp" tabindex="-1"><a class="header-anchor" href="#_6-3、动态主机配置协议dhcp"><span>6.3、动态主机配置协议DHCP</span></a></h1><h2 id="概念-11" tabindex="-1"><a class="header-anchor" href="#概念-11"><span>概念</span></a></h2><ul><li>互联网广泛使用的<strong>动态主机配置协议 DHCP</strong> (Dynamic Host Configuration Protocol) 提供了<strong>即插即用连网</strong> (plug-and-play networking) 的机制。</li><li>这种机制允许一台计算机加入新的网络和获取 IP 地址，而不用手工配置。</li></ul><h2 id="dhcp的作用" tabindex="-1"><a class="header-anchor" href="#dhcp的作用"><span>DHCP的作用</span></a></h2><p>在之前，如果要正常访问Web服务器，需要该主机手动配置网络的相关配置信息</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141034775.png" alt="image-20240711141034775" tabindex="0" loading="lazy"><figcaption>image-20240711141034775</figcaption></figure><blockquote><p>如果主机数很多，就工作量大，容易出错</p></blockquote><p>如果我们给网络中添加一台DHCP服务器</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141041546.png" alt="image-20240711141041546" tabindex="0" loading="lazy"><figcaption>image-20240711141041546</figcaption></figure><h2 id="dhcp的工作过程" tabindex="-1"><a class="header-anchor" href="#dhcp的工作过程"><span>DHCP的工作过程</span></a></h2><p><strong>DHCP 使用客户 - 服务器方式</strong></p><ul><li>需要 IP 地址的主机在启动时就向 DHCP 服务器广播发送发现报文 （DHCP DISCOVER），这时该主机就成为 DHCP 客户。</li><li>本地网络上所有主机都能收到此广播报文，但只有 DHCP 服务器才回答此广播报文。</li><li>DHCP 服务器先在其数据库中查找该计算机的配置信息。若找到，则返回找到的信息。若找不到，则从服务器的 IP 地址池 (address pool) 中取一个地址分配给该计算机。DHCP服务器的回答报文叫做提供报文（DHCP OFFER）。</li></ul><p><strong>DHCP 工作方式</strong></p><ul><li>DHCP 使用客户-服务器方式，采用请求/应答方式工作。</li><li>DHCP 基于 UDP 工作（DHCP报文在运输层会被封装成为UDP用户数据报），DHCP 服务器运行在 67 号端口， DHCP客户运行在 68 号端口。</li></ul><p><strong>DHCP交互过程</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141047797.png" alt="image-20240711141047797" tabindex="0" loading="lazy"><figcaption>image-20240711141047797</figcaption></figure><blockquote><p><strong>DHCP客户端将广播发送DHCP发现报文（DHCP DISCOVER）</strong></p><ul><li><p>事务ID</p></li><li><p>DHCP客户端的MAC地址</p></li></ul><p><strong>封装该报文的IP数据报的源IP地址为0.0.0.0，这是因为主机目前还未分配到IP地址</strong>，因此使用该地址代替</p><p><strong>目的IP地址为广播地址255.255.255.255，之所以广播发送，是因为主机现在并不知道网络中有哪几个DHCP服务器</strong>。它们的IP地址各是什么</p><p><strong>DHCP服务器收到DHCP发现报文后，根据其中封装的DHCP客户端的MAC地址来查找自己的数据库</strong>，如果查到匹配信息，则使用这些配置信息来构建并发送DHCP提供报文，如果没有则采用默认配置信息来构建报文并发送</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141054980.png" alt="image-20240711141054980" tabindex="0" loading="lazy"><figcaption>image-20240711141054980</figcaption></figure><blockquote><p><strong>DHCP服务端将广播发送DHCP提供报文（DHCP OFFER）</strong></p><ul><li><p>事务ID：DHCP客户端会与之前DHCP发现报文的事务ID做对比，来判断该DHCP提供报文是否是自己的</p></li><li><p>配置信息：</p></li></ul><div class="language-undefined line-numbers-mode" data-highlighter="shiki" data-ext="undefined" data-title="undefined" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>*   IP地址：DHCP服务器从自己的IP地址池中挑选待租用给主机的IP地址（使用ARP来确保所选IP地址未被网络中其他主机占用）</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>*   子网掩码</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>*   地址租期</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>*   默认网关</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>*   DNS服务器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源IP地址：发送DHCP提供报文的DHCP服务器的IP</p><p>目的地址：因为目的主机还没分配到IP，所以使用广播地址</p></blockquote><p>在本例中，DHCP客户会收到两个DHCP服务器发来的DHCP提供报文，DHCP客户从中选择一个，一般选择先到的，并向所选择的DHCP服务器发送DHCP请求报文</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141102748.png" alt="image-20240711141102748" tabindex="0" loading="lazy"><figcaption>image-20240711141102748</figcaption></figure><blockquote><p><strong>DHCP客户端将广播发送DHCP请求报文（DHCP REQUEST）</strong></p><ul><li><p>事务ID</p></li><li><p>DHCP客户端的MAC地址</p></li><li><p>接收的租约中的IP地址</p></li><li><p>提供此租约的DHCP服务器端的IP地址</p></li></ul><p>源地址：0.0.0.0，因为此时DHCP客户才从多个DHCP服务器中挑选一个作为自己的DHCP服务器。它首先要征得该服务器的同意，之后才能正式使用向该DHCP服务器租用的IP地址</p><p>目的地址：广播地址，这样可以一次性向所有DHCP服务器发送DHCP请求报文，来告知它们是否请求它们作为自己的DHCP服务器</p></blockquote><p>在本例中，假设DHCP客户端选择DHCP服务器1作为自己的DHCP服务器，DHCP服务器1接受该请求，于是DHCP服务器1给DHCP客户端发送DHCP确认报文</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141107863.png" alt="image-20240711141107863" tabindex="0" loading="lazy"><figcaption>image-20240711141107863</figcaption></figure><blockquote><p>源地址：DHCP服务器1的IP地址</p><p>目的地址：广播地址</p><p><strong>DHCP客户收到该报文后就可以使用租用的IP地址</strong></p><p><strong>在使用前还会进行ARP检测</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141116920.png" alt="image-20240711141116920" tabindex="0" loading="lazy"><figcaption>image-20240711141116920</figcaption></figure></blockquote><p>剩下流程图示</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141126905.png" alt="image-20240711141126905" tabindex="0" loading="lazy"><figcaption>image-20240711141126905</figcaption></figure><h2 id="dhcp中继代理" tabindex="-1"><a class="header-anchor" href="#dhcp中继代理"><span>DHCP中继代理</span></a></h2><p>下图的网络拓扑中的各主机是否可以通过DHCP来自动获取到网络配置？</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141135450.png" alt="image-20240711141135450" tabindex="0" loading="lazy"><figcaption>image-20240711141135450</figcaption></figure><blockquote><p>使用DHCP中继代理是因为我们不用给每一个网络上都设置一个DHCP服务器，这样会使DHCP服务器的数量太多</p></blockquote><h2 id="总结-18" tabindex="-1"><a class="header-anchor" href="#总结-18"><span>总结</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141141917.png" alt="image-20240711141141917" tabindex="0" loading="lazy"><figcaption>image-20240711141141917</figcaption></figure><hr><h1 id="_6-4、域名系统dns" tabindex="-1"><a class="header-anchor" href="#_6-4、域名系统dns"><span>6.4、域名系统DNS</span></a></h1><h2 id="概述-3" tabindex="-1"><a class="header-anchor" href="#概述-3"><span>概述</span></a></h2><p>域名相比IP地址更容易记忆</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711143142239.png" alt="image-20240711143142239" tabindex="0" loading="lazy"><figcaption>image-20240711143142239</figcaption></figure><p>因特网是否可以只使用一台DNS服务器？</p><p>不行</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141202706.png" alt="image-20240711141202706" tabindex="0" loading="lazy"><figcaption>image-20240711141202706</figcaption></figure><figure><img src="" alt="image-20240711141207939" tabindex="0" loading="lazy"><figcaption>image-20240711141207939</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141215089.png" alt="image-20240711141215089" tabindex="0" loading="lazy"><figcaption>image-20240711141215089</figcaption></figure><blockquote><p>名称相同的域名其等级未必相同</p></blockquote><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141228960.png" alt="image-20240711141228960" tabindex="0" loading="lazy"><figcaption>image-20240711141228960</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141235004.png" alt="image-20240711141235004" tabindex="0" loading="lazy"><figcaption>image-20240711141235004</figcaption></figure><h2 id="域名解析过程" tabindex="-1"><a class="header-anchor" href="#域名解析过程"><span>域名解析过程</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141242219.png" alt="image-20240711141242219" tabindex="0" loading="lazy"><figcaption>image-20240711141242219</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141248118.png" alt="image-20240711141248118" tabindex="0" loading="lazy"><figcaption>image-20240711141248118</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141254380.png" alt="image-20240711141254380" tabindex="0" loading="lazy"><figcaption>image-20240711141254380</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141259172.png" alt="image-20240711141259172" tabindex="0" loading="lazy"><figcaption>image-20240711141259172</figcaption></figure><h2 id="总结-19" tabindex="-1"><a class="header-anchor" href="#总结-19"><span>总结</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141306795.png" alt="image-20240711141306795" tabindex="0" loading="lazy"><figcaption>image-20240711141306795</figcaption></figure><hr><h1 id="_6-5、文件传送协议ftp" tabindex="-1"><a class="header-anchor" href="#_6-5、文件传送协议ftp"><span>6.5、文件传送协议FTP</span></a></h1><h2 id="概念-12" tabindex="-1"><a class="header-anchor" href="#概念-12"><span>概念</span></a></h2><p>![image-20240711141311243]D)</p><h2 id="文件传送协议ftp的应用" tabindex="-1"><a class="header-anchor" href="#文件传送协议ftp的应用"><span>文件传送协议FTP的应用</span></a></h2><p>FTP采用C/S方式（客户/服务器方式）</p><p>FTP客户计算机可将各种类型的文件上传到FTP服务器计算机</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141320204.png" alt="image-20240711141320204" tabindex="0" loading="lazy"><figcaption>image-20240711141320204</figcaption></figure><p>FTP客户计算机也可以从FTP服务器计算机下载文件</p><figure><img src="" alt="image-20240711141329284" tabindex="0" loading="lazy"><figcaption>image-20240711141329284</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141336403.png" alt="image-20240711141336403" tabindex="0" loading="lazy"><figcaption>image-20240711141336403</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141344916.png" alt="image-20240711141344916" tabindex="0" loading="lazy"><figcaption>image-20240711141344916</figcaption></figure><h2 id="ftp基本工作原理" tabindex="-1"><a class="header-anchor" href="#ftp基本工作原理"><span>FTP基本工作原理</span></a></h2><p>FTP服务器监听熟知端口（端口号为 21），使客户进程能够连接上。</p><p>FTP客户随机选择一个临时端口号与其建立TCP连接，这条TCP连接用于FTP客户与服务器之间传送FTP的相关控制命令（这条连接是FTP客户与服务器之间的命令通道）</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141424565.png" alt="image-20240711141424565" tabindex="0" loading="lazy"><figcaption>image-20240711141424565</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141432424.png" alt="image-20240711141432424" tabindex="0" loading="lazy"><figcaption>image-20240711141432424</figcaption></figure><p>下图为建立数据通道的TCP连接</p><p>FTP服务器使用自己的熟知端口号20与其建立TCP连接，这条TCP连接用于FTP客户与服务器之间传送文件</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141438743.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>上面例子是主动模式：建立数据通道时，FTP服务器主动连接FTP客户</p></blockquote><p>下图实例为被动模式</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141451527.png" alt="image-20240711141451527" tabindex="0" loading="lazy"><figcaption>image-20240711141451527</figcaption></figure><p>两种模式对比</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141457440.png" alt="image-20240711141457440" tabindex="0" loading="lazy"><figcaption>image-20240711141457440</figcaption></figure><blockquote><p>注意两种模式都是</p><p>控制连接在整个会话期间保持打开状态</p><p>数据连接传输完毕后就关闭</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667477443337.png" alt="1667477443337" tabindex="0" loading="lazy"><figcaption>1667477443337</figcaption></figure></blockquote><h2 id="总结-20" tabindex="-1"><a class="header-anchor" href="#总结-20"><span>总结</span></a></h2><pre><code> 将某台计算机中的文件通过网络传送到可能相距很远的另一台计算机中,是一项基本的网络应用，即文件传送。
</code></pre><p>文件传送协议FTP (File Transfer Protocol)是因特网上使用得最广泛的文件传送协议。</p><pre><code>FTP提供交互式的访问，允许客户指明文件的类型与格式(如指明是否使用ASCII码) ,并允许文件具有存取权限(如访问文件的用户必须经过授权，并输入有效的口令) .] FTP屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。
</code></pre><p>​ 在因特网发展的早期阶段，用FTP传送文件约占整个因特网的通信量的三分之-， 而由电子邮件和域名系统所产生的通信量还要小于FTP所产生的通信量。只是到了1995年,万维网WWW的通信量才首次超过了FTP.</p><p>FTP客户和服务器之间要建立以下两个并行的TCP连接:</p><p>控制连接，在整个会话期间一直保持打开,用于传送FTP相关控制命令。</p><p>数据连接，用于文件传输，在每次文件传输时才建立，传输结束就关闭。</p><p>​ 默认情况下，FTP使用TCP 21端口进行控制连接, TCP 20端口进行数据连接。但是， 是否使用TCP 20端口建立数据连接与传输模式有关,主动方式使用TCP 20端口,被动方式由服务器和客户端自行协商决定。</p><hr><h1 id="_6-6、电子邮件" tabindex="-1"><a class="header-anchor" href="#_6-6、电子邮件"><span>6.6、电子邮件</span></a></h1><h2 id="概念-13" tabindex="-1"><a class="header-anchor" href="#概念-13"><span>概念</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141525622.png" alt="image-20240711141525622" tabindex="0" loading="lazy"><figcaption>image-20240711141525622</figcaption></figure><h5 id="发送协议smtp" tabindex="-1"><a class="header-anchor" href="#发送协议smtp"><span>发送协议SMTP</span></a></h5><h5 id="读取协议pop3、imap" tabindex="-1"><a class="header-anchor" href="#读取协议pop3、imap"><span>读取协议POP3、IMAP</span></a></h5><h2 id="邮件发送和接收过程" tabindex="-1"><a class="header-anchor" href="#邮件发送和接收过程"><span>邮件发送和接收过程</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141534743.png" alt="image-20240711141534743" tabindex="0" loading="lazy"><figcaption>image-20240711141534743</figcaption></figure><h2 id="简单邮件传送协议smtp-simple-mail-transfer-protocol-的基本工作原理" tabindex="-1"><a class="header-anchor" href="#简单邮件传送协议smtp-simple-mail-transfer-protocol-的基本工作原理"><span>简单邮件传送协议SMTP（Simple Mail Transfer Protocol）的基本工作原理</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141542529.png" alt="image-20240711141542529" tabindex="0" loading="lazy"><figcaption>image-20240711141542529</figcaption></figure><h2 id="电子邮件的信息格式" tabindex="-1"><a class="header-anchor" href="#电子邮件的信息格式"><span>电子邮件的信息格式</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141610770.png" alt="image-20240711141610770" tabindex="0" loading="lazy"><figcaption>image-20240711141610770</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141618644.png" alt="image-20240711141618644" tabindex="0" loading="lazy"><figcaption>image-20240711141618644</figcaption></figure><h2 id="邮件读取" tabindex="-1"><a class="header-anchor" href="#邮件读取"><span>邮件读取</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141630025.png" alt="image-20240711141630025" tabindex="0" loading="lazy"><figcaption>image-20240711141630025</figcaption></figure><h2 id="基于万维网的电子邮件" tabindex="-1"><a class="header-anchor" href="#基于万维网的电子邮件"><span>基于万维网的电子邮件</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141635544.png" alt="image-20240711141635544" tabindex="0" loading="lazy"><figcaption>image-20240711141635544</figcaption></figure><h2 id="总结-21" tabindex="-1"><a class="header-anchor" href="#总结-21"><span>总结</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141640882.png" alt="image-20240711141640882" tabindex="0" loading="lazy"><figcaption>image-20240711141640882</figcaption></figure><hr><h1 id="_6-7、万维网www" tabindex="-1"><a class="header-anchor" href="#_6-7、万维网www"><span>6.7、万维网WWW</span></a></h1><h2 id="概念-14" tabindex="-1"><a class="header-anchor" href="#概念-14"><span>概念</span></a></h2><p><strong>概述</strong></p><ul><li><strong>万维网</strong> WWW (World Wide Web) 并非某种特殊的计算机网络。</li><li>万维网是一个大规模的、联机式的<strong>信息储藏所</strong>。</li><li>万维网用链接的方法能非常方便地从互联网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息。</li><li>这种访问方式称为“<strong>链接</strong>”。</li></ul><p><strong>万维网的工作方式</strong></p><ul><li>万维网以<strong>客户 - 服务器</strong>方式工作。</li><li><strong>浏览器</strong>就是在用户计算机上的万维网<strong>客户程序</strong>。万维网文档所驻留的计算机则运行<strong>服务器程序</strong>，因此这个计算机也称为<strong>万维网服务器</strong>。</li><li>客户程序向服务器程序发出请求，服务器程序向客户程序送回客户所要的<strong>万维网文档</strong>。</li><li>在一个客户程序主窗口上显示出的万维网文档称为<strong>页面</strong> (page)。</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141651960.png" alt="image-20240711141651960" tabindex="0" loading="lazy"><figcaption>image-20240711141651960</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141659149.png" alt="image-20240711141659149" tabindex="0" loading="lazy"><figcaption>image-20240711141659149</figcaption></figure><p><strong>万维网应用举例</strong></p><p>访问网页</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141709185.png" alt="image-20240711141709185" tabindex="0" loading="lazy"><figcaption>image-20240711141709185</figcaption></figure><p><strong>怎样标志分布在整个互联网上的万维网文档？</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141719481.png" alt="image-20240711141719481" tabindex="0" loading="lazy"><figcaption>image-20240711141719481</figcaption></figure><p><strong>万维网的文档</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141729014.png" alt="image-20240711141729014" tabindex="0" loading="lazy"><figcaption>image-20240711141729014</figcaption></figure><h2 id="超文本传输协议http-hyper-transfer-protocol" tabindex="-1"><a class="header-anchor" href="#超文本传输协议http-hyper-transfer-protocol"><span>超文本传输协议HTTP（Hyper Transfer Protocol）</span></a></h2><h3 id="概念和传输过程" tabindex="-1"><a class="header-anchor" href="#概念和传输过程"><span>概念和传输过程</span></a></h3><ul><li>在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是<strong>超文本传送协议</strong> HTTP (HyperText Transfer Protocol)。</li><li>HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141738462.png" alt="image-20240711141738462" tabindex="0" loading="lazy"><figcaption>image-20240711141738462</figcaption></figure><ul><li>每个万维网网点都有一个服务器进程，它不断地<strong>监听 TCP 的端口 80</strong>，以便发现是否有浏览器向它发出连接建立请求。</li><li>一旦监听到连接建立请求并建立了 TCP 连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应。</li><li>最后，TCP 连接就被释放了。</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141749812.png" alt="image-20240711141749812" tabindex="0" loading="lazy"><figcaption>image-20240711141749812</figcaption></figure><h3 id="http报文格式" tabindex="-1"><a class="header-anchor" href="#http报文格式"><span>HTTP报文格式</span></a></h3><p><strong>HTTP请求报文格式</strong></p><figure><img src="" alt="image-20240711141805910" tabindex="0" loading="lazy"><figcaption>image-20240711141805910</figcaption></figure><p><strong>HTTP响应报文格式</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141814048.png" alt="image-20240711141814048" tabindex="0" loading="lazy"><figcaption>image-20240711141814048</figcaption></figure><h3 id="使用cookie在服务器上记录用户信息" tabindex="-1"><a class="header-anchor" href="#使用cookie在服务器上记录用户信息"><span>使用Cookie在服务器上记录用户信息</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141820969.png" alt="image-20240711141820969" tabindex="0" loading="lazy"><figcaption>image-20240711141820969</figcaption></figure><h3 id="万维网缓存与代理服务器" tabindex="-1"><a class="header-anchor" href="#万维网缓存与代理服务器"><span>万维网缓存与代理服务器</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141827421.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果该请求有缓存</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141831842.png" alt="image-20240711141831842" tabindex="0" loading="lazy"><figcaption>image-20240711141831842</figcaption></figure><p>如果该请求没有缓存</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141835812.png" alt="image-20240711141835812" tabindex="0" loading="lazy"><figcaption>image-20240711141835812</figcaption></figure><blockquote><p>若WEb缓存的命中率比较高</p><p>则会大大减小了该链路上的通信量，因而减少了访问因特网的时延</p></blockquote><p>假设原始服务器的文档被更改，这样代理服务器的文档就不是最新的</p><p>所以原始服务器通常会为每个响应的对象设定一个<strong>修改时间字段</strong>和一个<strong>有效日期字段</strong></p><p>若未过期</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141918631.png" alt="image-20240711141918631" tabindex="0" loading="lazy"><figcaption>image-20240711141918631</figcaption></figure><p>若过期并且代理服务器的文档和原始服务器的<strong>文档一致</strong>，原始服务器则给代理服务器发送不包含实体主体的响应</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141928133.png" alt="image-20240711141928133" tabindex="0" loading="lazy"><figcaption>image-20240711141928133</figcaption></figure><p>若过期并且代理服务器的文档和原始服务器的<strong>文档不一致</strong>，原始服务器则给代理服务器发送封装有该文档的响应报文</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141940599.png" alt="image-20240711141940599" tabindex="0" loading="lazy"><figcaption>image-20240711141940599</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667482393104.png" alt="1667482393104" tabindex="0" loading="lazy"><figcaption>1667482393104</figcaption></figure><p>在万维网中还可以使用缓存机制以提高万维网的效率，万维网缓存又称Web缓存，，可位于客户机，也可位于中间系统上，位于中间系统上的Web缓存又称为代理服务器。</p><h1 id="_7-1网络安全概述" tabindex="-1"><a class="header-anchor" href="#_7-1网络安全概述"><span>7.1网络安全概述</span></a></h1><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529416700.png" alt="1667529416700" tabindex="0" loading="lazy"><figcaption>1667529416700</figcaption></figure><h5 id="拒绝服务dos" tabindex="-1"><a class="header-anchor" href="#拒绝服务dos"><span>拒绝服务Dos</span></a></h5><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529468843.png" alt="1667529468843" tabindex="0" loading="lazy"><figcaption>1667529468843</figcaption></figure><p>交换机中毒</p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529501377.png" alt="1667529501377" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529525625.png" alt="1667529525625" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529555188.png" alt="1667529555188" loading="lazy"></p><h1 id="_7-2密码学与保密性" tabindex="-1"><a class="header-anchor" href="#_7-2密码学与保密性"><span><strong>7.2密码学与保密性</strong></span></a></h1><h2 id="_7-2-2对称密钥密码体制" tabindex="-1"><a class="header-anchor" href="#_7-2-2对称密钥密码体制"><span><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529935445.png" alt="1667529935445" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529997890.png" alt="1667529997890" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530027631.png" alt="1667530027631" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530087642.png" alt="1667530087642" loading="lazy"><strong>7.2.2对称密钥密码体制</strong></span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530559317.png" alt="1667530559317" tabindex="0" loading="lazy"><figcaption>1667530559317</figcaption></figure><h3 id="数据加密标准des" tabindex="-1"><a class="header-anchor" href="#数据加密标准des"><span>数据加密标准DES</span></a></h3><h3 id="-5" tabindex="-1"><a class="header-anchor" href="#-5"><span><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530588074.png" alt="1667530588074" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530855489.png" alt="1667530855489" loading="lazy"></span></a></h3><h3 id="三重des" tabindex="-1"><a class="header-anchor" href="#三重des"><span>三重DES</span></a></h3><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530873540.png" alt="1667530873540" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530896194.png" alt="1667530896194" loading="lazy"></p><h3 id="高级加密标准aes" tabindex="-1"><a class="header-anchor" href="#高级加密标准aes"><span><strong>高级加密标准</strong>AES</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530915899.png" alt="1667530915899" tabindex="0" loading="lazy"><figcaption>1667530915899</figcaption></figure><h2 id="_7-2-3-公钥密码体制" tabindex="-1"><a class="header-anchor" href="#_7-2-3-公钥密码体制"><span><strong>7.2.3</strong> <strong>公钥密码体制</strong></span></a></h2><h3 id="公钥密码体制的产生原因" tabindex="-1"><a class="header-anchor" href="#公钥密码体制的产生原因"><span><strong>公钥密码体制的产生原因</strong></span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667531748354.png" alt="1667531748354" tabindex="0" loading="lazy"><figcaption>1667531748354</figcaption></figure><h3 id="公钥密码体制" tabindex="-1"><a class="header-anchor" href="#公钥密码体制"><span>公钥密码体制</span></a></h3><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667531765353.png" alt="1667531765353" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667531777044.png" alt="1667531777044" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667531789776.png" alt="1667531789776" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667531800266.png" alt="1667531800266" loading="lazy"></p><h2 id="_7-3报文完整性与鉴别" tabindex="-1"><a class="header-anchor" href="#_7-3报文完整性与鉴别"><span><strong>7.3报文完整性与鉴别</strong></span></a></h2><h2 id="_7-3-1-报文摘要和报文鉴别码" tabindex="-1"><a class="header-anchor" href="#_7-3-1-报文摘要和报文鉴别码"><span><strong>7.3.1</strong> <strong>报文摘要和报文鉴别码</strong></span></a></h2><h3 id="报文完整性与鉴别的概念" tabindex="-1"><a class="header-anchor" href="#报文完整性与鉴别的概念"><span><strong>报文完整性与鉴别的概念</strong></span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533051139.png" alt="1667533051139" tabindex="0" loading="lazy"><figcaption>1667533051139</figcaption></figure><h3 id="报文摘要和报文鉴别码" tabindex="-1"><a class="header-anchor" href="#报文摘要和报文鉴别码"><span><strong>报文摘要和报文鉴别码</strong></span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533317378.png" alt="1667533317378" tabindex="0" loading="lazy"><figcaption>1667533317378</figcaption></figure><h3 id="密码散列函数" tabindex="-1"><a class="header-anchor" href="#密码散列函数"><span><strong>密码散列函数</strong></span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533329949.png" alt="1667533329949" tabindex="0" loading="lazy"><figcaption>1667533329949</figcaption></figure><h3 id="实用的报文摘要算法" tabindex="-1"><a class="header-anchor" href="#实用的报文摘要算法"><span><strong>实用的报文摘要算法</strong></span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533099118.png" alt="1667533099118" tabindex="0" loading="lazy"><figcaption>1667533099118</figcaption></figure><h3 id="散列报文摘要算法" tabindex="-1"><a class="header-anchor" href="#散列报文摘要算法"><span>散列报文摘要算法</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533116264.png" alt="1667533116264" tabindex="0" loading="lazy"><figcaption>1667533116264</figcaption></figure><h3 id="散列报文鉴别码" tabindex="-1"><a class="header-anchor" href="#散列报文鉴别码"><span><strong>散列报文鉴别码</strong></span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533159151.png" alt="1667533159151" tabindex="0" loading="lazy"><figcaption>1667533159151</figcaption></figure><h2 id="_7-3-2数字签名" tabindex="-1"><a class="header-anchor" href="#_7-3-2数字签名"><span>7.3.2数字签名</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533905937.png" alt="1667533905937" tabindex="0" loading="lazy"><figcaption>1667533905937</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533998729.png" alt="1667533998729" tabindex="0" loading="lazy"><figcaption>1667533998729</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533945803.png" alt="1667533945803" tabindex="0" loading="lazy"><figcaption>1667533945803</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533966974.png" alt="1667533966974" tabindex="0" loading="lazy"><figcaption>1667533966974</figcaption></figure><h1 id="_7-4实体鉴别" tabindex="-1"><a class="header-anchor" href="#_7-4实体鉴别"><span><strong>7.4实体鉴别</strong></span></a></h1><h2 id="-6" tabindex="-1"><a class="header-anchor" href="#-6"><span><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667535297210.png" alt="1667535297210" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667535331395.png" alt="1667535331395" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667535356167.png" alt="1667535356167" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667535447943.png" alt="1667535447943" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667535461760.png" alt="1667535461760" loading="lazy"></span></a></h2><h1 id="_7-5密钥分发" tabindex="-1"><a class="header-anchor" href="#_7-5密钥分发"><span><strong>7.5密钥分发</strong></span></a></h1><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667536472497.png" alt="1667536472497" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667536572617.png" alt="1667536572617" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667536583206.png" alt="1667536583206" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667536593443.png" alt="1667536593443" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667536603663.png" alt="1667536603663" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667536612426.png" alt="1667536612426" loading="lazy"></p><h1 id="_7-6访问控制" tabindex="-1"><a class="header-anchor" href="#_7-6访问控制"><span>7.6<strong>访问控制</strong></span></a></h1><h2 id="访问控制的基本概念" tabindex="-1"><a class="header-anchor" href="#访问控制的基本概念"><span><strong>访问控制的基本概念</strong></span></a></h2><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537535815.png" alt="1667537535815" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537545980.png" alt="1667537545980" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537556126.png" alt="1667537556126" loading="lazy"></p><h2 id="三类典型的访问控制策略" tabindex="-1"><a class="header-anchor" href="#三类典型的访问控制策略"><span><strong>三类典型的访问控制策略</strong></span></a></h2><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537579313.png" alt="1667537579313" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537633389.png" alt="1667537633389" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537597180.png" alt="1667537597180" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537647735.png" alt="1667537647735" loading="lazy"></p><h1 id="_7-7-网络体系结构各层采取的安全措施" tabindex="-1"><a class="header-anchor" href="#_7-7-网络体系结构各层采取的安全措施"><span>7.7**网络体系结构各层采取的安全措施 **</span></a></h1><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667538986701.png" alt="1667538986701" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667538994997.png" alt="1667538994997" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667539005478.png" alt="1667539005478" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667539015955.png" alt="1667539015955" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667539025835.png" alt="1667539025835" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667539034448.png" alt="1667539034448" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667539044343.png" alt="1667539044343" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667539054334.png" alt="1667539054334" loading="lazy"></p><h2 id="_7-7-1物理层和数据链路层" tabindex="-1"><a class="header-anchor" href="#_7-7-1物理层和数据链路层"><span>7.7.1物理层和数据链路层</span></a></h2><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667549950633.png" alt="1667549950633" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667549968634.png" alt="1667549968634" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667549979756.png" alt="1667549979756" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667549993498.png" alt="1667549993498" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667550007368.png" alt="1667550007368" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667550018211.png" alt="1667550018211" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667550026697.png" alt="1667550026697" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667550034241.png" alt="1667550034241" loading="lazy"></p><h2 id="_7-7-2网络层" tabindex="-1"><a class="header-anchor" href="#_7-7-2网络层"><span><strong>7.7.2网络层</strong></span></a></h2><h3 id="ipsec协议栈概述" tabindex="-1"><a class="header-anchor" href="#ipsec协议栈概述"><span>IPSec协议栈概述</span></a></h3><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551549271.png" alt="1667551549271" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551573293.png" alt="1667551573293" loading="lazy"></p><h3 id="安全关联" tabindex="-1"><a class="header-anchor" href="#安全关联"><span><strong>安全关联</strong></span></a></h3><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551603231.png" alt="1667551603231" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551622213.png" alt="1667551622213" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551666418.png" alt="1667551666418" loading="lazy"></p><h3 id="ip安全数据报的格式" tabindex="-1"><a class="header-anchor" href="#ip安全数据报的格式"><span>IP安全数据报的格式</span></a></h3><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551681933.png" alt="1667551681933" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551774220.png" alt="1667551774220" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551795651.png" alt="1667551795651" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551820246.png" alt="1667551820246" loading="lazy"></p><h3 id="ipsec的其他构件" tabindex="-1"><a class="header-anchor" href="#ipsec的其他构件"><span>IPSec的其他构件</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551876896.png" alt="1667551876896" tabindex="0" loading="lazy"><figcaption>1667551876896</figcaption></figure><h2 id="_7-7-3运输层" tabindex="-1"><a class="header-anchor" href="#_7-7-3运输层"><span>7.7.3<strong>运输层</strong></span></a></h2><p>运输层安全实例SSL/TLS</p><h3 id="运输层安全实例-ssl-tls" tabindex="-1"><a class="header-anchor" href="#运输层安全实例-ssl-tls"><span>运输层安全实例：SSL/TLS</span></a></h3><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667552984288.png" alt="1667552984288" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667553001753.png" alt="1667553001753" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667553097775.png" alt="1667553097775" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667553113320.png" alt="1667553113320" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667553125992.png" alt="1667553125992" loading="lazy"></p><h2 id="_7-7-4应用层安全实例pgp" tabindex="-1"><a class="header-anchor" href="#_7-7-4应用层安全实例pgp"><span>7.7.4应用层安全实例PGP</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667553728581.png" alt="1667553728581" tabindex="0" loading="lazy"><figcaption>1667553728581</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667553758569.png" alt="1667553758569" tabindex="0" loading="lazy"><figcaption>1667553758569</figcaption></figure><h1 id="_7-8防火墙访问控制与入侵检测系统" tabindex="-1"><a class="header-anchor" href="#_7-8防火墙访问控制与入侵检测系统"><span>7.8防火墙访问控制与入侵检测系统</span></a></h1><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555528990.png" alt="1667555528990" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555547558.png" alt="1667555547558" loading="lazy"></p><h2 id="防火墙" tabindex="-1"><a class="header-anchor" href="#防火墙"><span><strong>防火墙</strong></span></a></h2><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555773736.png" alt="1667555773736" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555786370.png" alt="1667555786370" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555798171.png" alt="1667555798171" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555810521.png" alt="1667555810521" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555821056.png" alt="1667555821056" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555829277.png" alt="1667555829277" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555840971.png" alt="1667555840971" loading="lazy"></p><h2 id="入侵检测系统" tabindex="-1"><a class="header-anchor" href="#入侵检测系统"><span><strong>入侵检测系统</strong></span></a></h2><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555861518.png" alt="1667555861518" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555872131.png" alt="1667555872131" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555883522.png" alt="1667555883522" loading="lazy"></p><h1 id="_7-9常见的网络攻击及其防范" tabindex="-1"><a class="header-anchor" href="#_7-9常见的网络攻击及其防范"><span><strong>7.9常见的网络攻击及其防范</strong></span></a></h1><p><strong>网络扫描</strong></p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565445140.png" alt="1667565445140" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565466381.png" alt="1667565466381" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565479477.png" alt="1667565479477" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565490854.png" alt="1667565490854" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565500896.png" alt="1667565500896" loading="lazy"> <img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565515766.png" alt="1667565515766" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565528777.png" alt="1667565528777" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565539200.png" alt="1667565539200" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565551704.png" alt="1667565551704" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565564142.png" alt="1667565564142" loading="lazy"></p><p><strong>网络监听</strong></p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565580976.png" alt="1667565580976" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565594899.png" alt="1667565594899" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565612296.png" alt="1667565612296" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565621101.png" alt="1667565621101" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565639578.png" alt="1667565639578" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565658900.png" alt="1667565658900" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565722055.png" alt="1667565722055" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565733442.png" alt="1667565733442" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565744336.png" alt="1667565744336" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565755632.png" alt="1667565755632" loading="lazy"></p><p><strong>拒绝服务攻击</strong></p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565766647.png" alt="1667565766647" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565774632.png" alt="1667565774632" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565784738.png" alt="1667565784738" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565795136.png" alt="1667565795136" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565892893.png" alt="1667565892893" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565902898.png" alt="1667565902898" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565914301.png" alt="1667565914301" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565923196.png" alt="1667565923196" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565934188.png" alt="1667565934188" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565943072.png" alt="1667565943072" loading="lazy"><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565952459.png" alt="1667565952459" loading="lazy"></p>`,1872),s=[o];function g(c,p){return e(),a("div",null,s)}const m=i(t,[["render",g],["__file","计算机网络.html.vue"]]),u=JSON.parse('{"path":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html","title":"计算机网络","lang":"zh-CN","frontmatter":{"title":"计算机网络","icon":"pen-to-square","date":"2023-08-01T00:00:00.000Z","category":["计算机网络"],"tag":["体系结构","传输协议","七层网络结构"],"description":"计算机网络第1章（概述） 图示说明 imgimg 代表着主机 imgimg 代表服务器 imgimg 代表着路由器 imgimg 代表着网络 1.1、计算机网络在信息时代的作用 计算机网络已由一种通信基础设施发展成为一种重要的信息服务基础设施 计算机网络已经像水，电，煤气这些基础设施一样，成为我们生活中不可或缺的一部分 我国互联网发展状况 中国互联网络...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html"}],["meta",{"property":"og:site_name","content":"麻花的小站"}],["meta",{"property":"og:title","content":"计算机网络"}],["meta",{"property":"og:description","content":"计算机网络第1章（概述） 图示说明 imgimg 代表着主机 imgimg 代表服务器 imgimg 代表着路由器 imgimg 代表着网络 1.1、计算机网络在信息时代的作用 计算机网络已由一种通信基础设施发展成为一种重要的信息服务基础设施 计算机网络已经像水，电，煤气这些基础设施一样，成为我们生活中不可或缺的一部分 我国互联网发展状况 中国互联网络..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T08:44:09.000Z"}],["meta",{"property":"article:author","content":"Jack-Chen"}],["meta",{"property":"article:tag","content":"体系结构"}],["meta",{"property":"article:tag","content":"传输协议"}],["meta",{"property":"article:tag","content":"七层网络结构"}],["meta",{"property":"article:published_time","content":"2023-08-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T08:44:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机网络\\",\\"image\\":[\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957037-1.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-2.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-3.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-4.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-5.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-6.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-7.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957038-8.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-9.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-10.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-11.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-12.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-13.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-14.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-15.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-16.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-17.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957039-18.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-19.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-20.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-21.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-22.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-23.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-24.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-25.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-26.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-27.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-28.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-29.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-30.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-31.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-32.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-33.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-34.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-35.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957040-36.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-37.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-38.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-39.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667375456110.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-40.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-41.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-42.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-43.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-44.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-45.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-46.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-47.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-48.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957041-49.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-50.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-51.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-52.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-53.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-54.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-55.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-56.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-57.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-58.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-59.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-60.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-61.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-62.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-63.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-64.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-65.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-66.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-67.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957042-68.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957043-69.webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957043-70.webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-9b987d868b26c714.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-50d3acc8eff03935.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-692dde0bbbc49a1d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-fc85597b91c2cd7a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-060d940d8451692e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-2c23cb1d18aa345c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1175/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-8432039f51003722.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-d2a8692970355b05.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-357bc29ed7591006.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-f042b478ef808a1a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-95eac658ca822ab2.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-e1bc3e93ff50114b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-54b03a1b4fd3cdd8.png?imageMogr2/auto-orient/strip|imageView2/2/w/787/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-15060e3d8de110ba.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-19cfd094ecef0538.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-5b07729ff4cd3411.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-e0f90a502a95d1b4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-68977b7eeac3b7f2.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-acc59055804f0890.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-ded8a3e566f7687b.png?imageMogr2/auto-orient/strip|imageView2/2/w/715/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-414f829a7df390e6.png?imageMogr2/auto-orient/strip|imageView2/2/w/893/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-d3b3583526407c45.png?imageMogr2/auto-orient/strip|imageView2/2/w/827/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-2f6b70fef84339ec.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-0732d0edc74846b5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-8aa838a116fdafb4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-2fa351ff35477f1a.png?imageMogr2/auto-orient/strip|imageView2/2/w/723/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-a34a686a9d052e9c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-9a758474e374329a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-de92dd43d328b4f7.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-7ce461637de91b6e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-8fec8ccb7ff3ea77.png?imageMogr2/auto-orient/strip|imageView2/2/w/680/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-30e70220d4127135.png?imageMogr2/auto-orient/strip|imageView2/2/w/642/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-1cb6de826ba63b70.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-600f7802e1eaa18a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-1e2617434d904ce4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-0a9bbf5bcd5e8226.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-b90918937a54faa6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-57e105e5df793b93.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-5ce50e745950c8eb.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870774974.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870798317.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870838386.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870871379.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870886963.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870915267.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870928043.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870957066.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870970579.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870986659.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666870998640.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666871019764.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666871028665.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1666871037061.png\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-8503f147c44d220f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-bcb9321a6a8a3d7a.png?imageMogr2/auto-orient/strip|imageView2/2/w/425/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-cb9a20b7ce00d497.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-c1ef02caf1f2cfda.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-7f0b54d1c14702ca.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-039cdf67599ebe3b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121577697.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121730586.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121744687.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121766909.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121780294.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121797885.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121823427.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121847465.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121862449.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121879557.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121893578.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121904348.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121921172.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121936852.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121949771.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121966736.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667121981198.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667186151597.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667186162272.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667186180239.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667186200691.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667187940085.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667187952636.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667187970386.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667187985429.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667187997808.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188008802.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188036648.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188049380.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188063267.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188076363.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188092073.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188113184.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188128192.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188140249.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188153180.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188167865.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188182362.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188196700.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188212842.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188224064.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188236814.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188245169.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188255923.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188265919.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188376405.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188281302.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188397288.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188410512.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188422856.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188436149.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188451281.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188478125.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188489715.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188497957.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188507200.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188537864.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188546727.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188555435.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188562627.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188573802.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188582404.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188591920.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188604298.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188617156.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188634881.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188647456.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188656915.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188668202.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188678431.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188687492.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188698876.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188707766.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188716430.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188725782.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188739881.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188764428.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188796667.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188811320.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188819628.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188825376.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188831703.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188838841.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188846173.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188862464.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188875728.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188890345.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188901046.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188908614.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188920322.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188930465.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188972959.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188983309.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667188990398.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189004680.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189013273.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189020406.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189028048.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189052639.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189062387.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189079658.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189100045.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189113049.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189120509.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189168915.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189182172.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189198611.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189212571.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189221320.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189231141.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189239477.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189249602.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189262040.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189279286.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189288959.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189304163.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189315176.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189322840.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189338360.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189350338.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189359734.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189367425.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189375649.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189384570.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189395809.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189454264.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189465116.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189476955.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189488569.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189501150.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189508844.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189514827.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189521101.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189530434.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189541998.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189573439.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189591351.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189599939.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189610114.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189616737.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189629310.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189645196.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189654987.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189664283.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189672338.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189680567.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189691073.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189702919.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189717565.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189738993.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189748697.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189755970.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189764624.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189771362.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189789438.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189797625.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189807699.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189825122.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189838407.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189853348.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189866850.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189876752.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189890543.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667189897398.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667177509564.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667177616124.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667177644767.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667177674778.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180040280.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180018563.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180065115.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180201150.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180421835.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180459805.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180484234.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667180497289.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667182555780.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667182605776.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667182649623.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667182670331.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667183097483.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667183140091.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667183154688.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667185166188.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667190530501.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667190512830.png\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-afcf88ff0d16dc80.png?imageMogr2/auto-orient/strip|imageView2/2/w/1190/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-5993e7f74bf3a7ff.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-8db9ef0ef83c53ba.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-14fffa90e5256d53.png?imageMogr2/auto-orient/strip|imageView2/2/w/438/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-87fc7ad0cc9ba272.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-a692d0cb739f39ea.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-3e9eab4cca1d0298.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-0a52c46cee7f1ffd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-90e2d995adf53e57.png?imageMogr2/auto-orient/strip|imageView2/2/w/1199/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-617a75508f564e07.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-eacc61b12148d0fe.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-3e51c8657163a587.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-82018abf428effc4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-c1a55b79b312df0a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-0fd510a88683ce19.png?imageMogr2/auto-orient/strip|imageView2/2/w/881/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-6ac646caef2b89d6.png?imageMogr2/auto-orient/strip|imageView2/2/w/882/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-7e6aa3fe4c6184e4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-9c21430ca1484519.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-5925336afb4dfe54.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-5006c8be601f1a11.png?imageMogr2/auto-orient/strip|imageView2/2/w/545/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-5eaab61ca2770932.png?imageMogr2/auto-orient/strip|imageView2/2/w/773/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-0050159cd99737aa.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-24fc0f5e02ad49ab.png?imageMogr2/auto-orient/strip|imageView2/2/w/969/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-4e988e8ed1e154e3.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-5e9d1b71bd598e62.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-143b8b8433293353.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-dc335c4f88cede6c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-88843ec1d5739f3c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-bdff407b4d15ec43.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-a495310e8e5bc13a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-38c44dc0521cfc1b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1181/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-097ed78c469f6c87.png?imageMogr2/auto-orient/strip|imageView2/2/w/882/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-814f06bb5874b724.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-a90a636c0ff5f71c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1156/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-da16abd19e811578.png?imageMogr2/auto-orient/strip|imageView2/2/w/1146/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-2c1bfb1250975630.png?imageMogr2/auto-orient/strip|imageView2/2/w/874/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-e7a3b3efa0032ed5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-b855ffbf02fe4306.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667273967224.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274112340.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274165038.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274182115.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274213025.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274225330.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274269940.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667274279067.png\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-591d4b10e724a0c2.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-cb603ff4350d2927.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-6017dc6fd05d7dc3.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-1350e20953ab73c3.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-5f7abd26ae50d253.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-0351946f5505b37a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-09e48a4a2debf9dd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-6ec850736125c7f6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-4ff7f2294cf39cef.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-f38fdc3eb91af37f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-cf80167248b787a0.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-214e6a6830649edd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-8887ba23edaae006.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-434c1eec83abd86f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-8b1a3cadc08a931f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-d30fc31c76fe75b2.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-9e22a85322dfb654.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-56bce2f676ef8d09.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-030c93bce1443043.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-caeddc52bde20f9c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-d91cb3837cfc2b6f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-e3848e2bfcfc2c62.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-99cc1b342b3f645f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-0c30655d3122a50d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-d8107f8fc71dd1f4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-3f60a84d11d15f41.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-dfe2cfdcdd6af09e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-3bc2906b99f6940d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667303251187.png\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-a6ddde977e3398ad.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-b3382290a3965ffc.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-9e37d1229ec7836e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-8729bdd2bd367edf.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-6b1876963d6d9de0.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-e6b69c1f176e24c5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-2bd1e24a95010cc8.png?imageMogr2/auto-orient/strip|imageView2/2/w/742/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-93fa25cf949ddf32.png?imageMogr2/auto-orient/strip|imageView2/2/w/627/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-be61420be381fce0.png?imageMogr2/auto-orient/strip|imageView2/2/w/632/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-13bf3933ea84f8cf.png?imageMogr2/auto-orient/strip|imageView2/2/w/625/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-c20bbb057497a7dd.png?imageMogr2/auto-orient/strip|imageView2/2/w/661/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-243c60046346ab42.png?imageMogr2/auto-orient/strip|imageView2/2/w/566/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-af72fd2149d2c01e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-109a369b44639a9a.png?imageMogr2/auto-orient/strip|imageView2/2/w/419/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-af4af7e182ea3f97.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-9c1dca34462b76ab.png?imageMogr2/auto-orient/strip|imageView2/2/w/1106/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-850c29aaf1e744d6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-81a38e546cd55ec2.png?imageMogr2/auto-orient/strip|imageView2/2/w/913/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-6bf4e045a90846e0.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-671231845f242b38.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-bacf546778de9f8a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-79852776853b7463.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-7a0db5b1f8900318.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-edc2c694de1a9ec9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-bedb4b539faf44dd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-4d1eda70d2f555bf.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-3a055002b79a9cda.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-6bcb92e542416b41.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-f5dc77f36b5b1047.png?imageMogr2/auto-orient/strip|imageView2/2/w/940/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-f9c642e76e871651.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-bbed8a0d31bf19c3.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-6b8e10e2d82cfa6f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-4239eee0b6040f52.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-a2a83ab2654e270f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-339786779f0e1a82.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-6420e503df73b7ef.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-725b3aab5aa350b1.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-6382df507ddd76d6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-5aae9c53795e17a7.png?imageMogr2/auto-orient/strip|imageView2/2/w/970/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-04fe6f98036db57c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-bc71c2ee5976ac53.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-b472dd1a51f30666.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-67b837e6c27d5e9c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-ce7dcde013985e95.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-40cf22cbd65e9ed8.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-73800cce52c3a91e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-f1cf7dd2ea4eb52e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1196/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-f7bb4a2e440abdc6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-a014cde6b0ff9691.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-d7b3a6145ac1dde9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-5d538557f988dc41.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-45ab400eac660e4a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-94a3b7c0b1f01488.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667379409703.png\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-b074f6fffe538c0e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-07ac459878b48666.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-95863501601f7757.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-8739d970a0300acc.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-6a02675fccdc2958.png?imageMogr2/auto-orient/strip|imageView2/2/w/813/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-855edabd9c1e6298.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-e7f27ef6c93c9621.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-49d82185c88813fe.png?imageMogr2/auto-orient/strip|imageView2/2/w/1191/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-e2457fe1291c9bca.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-0ef50227f921ca79.png?imageMogr2/auto-orient/strip|imageView2/2/w/1186/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-a0c3a21bb04ede42.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-75d7bc12ca942415.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-185af899d5e5a922.png?imageMogr2/auto-orient/strip|imageView2/2/w/964/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-f59a9cacb015f074.png?imageMogr2/auto-orient/strip|imageView2/2/w/1191/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-982e09181a0bc4ab.png?imageMogr2/auto-orient/strip|imageView2/2/w/1191/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-aeefc9f3ac87d9d7.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-571c2187a7833f0d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-f295c690e2c90d69.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-aee1ae10f8ccb65f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-f983b11370b6f354.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-93cca695182bf40f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-ab2d75fcfc34f709.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-3a739ef0d60a031e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-ad9e5dcca8c0a1c9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-6731dbc8b1ee1abc.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-f9f42bd392a2375a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-c489215f07bc88f6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-41ae75149e86d0fc.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-a74e4efad5297fc9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-c0463dd919523857.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-3f71256d68f6a39a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-ff2eca30cc7a7b41.png?imageMogr2/auto-orient/strip|imageView2/2/w/953/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-05d3e1e3fd4b1998.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-d2fd109d060e4853.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-ff43ea52e61da271.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667353104296.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667353156210.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667353168950.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667353967275.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667354016916.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667354111917.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355190027.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355225753.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355243806.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355290437.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355309962.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355912799.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355925848.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355942431.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355954876.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667355977035.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667357700449.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667359257784.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667359271001.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667359294138.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667359307466.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667359365849.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667359390169.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667360514829.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667360595120.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667360625889.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667360674057.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667360960551.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667361405519.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667361967727.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667361980906.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364455274.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364467715.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364485841.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364512533.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364531999.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364544365.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667364558739.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365553256.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365564902.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365574186.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365582813.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365594632.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365614526.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365627131.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667365643356.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667366322044.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667366334865.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667366354992.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667367093439.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667367103607.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667367117783.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134234644.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134318751.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134334827.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134406908.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134418029.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134433785.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134443479.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134503541.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134516270.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134541087.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134603284.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381281856.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381292243.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381303984.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381314725.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381329339.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381340262.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381363263.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381369190.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381379709.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381387881.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667381397883.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134733148.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134748102.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667376639187.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667380989020.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134829336.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134843058.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134856908.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134908104.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134923506.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134934296.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134947448.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711134956692.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135014517.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135023459.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135031226.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135048325.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135057507.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135107133.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135124752.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135136533.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135149480.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135202401.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135218012.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135228954.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135249451.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135258254.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135307605.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135320493.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135335781.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135359402.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135408827.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135418634.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135427945.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135436637.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135446264.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135459316.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135510133.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135519519.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135531763.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135555067.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667456595891.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135636714.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135651288.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667457213426.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135710219.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135719074.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135731718.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135740853.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135748262.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135757902.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135810864.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135825877.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135835070.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135843881.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135850788.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667457290051.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667457310694.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135909411.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135918810.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135927766.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135936238.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135943659.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711135952433.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140001363.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140010329.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140021799.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140037288.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140046369.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140052790.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140103018.png\\",\\"https:////upload-images.jianshu.io/upload_images/24878825-84c2b6dbb20379bd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140113717.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140126706.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140139175.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140145464.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140154476.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140205702.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140215771.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140221679.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667383413616.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667383426851.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667383439824.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140239564.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140246552.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140253270.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140303176.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140309246.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140315235.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140322621.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140328600.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667464800635.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667464808648.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140901604.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140908935.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140919026.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140926846.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140939960.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711140954148.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141002285.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141009874.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141020852.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141026616.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141034775.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141041546.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141047797.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141054980.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141102748.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141107863.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141116920.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141126905.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141135450.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141141917.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711143142239.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141202706.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141215089.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141228960.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141235004.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141242219.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141248118.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141254380.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141259172.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141306795.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141320204.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141336403.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141344916.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141424565.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141432424.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141438743.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141451527.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141457440.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667477443337.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141525622.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141534743.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141542529.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141610770.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141618644.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141630025.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141635544.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141640882.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141651960.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141659149.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141709185.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141719481.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141729014.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141738462.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141749812.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141814048.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141820969.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141827421.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141831842.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141835812.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141918631.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141928133.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/image-20240711141940599.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667482393104.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529416700.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529468843.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529501377.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529525625.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529555188.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529935445.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667529997890.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530027631.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530087642.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530559317.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530588074.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530855489.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530873540.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530896194.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667530915899.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667531748354.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667531765353.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667531777044.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667531789776.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667531800266.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533051139.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533317378.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533329949.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533099118.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533116264.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533159151.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533905937.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533998729.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533945803.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667533966974.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667535297210.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667535331395.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667535356167.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667535447943.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667535461760.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667536472497.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667536572617.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667536583206.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667536593443.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667536603663.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667536612426.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537535815.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537545980.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537556126.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537579313.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537633389.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537597180.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667537647735.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667538986701.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667538994997.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667539005478.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667539015955.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667539025835.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667539034448.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667539044343.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667539054334.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667549950633.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667549968634.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667549979756.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667549993498.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667550007368.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667550018211.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667550026697.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667550034241.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551549271.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551573293.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551603231.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551622213.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551666418.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551681933.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551774220.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551795651.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551820246.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667551876896.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667552984288.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667553001753.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667553097775.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667553113320.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667553125992.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667553728581.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667553758569.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555528990.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555547558.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555773736.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555786370.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555798171.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555810521.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555821056.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555829277.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555840971.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555861518.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555872131.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667555883522.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565445140.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565466381.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565479477.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565490854.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565500896.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565515766.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565528777.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565539200.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565551704.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565564142.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565580976.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565594899.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565612296.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565621101.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565639578.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565658900.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565722055.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565733442.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565744336.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565755632.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565766647.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565774632.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565784738.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565795136.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565892893.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565902898.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565914301.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565923196.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565934188.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565943072.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/1667565952459.png\\"],\\"datePublished\\":\\"2023-08-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T08:44:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack-Chen\\",\\"url\\":\\"https://chemnminghe.top\\"}]}"]]},"headers":[{"level":2,"title":"我国互联网发展状况","slug":"我国互联网发展状况","link":"#我国互联网发展状况","children":[]},{"level":2,"title":"1、网络、互连网（互联网）和因特网","slug":"_1、网络、互连网-互联网-和因特网","link":"#_1、网络、互连网-互联网-和因特网","children":[]},{"level":2,"title":"2、因特网发展的三个阶段","slug":"_2、因特网发展的三个阶段","link":"#_2、因特网发展的三个阶段","children":[]},{"level":2,"title":"3、因特网的标准化工作","slug":"_3、因特网的标准化工作","link":"#_3、因特网的标准化工作","children":[]},{"level":2,"title":"4、因特网的组成","slug":"_4、因特网的组成","link":"#_4、因特网的组成","children":[{"level":3,"title":"补充：","slug":"补充","link":"#补充","children":[]}]},{"level":2,"title":"1、电路交换（Circuit Switching）","slug":"_1、电路交换-circuit-switching","link":"#_1、电路交换-circuit-switching","children":[]},{"level":2,"title":"2、分组交换（Packet Switching）","slug":"_2、分组交换-packet-switching","link":"#_2、分组交换-packet-switching","children":[]},{"level":2,"title":"3、报文交换（Message Switching）","slug":"_3、报文交换-message-switching","link":"#_3、报文交换-message-switching","children":[]},{"level":2,"title":"三种交换方式的对比","slug":"三种交换方式的对比","link":"#三种交换方式的对比","children":[]},{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":2,"title":"速率","slug":"速率","link":"#速率","children":[]},{"level":2,"title":"带宽","slug":"带宽","link":"#带宽","children":[]},{"level":2,"title":"吞吐量","slug":"吞吐量","link":"#吞吐量","children":[]},{"level":2,"title":"时延","slug":"时延","link":"#时延","children":[]},{"level":2,"title":"时延带宽积","slug":"时延带宽积","link":"#时延带宽积","children":[]},{"level":2,"title":"往返时间","slug":"往返时间","link":"#往返时间","children":[]},{"level":2,"title":"利用率","slug":"利用率","link":"#利用率","children":[]},{"level":2,"title":"丢包率","slug":"丢包率","link":"#丢包率","children":[]},{"level":2,"title":"1、常见的计算机网络体系结构","slug":"_1、常见的计算机网络体系结构","link":"#_1、常见的计算机网络体系结构","children":[]},{"level":2,"title":"2、计算机网络体系结构分层的必要性","slug":"_2、计算机网络体系结构分层的必要性","link":"#_2、计算机网络体系结构分层的必要性","children":[]},{"level":2,"title":"3、计算机网络体系结构分层思想举例","slug":"_3、计算机网络体系结构分层思想举例","link":"#_3、计算机网络体系结构分层思想举例","children":[]},{"level":2,"title":"4、计算机网络体系结构中的专用术语","slug":"_4、计算机网络体系结构中的专用术语","link":"#_4、计算机网络体系结构中的专用术语","children":[]},{"level":2,"title":"导向型传输媒体","slug":"导向型传输媒体","link":"#导向型传输媒体","children":[]},{"level":2,"title":"非导向型传输媒体","slug":"非导向型传输媒体","link":"#非导向型传输媒体","children":[]},{"level":2,"title":"串行传输和并行传输","slug":"串行传输和并行传输","link":"#串行传输和并行传输","children":[]},{"level":2,"title":"同步传输和异步传输","slug":"同步传输和异步传输","link":"#同步传输和异步传输","children":[]},{"level":2,"title":"单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）","slug":"单向通信-单工-、双向交替通信-半双工-和双向同时通信-全双工","link":"#单向通信-单工-、双向交替通信-半双工-和双向同时通信-全双工","children":[]},{"level":2,"title":"传输媒体与信道的关系","slug":"传输媒体与信道的关系","link":"#传输媒体与信道的关系","children":[]},{"level":2,"title":"常用编码","slug":"常用编码","link":"#常用编码","children":[]},{"level":2,"title":"调制","slug":"调制","link":"#调制","children":[]},{"level":2,"title":"码元","slug":"码元","link":"#码元","children":[]},{"level":2,"title":"频分复用、时分复用和统计时分复用","slug":"频分复用、时分复用和统计时分复用","link":"#频分复用、时分复用和统计时分复用","children":[]},{"level":2,"title":"波分复用","slug":"波分复用","link":"#波分复用","children":[]},{"level":2,"title":"码分复用","slug":"码分复用","link":"#码分复用","children":[]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"三个重要问题","slug":"三个重要问题","link":"#三个重要问题","children":[]},{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[{"level":3,"title":"另外以太网还规定了帧间间隔为96比特时间，因此，MAC帧不需要帧结束定界符","slug":"另外以太网还规定了帧间间隔为96比特时间-因此-mac帧不需要帧结束定界符","link":"#另外以太网还规定了帧间间隔为96比特时间-因此-mac帧不需要帧结束定界符","children":[]}]},{"level":2,"title":"透明传输","slug":"透明传输","link":"#透明传输","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"介绍","slug":"介绍-1","link":"#介绍-1","children":[]},{"level":2,"title":"奇偶校验","slug":"奇偶校验","link":"#奇偶校验","children":[]},{"level":2,"title":"循环冗余校验CRC(Cyclic  Redundancy Check)","slug":"循环冗余校验crc-cyclic-redundancy-check","link":"#循环冗余校验crc-cyclic-redundancy-check","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"三种可靠协议","slug":"三种可靠协议","link":"#三种可靠协议","children":[]},{"level":2,"title":"停止-等待协议","slug":"停止-等待协议","link":"#停止-等待协议","children":[{"level":3,"title":"停止-等待协议可能遇到的四个问题","slug":"停止-等待协议可能遇到的四个问题","link":"#停止-等待协议可能遇到的四个问题","children":[]},{"level":3,"title":"停止-等待协议的信道利用率","slug":"停止-等待协议的信道利用率","link":"#停止-等待协议的信道利用率","children":[]}]},{"level":2,"title":"回退N帧协议GBN","slug":"回退n帧协议gbn","link":"#回退n帧协议gbn","children":[{"level":3,"title":"为什么用回退N帧协议","slug":"为什么用回退n帧协议","link":"#为什么用回退n帧协议","children":[]},{"level":3,"title":"无差错情况流程","slug":"无差错情况流程","link":"#无差错情况流程","children":[]},{"level":3,"title":"累计确认","slug":"累计确认","link":"#累计确认","children":[]},{"level":3,"title":"有差错情况","slug":"有差错情况","link":"#有差错情况","children":[]}]},{"level":2,"title":"选择重传协议SR","slug":"选择重传协议sr","link":"#选择重传协议sr","children":[]},{"level":2,"title":"帧格式","slug":"帧格式","link":"#帧格式","children":[]},{"level":2,"title":"透明传输","slug":"透明传输-1","link":"#透明传输-1","children":[]},{"level":2,"title":"差错检测","slug":"差错检测","link":"#差错检测","children":[]},{"level":2,"title":"工作状态","slug":"工作状态","link":"#工作状态","children":[]},{"level":2,"title":"基本概念","slug":"基本概念-1","link":"#基本概念-1","children":[]},{"level":2,"title":"静态划分信道","slug":"静态划分信道","link":"#静态划分信道","children":[]},{"level":2,"title":"动态接入控制","slug":"动态接入控制","link":"#动态接入控制","children":[]},{"level":2,"title":"随机接入（CSMA/CD协议）","slug":"随机接入-csma-cd协议","link":"#随机接入-csma-cd协议","children":[{"level":3,"title":"基本概念","slug":"基本概念-2","link":"#基本概念-2","children":[]},{"level":3,"title":"多址接入MA","slug":"多址接入ma","link":"#多址接入ma","children":[]},{"level":3,"title":"载波监听CS","slug":"载波监听cs","link":"#载波监听cs","children":[]},{"level":3,"title":"碰撞检测CD","slug":"碰撞检测cd","link":"#碰撞检测cd","children":[]},{"level":3,"title":"CSMA/CD 协议工作流程","slug":"csma-cd-协议工作流程","link":"#csma-cd-协议工作流程","children":[]},{"level":3,"title":"CSMA/CD 协议工作——争用期（碰撞窗口）","slug":"csma-cd-协议工作——争用期-碰撞窗口","link":"#csma-cd-协议工作——争用期-碰撞窗口","children":[]},{"level":3,"title":"CSMA/CD 协议工作——最小帧长","slug":"csma-cd-协议工作——最小帧长","link":"#csma-cd-协议工作——最小帧长","children":[]},{"level":3,"title":"CSMA/CD 协议工作——最大帧长","slug":"csma-cd-协议工作——最大帧长","link":"#csma-cd-协议工作——最大帧长","children":[]},{"level":3,"title":"CSMA/CD 协议工作——截断二进制指数退避算法","slug":"csma-cd-协议工作——截断二进制指数退避算法","link":"#csma-cd-协议工作——截断二进制指数退避算法","children":[]},{"level":3,"title":"CSMA/CD 协议工作——信道利用率","slug":"csma-cd-协议工作——信道利用率","link":"#csma-cd-协议工作——信道利用率","children":[]},{"level":3,"title":"CSMA/CD 协议工作——帧接收流程","slug":"csma-cd-协议工作——帧接收流程","link":"#csma-cd-协议工作——帧接收流程","children":[]},{"level":3,"title":"CSMA/CD 协议的重要特性","slug":"csma-cd-协议的重要特性","link":"#csma-cd-协议的重要特性","children":[]}]},{"level":2,"title":"随机接入（CSMA/CA协议）","slug":"随机接入-csma-ca协议","link":"#随机接入-csma-ca协议","children":[{"level":3,"title":"为什么无线局域网要使用CSMA/CA协议","slug":"为什么无线局域网要使用csma-ca协议","link":"#为什么无线局域网要使用csma-ca协议","children":[]},{"level":3,"title":"帧间间隔IFS（InterFrame Space）","slug":"帧间间隔ifs-interframe-space","link":"#帧间间隔ifs-interframe-space","children":[]},{"level":3,"title":"CSMA/CA协议的工作原理","slug":"csma-ca协议的工作原理","link":"#csma-ca协议的工作原理","children":[]},{"level":3,"title":"CSMA/CA协议的退避算法","slug":"csma-ca协议的退避算法","link":"#csma-ca协议的退避算法","children":[]},{"level":3,"title":"CSMA/CA协议的信道预约和虚拟载波监听","slug":"csma-ca协议的信道预约和虚拟载波监听","link":"#csma-ca协议的信道预约和虚拟载波监听","children":[]}]},{"level":2,"title":"MAC地址","slug":"mac地址","link":"#mac地址","children":[{"level":3,"title":"广播信道的数据链路层必须使用地址（MAC）","slug":"广播信道的数据链路层必须使用地址-mac","link":"#广播信道的数据链路层必须使用地址-mac","children":[]},{"level":3,"title":"IEEE 802局域网的MAC地址格式","slug":"ieee-802局域网的mac地址格式","link":"#ieee-802局域网的mac地址格式","children":[]},{"level":3,"title":"IEEE 802局域网的MAC地址发送顺序","slug":"ieee-802局域网的mac地址发送顺序","link":"#ieee-802局域网的mac地址发送顺序","children":[]},{"level":3,"title":"单播MAC地址举例","slug":"单播mac地址举例","link":"#单播mac地址举例","children":[]},{"level":3,"title":"广播MAC地址举例","slug":"广播mac地址举例","link":"#广播mac地址举例","children":[]},{"level":3,"title":"多播MAC地址举例","slug":"多播mac地址举例","link":"#多播mac地址举例","children":[]}]},{"level":2,"title":"IP地址","slug":"ip地址","link":"#ip地址","children":[{"level":3,"title":"基本概念","slug":"基本概念-3","link":"#基本概念-3","children":[]},{"level":3,"title":"从网络体系结构看IP地址与MAC地址","slug":"从网络体系结构看ip地址与mac地址","link":"#从网络体系结构看ip地址与mac地址","children":[]},{"level":3,"title":"数据包转发过程中IP地址与MAC地址的变化情况","slug":"数据包转发过程中ip地址与mac地址的变化情况","link":"#数据包转发过程中ip地址与mac地址的变化情况","children":[]}]},{"level":2,"title":"ARP协议","slug":"arp协议","link":"#arp协议","children":[{"level":3,"title":"流程","slug":"流程","link":"#流程","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"集线器-在物理层扩展以太网","slug":"集线器-在物理层扩展以太网","link":"#集线器-在物理层扩展以太网","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"集线器HUB在物理层扩展以太网","slug":"集线器hub在物理层扩展以太网","link":"#集线器hub在物理层扩展以太网","children":[]}]},{"level":2,"title":"以太网交换机-在数据链路层扩展以太网","slug":"以太网交换机-在数据链路层扩展以太网","link":"#以太网交换机-在数据链路层扩展以太网","children":[{"level":3,"title":"概念","slug":"概念-1","link":"#概念-1","children":[]},{"level":3,"title":"集线器HUB与交换机SWITCH区别","slug":"集线器hub与交换机switch区别","link":"#集线器hub与交换机switch区别","children":[]}]},{"level":2,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]},{"level":2,"title":"自学习和转发帧的例子","slug":"自学习和转发帧的例子","link":"#自学习和转发帧的例子","children":[]},{"level":2,"title":"总结","slug":"总结-3","link":"#总结-3","children":[]},{"level":2,"title":"如何提高以太网的可靠性","slug":"如何提高以太网的可靠性","link":"#如何提高以太网的可靠性","children":[]},{"level":2,"title":"生成树协议STP","slug":"生成树协议stp","link":"#生成树协议stp","children":[]},{"level":2,"title":"为什么要虚拟局域网VLAN","slug":"为什么要虚拟局域网vlan","link":"#为什么要虚拟局域网vlan","children":[]},{"level":2,"title":"概念","slug":"概念-2","link":"#概念-2","children":[]},{"level":2,"title":"虚拟局域网VLAN的实现机制","slug":"虚拟局域网vlan的实现机制","link":"#虚拟局域网vlan的实现机制","children":[]},{"level":2,"title":"总结","slug":"总结-4","link":"#总结-4","children":[{"level":3,"title":"无线局域网的物理层","slug":"无线局域网的物理层","link":"#无线局域网的物理层","children":[]}]},{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"总结","slug":"总结-5","link":"#总结-5","children":[]},{"level":2,"title":"面向连接的虚电路服务","slug":"面向连接的虚电路服务","link":"#面向连接的虚电路服务","children":[]},{"level":2,"title":"无连接的数据报服务","slug":"无连接的数据报服务","link":"#无连接的数据报服务","children":[]},{"level":2,"title":"虚电路服务与数据报服务的对比","slug":"虚电路服务与数据报服务的对比","link":"#虚电路服务与数据报服务的对比","children":[]},{"level":2,"title":"概述","slug":"概述-1","link":"#概述-1","children":[]},{"level":2,"title":"分类编制的IPv4地址","slug":"分类编制的ipv4地址","link":"#分类编制的ipv4地址","children":[{"level":3,"title":"简介","slug":"简介-1","link":"#简介-1","children":[]},{"level":3,"title":"总结","slug":"总结-6","link":"#总结-6","children":[]}]},{"level":2,"title":"划分子网的IPv4地址","slug":"划分子网的ipv4地址","link":"#划分子网的ipv4地址","children":[{"level":3,"title":"为什么要划分子网","slug":"为什么要划分子网","link":"#为什么要划分子网","children":[]},{"level":3,"title":"如何划分子网","slug":"如何划分子网","link":"#如何划分子网","children":[]},{"level":3,"title":"子网掩码","slug":"子网掩码","link":"#子网掩码","children":[]},{"level":3,"title":"总结","slug":"总结-7","link":"#总结-7","children":[]}]},{"level":2,"title":"无分类编址的IPv4地址","slug":"无分类编址的ipv4地址","link":"#无分类编址的ipv4地址","children":[{"level":3,"title":"为什么使用无分类编址","slug":"为什么使用无分类编址","link":"#为什么使用无分类编址","children":[]},{"level":3,"title":"如何使用无分类编址","slug":"如何使用无分类编址","link":"#如何使用无分类编址","children":[]},{"level":3,"title":"路由聚合（构造超网）","slug":"路由聚合-构造超网","link":"#路由聚合-构造超网","children":[]},{"level":3,"title":"总结","slug":"总结-8","link":"#总结-8","children":[]}]},{"level":2,"title":"IPv4地址的应用规划","slug":"ipv4地址的应用规划","link":"#ipv4地址的应用规划","children":[{"level":3,"title":"定长的子网掩码FLSM（Fixed Length Subnet Mask）","slug":"定长的子网掩码flsm-fixed-length-subnet-mask","link":"#定长的子网掩码flsm-fixed-length-subnet-mask","children":[]},{"level":3,"title":"变长的子网掩码VLSM（Variable Length Subnet Mask）","slug":"变长的子网掩码vlsm-variable-length-subnet-mask","link":"#变长的子网掩码vlsm-variable-length-subnet-mask","children":[]}]},{"level":2,"title":"概念","slug":"概念-3","link":"#概念-3","children":[]},{"level":2,"title":"多种情况举例","slug":"多种情况举例","link":"#多种情况举例","children":[]},{"level":2,"title":"总结","slug":"总结-9","link":"#总结-9","children":[]},{"level":2,"title":"概述","slug":"概述-2","link":"#概述-2","children":[]},{"level":2,"title":"内部网关协议IGP","slug":"内部网关协议igp","link":"#内部网关协议igp","children":[{"level":3,"title":"路由信息协议RIP","slug":"路由信息协议rip","link":"#路由信息协议rip","children":[]},{"level":3,"title":"开放最短路径优先OSPF","slug":"开放最短路径优先ospf","link":"#开放最短路径优先ospf","children":[]}]},{"level":2,"title":"外部网关协议EGP","slug":"外部网关协议egp","link":"#外部网关协议egp","children":[{"level":3,"title":"边界网关协议BGP","slug":"边界网关协议bgp","link":"#边界网关协议bgp","children":[]},{"level":3,"title":"直接封装RIP、OSPF和BGP报文的协议","slug":"直接封装rip、ospf和bgp报文的协议","link":"#直接封装rip、ospf和bgp报文的协议","children":[]}]},{"level":2,"title":"各字段的作用","slug":"各字段的作用","link":"#各字段的作用","children":[]},{"level":2,"title":"总结","slug":"总结-10","link":"#总结-10","children":[]},{"level":2,"title":"概念","slug":"概念-4","link":"#概念-4","children":[]},{"level":2,"title":"ICMP差错报告报文","slug":"icmp差错报告报文","link":"#icmp差错报告报文","children":[{"level":3,"title":"终点不可达","slug":"终点不可达","link":"#终点不可达","children":[]},{"level":3,"title":"源点抑制","slug":"源点抑制","link":"#源点抑制","children":[]},{"level":3,"title":"时间超过","slug":"时间超过","link":"#时间超过","children":[]},{"level":3,"title":"参数问题","slug":"参数问题","link":"#参数问题","children":[]},{"level":3,"title":"改变路由（重定向）","slug":"改变路由-重定向","link":"#改变路由-重定向","children":[]},{"level":3,"title":"不应发送ICMP差错报告报文情况","slug":"不应发送icmp差错报告报文情况","link":"#不应发送icmp差错报告报文情况","children":[]}]},{"level":2,"title":"ICMP应用举例","slug":"icmp应用举例","link":"#icmp应用举例","children":[{"level":3,"title":"分组网间探测PING（Packet InterNet Groper）","slug":"分组网间探测ping-packet-internet-groper","link":"#分组网间探测ping-packet-internet-groper","children":[]},{"level":3,"title":"跟踪路由（traceroute）","slug":"跟踪路由-traceroute","link":"#跟踪路由-traceroute","children":[]}]},{"level":2,"title":"总结","slug":"总结-11","link":"#总结-11","children":[]},{"level":2,"title":"虚拟专用网VPN (IP隧道技术)","slug":"虚拟专用网vpn-ip隧道技术","link":"#虚拟专用网vpn-ip隧道技术","children":[]},{"level":2,"title":"网络地址转换NAT","slug":"网络地址转换nat","link":"#网络地址转换nat","children":[]},{"level":2,"title":"总结","slug":"总结-12","link":"#总结-12","children":[]},{"level":2,"title":"IP多播技术的相关基本概念","slug":"ip多播技术的相关基本概念","link":"#ip多播技术的相关基本概念","children":[]},{"level":2,"title":"在局域网上进行硬件多播","slug":"在局域网上进行硬件多播","link":"#在局域网上进行硬件多播","children":[]},{"level":2,"title":"在因特网上进行IP多播需要的两种协议","slug":"在因特网上进行ip多播需要的两种协议","link":"#在因特网上进行ip多播需要的两种协议","children":[]},{"level":2,"title":"IPv6数据报的首部","slug":"ipv6数据报的首部","link":"#ipv6数据报的首部","children":[]},{"level":2,"title":"IPv6地址","slug":"ipv6地址","link":"#ipv6地址","children":[]},{"level":2,"title":"从IPv4向IPv6过渡","slug":"从ipv4向ipv6过渡","link":"#从ipv4向ipv6过渡","children":[]},{"level":2,"title":"网际控制报文协议ICMPv6","slug":"网际控制报文协议icmpv6","link":"#网际控制报文协议icmpv6","children":[{"level":3,"title":"网际控制报文协议ICMPv6概述","slug":"网际控制报文协议icmpv6概述","link":"#网际控制报文协议icmpv6概述","children":[]},{"level":3,"title":"ICMPv6报文的封装","slug":"icmpv6报文的封装","link":"#icmpv6报文的封装","children":[]},{"level":3,"title":"ICMPv6报文的分类","slug":"icmpv6报文的分类","link":"#icmpv6报文的分类","children":[]}]},{"level":2,"title":"概念","slug":"概念-5","link":"#概念-5","children":[]},{"level":2,"title":"总结","slug":"总结-13","link":"#总结-13","children":[]},{"level":2,"title":"各字段的作用","slug":"各字段的作用-1","link":"#各字段的作用-1","children":[]},{"level":2,"title":"运输层端口号、复用与分用的概念","slug":"运输层端口号、复用与分用的概念","link":"#运输层端口号、复用与分用的概念","children":[]},{"level":2,"title":"为什么用端口号","slug":"为什么用端口号","link":"#为什么用端口号","children":[]},{"level":2,"title":"发送方的复用和接收方的分用","slug":"发送方的复用和接收方的分用","link":"#发送方的复用和接收方的分用","children":[]},{"level":2,"title":"TCP/IP体系的应用层常用协议所使用的运输层熟知端口号","slug":"tcp-ip体系的应用层常用协议所使用的运输层熟知端口号","link":"#tcp-ip体系的应用层常用协议所使用的运输层熟知端口号","children":[]},{"level":2,"title":"运输层传输流程","slug":"运输层传输流程","link":"#运输层传输流程","children":[]},{"level":2,"title":"概念","slug":"概念-6","link":"#概念-6","children":[]},{"level":2,"title":"用户数据报协议UDP（User Datagram Protocol）","slug":"用户数据报协议udp-user-datagram-protocol","link":"#用户数据报协议udp-user-datagram-protocol","children":[]},{"level":2,"title":"传输控制协议TCP（Transmission Control Protocol）","slug":"传输控制协议tcp-transmission-control-protocol","link":"#传输控制协议tcp-transmission-control-protocol","children":[]},{"level":2,"title":"总结","slug":"总结-14","link":"#总结-14","children":[]},{"level":2,"title":"概念","slug":"概念-7","link":"#概念-7","children":[]},{"level":2,"title":"总结","slug":"总结-15","link":"#总结-15","children":[]},{"level":2,"title":"概念","slug":"概念-8","link":"#概念-8","children":[]},{"level":2,"title":"拥塞控制的算法","slug":"拥塞控制的算法","link":"#拥塞控制的算法","children":[{"level":3,"title":"慢开始和拥塞避免","slug":"慢开始和拥塞避免","link":"#慢开始和拥塞避免","children":[]},{"level":3,"title":"快重传和快恢复","slug":"快重传和快恢复","link":"#快重传和快恢复","children":[]}]},{"level":2,"title":"概念","slug":"概念-9","link":"#概念-9","children":[]},{"level":2,"title":"TCP的连接建立","slug":"tcp的连接建立","link":"#tcp的连接建立","children":[{"level":3,"title":"TCP的连接建立要解决以下三个问题","slug":"tcp的连接建立要解决以下三个问题","link":"#tcp的连接建立要解决以下三个问题","children":[]},{"level":3,"title":"TCP使用“三报文握手”建立连接","slug":"tcp使用-三报文握手-建立连接","link":"#tcp使用-三报文握手-建立连接","children":[]},{"level":3,"title":"总结","slug":"总结-16","link":"#总结-16","children":[]}]},{"level":2,"title":"TCP的连接释放","slug":"tcp的连接释放","link":"#tcp的连接释放","children":[{"level":3,"title":"TCP通过“四报文挥手”来释放连接","slug":"tcp通过-四报文挥手-来释放连接","link":"#tcp通过-四报文挥手-来释放连接","children":[]},{"level":3,"title":"TCP保活计时器的作用","slug":"tcp保活计时器的作用","link":"#tcp保活计时器的作用","children":[]}]},{"level":2,"title":"概念","slug":"概念-10","link":"#概念-10","children":[]},{"level":2,"title":"客户/服务器方式（C/S方式）","slug":"客户-服务器方式-c-s方式","link":"#客户-服务器方式-c-s方式","children":[]},{"level":2,"title":"对等方式（P2P方式）","slug":"对等方式-p2p方式","link":"#对等方式-p2p方式","children":[]},{"level":2,"title":"总结","slug":"总结-17","link":"#总结-17","children":[]},{"level":2,"title":"概念","slug":"概念-11","link":"#概念-11","children":[]},{"level":2,"title":"DHCP的作用","slug":"dhcp的作用","link":"#dhcp的作用","children":[]},{"level":2,"title":"DHCP的工作过程","slug":"dhcp的工作过程","link":"#dhcp的工作过程","children":[]},{"level":2,"title":"DHCP中继代理","slug":"dhcp中继代理","link":"#dhcp中继代理","children":[]},{"level":2,"title":"总结","slug":"总结-18","link":"#总结-18","children":[]},{"level":2,"title":"概述","slug":"概述-3","link":"#概述-3","children":[]},{"level":2,"title":"域名解析过程","slug":"域名解析过程","link":"#域名解析过程","children":[]},{"level":2,"title":"总结","slug":"总结-19","link":"#总结-19","children":[]},{"level":2,"title":"概念","slug":"概念-12","link":"#概念-12","children":[]},{"level":2,"title":"文件传送协议FTP的应用","slug":"文件传送协议ftp的应用","link":"#文件传送协议ftp的应用","children":[]},{"level":2,"title":"FTP基本工作原理","slug":"ftp基本工作原理","link":"#ftp基本工作原理","children":[]},{"level":2,"title":"总结","slug":"总结-20","link":"#总结-20","children":[]},{"level":2,"title":"概念","slug":"概念-13","link":"#概念-13","children":[]},{"level":2,"title":"邮件发送和接收过程","slug":"邮件发送和接收过程","link":"#邮件发送和接收过程","children":[]},{"level":2,"title":"简单邮件传送协议SMTP（Simple Mail Transfer Protocol）的基本工作原理","slug":"简单邮件传送协议smtp-simple-mail-transfer-protocol-的基本工作原理","link":"#简单邮件传送协议smtp-simple-mail-transfer-protocol-的基本工作原理","children":[]},{"level":2,"title":"电子邮件的信息格式","slug":"电子邮件的信息格式","link":"#电子邮件的信息格式","children":[]},{"level":2,"title":"邮件读取","slug":"邮件读取","link":"#邮件读取","children":[]},{"level":2,"title":"基于万维网的电子邮件","slug":"基于万维网的电子邮件","link":"#基于万维网的电子邮件","children":[]},{"level":2,"title":"总结","slug":"总结-21","link":"#总结-21","children":[]},{"level":2,"title":"概念","slug":"概念-14","link":"#概念-14","children":[]},{"level":2,"title":"超文本传输协议HTTP（Hyper Transfer Protocol）","slug":"超文本传输协议http-hyper-transfer-protocol","link":"#超文本传输协议http-hyper-transfer-protocol","children":[{"level":3,"title":"概念和传输过程","slug":"概念和传输过程","link":"#概念和传输过程","children":[]},{"level":3,"title":"HTTP报文格式","slug":"http报文格式","link":"#http报文格式","children":[]},{"level":3,"title":"使用Cookie在服务器上记录用户信息","slug":"使用cookie在服务器上记录用户信息","link":"#使用cookie在服务器上记录用户信息","children":[]},{"level":3,"title":"万维网缓存与代理服务器","slug":"万维网缓存与代理服务器","link":"#万维网缓存与代理服务器","children":[]}]},{"level":2,"title":"7.2.2对称密钥密码体制","slug":"_7-2-2对称密钥密码体制","link":"#_7-2-2对称密钥密码体制","children":[{"level":3,"title":"数据加密标准DES","slug":"数据加密标准des","link":"#数据加密标准des","children":[]},{"level":3,"title":"","slug":"-5","link":"#-5","children":[]},{"level":3,"title":"三重DES","slug":"三重des","link":"#三重des","children":[]},{"level":3,"title":"高级加密标准AES","slug":"高级加密标准aes","link":"#高级加密标准aes","children":[]}]},{"level":2,"title":"7.2.3 公钥密码体制","slug":"_7-2-3-公钥密码体制","link":"#_7-2-3-公钥密码体制","children":[{"level":3,"title":"公钥密码体制的产生原因","slug":"公钥密码体制的产生原因","link":"#公钥密码体制的产生原因","children":[]},{"level":3,"title":"公钥密码体制","slug":"公钥密码体制","link":"#公钥密码体制","children":[]}]},{"level":2,"title":"7.3报文完整性与鉴别","slug":"_7-3报文完整性与鉴别","link":"#_7-3报文完整性与鉴别","children":[]},{"level":2,"title":"7.3.1 报文摘要和报文鉴别码","slug":"_7-3-1-报文摘要和报文鉴别码","link":"#_7-3-1-报文摘要和报文鉴别码","children":[{"level":3,"title":"报文完整性与鉴别的概念","slug":"报文完整性与鉴别的概念","link":"#报文完整性与鉴别的概念","children":[]},{"level":3,"title":"报文摘要和报文鉴别码","slug":"报文摘要和报文鉴别码","link":"#报文摘要和报文鉴别码","children":[]},{"level":3,"title":"密码散列函数","slug":"密码散列函数","link":"#密码散列函数","children":[]},{"level":3,"title":"实用的报文摘要算法","slug":"实用的报文摘要算法","link":"#实用的报文摘要算法","children":[]},{"level":3,"title":"散列报文摘要算法","slug":"散列报文摘要算法","link":"#散列报文摘要算法","children":[]},{"level":3,"title":"散列报文鉴别码","slug":"散列报文鉴别码","link":"#散列报文鉴别码","children":[]}]},{"level":2,"title":"7.3.2数字签名","slug":"_7-3-2数字签名","link":"#_7-3-2数字签名","children":[]},{"level":2,"title":"","slug":"-6","link":"#-6","children":[]},{"level":2,"title":"访问控制的基本概念","slug":"访问控制的基本概念","link":"#访问控制的基本概念","children":[]},{"level":2,"title":"三类典型的访问控制策略","slug":"三类典型的访问控制策略","link":"#三类典型的访问控制策略","children":[]},{"level":2,"title":"7.7.1物理层和数据链路层","slug":"_7-7-1物理层和数据链路层","link":"#_7-7-1物理层和数据链路层","children":[]},{"level":2,"title":"7.7.2网络层","slug":"_7-7-2网络层","link":"#_7-7-2网络层","children":[{"level":3,"title":"IPSec协议栈概述","slug":"ipsec协议栈概述","link":"#ipsec协议栈概述","children":[]},{"level":3,"title":"安全关联","slug":"安全关联","link":"#安全关联","children":[]},{"level":3,"title":"IP安全数据报的格式","slug":"ip安全数据报的格式","link":"#ip安全数据报的格式","children":[]},{"level":3,"title":"IPSec的其他构件","slug":"ipsec的其他构件","link":"#ipsec的其他构件","children":[]}]},{"level":2,"title":"7.7.3运输层","slug":"_7-7-3运输层","link":"#_7-7-3运输层","children":[{"level":3,"title":"运输层安全实例：SSL/TLS","slug":"运输层安全实例-ssl-tls","link":"#运输层安全实例-ssl-tls","children":[]}]},{"level":2,"title":"7.7.4应用层安全实例PGP","slug":"_7-7-4应用层安全实例pgp","link":"#_7-7-4应用层安全实例pgp","children":[]},{"level":2,"title":"防火墙","slug":"防火墙","link":"#防火墙","children":[]},{"level":2,"title":"入侵检测系统","slug":"入侵检测系统","link":"#入侵检测系统","children":[]}],"git":{"createdTime":1720778176000,"updatedTime":1721465049000,"contributors":[{"name":"陈铭鹤","email":"615880048@qq.com","commits":2}]},"readingTime":{"minutes":146.71,"words":44013},"filePathRelative":"posts/计算机基础/计算机网络.md","localizedDate":"2023年8月1日","excerpt":"\\n<h1>图示说明</h1>\\n<figure><img src=\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp.webp\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>\\n<p>代表着主机</p>\\n<figure><img src=\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/computerNetworks/webp-1711859957037-1.webp\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}');export{m as comp,u as data};
