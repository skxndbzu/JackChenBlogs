import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as e}from"./app-Pz-t-dus.js";const n={},t=e(`<h2 id="安硕信息-南方部" tabindex="-1"><a class="header-anchor" href="#安硕信息-南方部"><span>安硕信息(南方部)</span></a></h2><h3 id="面试流程" tabindex="-1"><a class="header-anchor" href="#面试流程"><span>面试流程</span></a></h3><p>技术初面 -&gt;</p><h4 id="技术初面" tabindex="-1"><a class="header-anchor" href="#技术初面"><span>技术初面</span></a></h4><h5 id="学习java的方法" tabindex="-1"><a class="header-anchor" href="#学习java的方法"><span>学习Java的方法</span></a></h5><h5 id="学习java过程中有没有什么比较难的点" tabindex="-1"><a class="header-anchor" href="#学习java过程中有没有什么比较难的点"><span>学习Java过程中有没有什么比较难的点</span></a></h5><h5 id="stream流有没有用过-一些常用的方法" tabindex="-1"><a class="header-anchor" href="#stream流有没有用过-一些常用的方法"><span>Stream流有没有用过,一些常用的方法?</span></a></h5><p>中间操作： Filter(过滤) Map(转换) Sorted(排序) Distinct(去重) Limit(限制) Skip(跳过) Peek(展示)</p><p>终止操作： forEach(循环) Collect(收集) Count(计数) Reduce(聚合) AnyMatch(任意匹配) AllMatch(全部匹配) NoneMatch(无匹配)</p><h5 id="多线程有用过吗" tabindex="-1"><a class="header-anchor" href="#多线程有用过吗"><span>多线程有用过吗</span></a></h5><h5 id="如何保证共享数据的安全性" tabindex="-1"><a class="header-anchor" href="#如何保证共享数据的安全性"><span>如何保证共享数据的安全性</span></a></h5><h5 id="synchronized和lock的区别-没答上" tabindex="-1"><a class="header-anchor" href="#synchronized和lock的区别-没答上"><span>Synchronized和Lock的区别(没答上)</span></a></h5><p>1、两者所处层面不同 synchronized是Java中的一个关键字，当我们调用它时会从在虚拟机指令层面加锁，关键字为monitorenter和monitorexit Lock是Java中的一个接口，它有许多的实现类来为它提供各种功能，加锁的关键代码为大体为Lock和unLock； 2、获锁方式 synchronized可对实例方法、静态方法和代码块加锁，相对应的，加锁前需要获得实例对象的锁或类对象的锁或指定对象的锁。说到底就是要先获得对象的监视器（即对象的锁）然后才能够进行相关操作。 Lock的使用离不开它的实现类AQS，而它的加锁并不是针对对象的，而是针对当前线程的，并且AQS中有一个原子类state来进行加锁次数的计数 3、获锁失败 使用关键字synchronized加锁的程序中，获锁失败的对象会被加入到一个虚拟的等待队列中被阻塞，直到锁被释放；1.6以后加入了自旋操作 使用Lock加锁的程序中，获锁失败的线程会被自动加入到AQS的等待队列中进行自旋，自旋的同时再尝试去获取锁，等到自旋到一定次数并且获锁操作未成功，线程就会被阻塞 4、偏向或重入 synchronized中叫做偏向锁 当线程访问同步块时，会使用 CAS 将线程 ID 更新到锁对象的 Mark Word 中，如果更新成功则获得偏向锁，并且之后每次进入这个对象锁相关的同步块时都不需要再次获取锁了。 Lock中叫做重入锁 AQS的实现类ReentrantLock实现了重入的机制，即若线程a已经获得了锁，a再次请求锁时则会判断a是否持正有锁，然后会将原子值state+1来实现重入的计数操作 5、Lock独有的队列 condition队列是AQS中的一个Lock的子接口的内部现类，它一般会和ReentrantLock一起使用来满足除了加锁和解锁以外的一些附加条件，比如对线程的分组和临界数量的判断（阻塞队列） 6、解锁操作 synchronized：不能指定解锁操作，执行完代码块的对象会自动释放锁 Lock：可调用ulock方法去释放锁比synchronized更灵活</p><h5 id="说一下redis的用途" tabindex="-1"><a class="header-anchor" href="#说一下redis的用途"><span>说一下Redis的用途</span></a></h5><p>1.全页面缓存</p><p>整页缓存。如果你正在使用服务器端呈现的内容，则不需要为每个单独的请求重新渲染每个页面。使用如Redis这样的缓存，你可以缓存经常请求的内容，从而大大减少请求最多的页面的延迟，并且大多数框架针对Redis缓存页面都有hooks。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">// 设置全页面缓存1分钟</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">SET key &quot;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.顺序排列</p><p>由于Redis在内存中Set数据结构可以非常快速和高效进行递增和递减，性能远远高于SQL查询。比较这与Redis的排序集相结合意味着你可以以毫秒为单位抓取列表中评分最高的项目，而且实现起来非常容易。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">// 向排序集合中添加值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ZADD sortedSet 1 &quot;one&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">// 从排序集合中获取所有值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ZRANGE sortedSet 0 -1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">// 从排序集合中获取所有值与权重</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ZRANGE sortedSet 0 -1 WITHSCORES</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.会话Session存储</p><p>我所见的Redis最常见的用途是会话存储。与其他会话存储（如Memcache）不同，Redis可以保留数据，以便在缓存停止的情况下，在重新启动时，所有数据仍然存在。即便不是需要严格持续的任务，此功能仍可以为你的用户省去大量的麻烦。没有人会乐于见到他们的会话被无缘无故随机删掉。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">// 设置一分钟过期的session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">SET randomHash &quot;{userId}&quot; EX 60</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">// 获取用户ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">GET randomHash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.队列</p><p>使用Redis可以做的一个不太常见，但非常有用的事情是排队。无论是电子邮件队列还是其他应用程序使用的数据，你都可以在Redis中创建一个高效的队列。任何熟悉堆栈以及会push和pop项目的开发人员都可以轻松自然地使用此功能。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">// 添加消息  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">HSET messages &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ZADD due &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">due_timestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">// 接收消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ZRANGEBYSCORE due -inf &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">current_timestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; LIMIT 0 1  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">HGET messages &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">message_id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">// 删除消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ZREM due &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">message_id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">HDEL messages &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">message_id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.pub/sub</p><p>Redis在真实世界的最终用法即我将在这篇文章中提出的pub / sub。这是Redis内置的最强大的功能之一；得到的可能是无限的。你可以创建一个实时聊天系统，在社交网络上触发好友请求的通知等等。这个功能是Redis提供的最被低估的功能之一，但功能非常强大，而且使用简单。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">// 向通道中推送消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">PUBLISH channel message</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">// 从通道中获取消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">SUBSCRIBE channel</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="数据库和缓存的一致性" tabindex="-1"><a class="header-anchor" href="#数据库和缓存的一致性"><span>数据库和缓存的一致性</span></a></h5><h5 id="讲一下抽奖项目的分段消费和加锁确保数据安全" tabindex="-1"><a class="header-anchor" href="#讲一下抽奖项目的分段消费和加锁确保数据安全"><span>讲一下抽奖项目的分段消费和加锁确保数据安全</span></a></h5><h5 id="讲一下工作项目的索引优化和分页查询优化" tabindex="-1"><a class="header-anchor" href="#讲一下工作项目的索引优化和分页查询优化"><span>讲一下工作项目的索引优化和分页查询优化</span></a></h5><h5 id="常用的数据结构-没答上" tabindex="-1"><a class="header-anchor" href="#常用的数据结构-没答上"><span>常用的数据结构(没答上)</span></a></h5><ol><li><p>顺序表（数组 Array）</p></li><li><p>链表</p></li><li><p>栈（Stack）</p></li><li><p>队列（Queue）</p></li><li><p>树（Tree）</p></li><li><p>堆（Heap）其实是完全二叉树</p></li><li><p>图（graph）</p></li><li><p>散列表（Hash）</p></li></ol><h5 id="jvm栈和堆分别存储了那些东西" tabindex="-1"><a class="header-anchor" href="#jvm栈和堆分别存储了那些东西"><span>JVM栈和堆分别存储了那些东西</span></a></h5><h5 id="工作里oom如何排查" tabindex="-1"><a class="header-anchor" href="#工作里oom如何排查"><span>工作里OOM如何排查</span></a></h5><h4 id="技术经理面" tabindex="-1"><a class="header-anchor" href="#技术经理面"><span>技术经理面</span></a></h4><h5 id="分库分表怎么处理的" tabindex="-1"><a class="header-anchor" href="#分库分表怎么处理的"><span>分库分表怎么处理的</span></a></h5><p>横向拆分和纵向拆分，使用现有shardingSphere或者DB-router</p>`,39),h=[t];function l(r,d){return a(),s("div",null,h)}const c=i(n,[["render",l],["__file","安硕信息(南方部).html.vue"]]),o=JSON.parse('{"path":"/interviewExperience/%E5%AE%89%E7%A1%95%E4%BF%A1%E6%81%AF(%E5%8D%97%E6%96%B9%E9%83%A8).html","title":"安硕信息(南方部)","lang":"zh-CN","frontmatter":{"title":"安硕信息(南方部)","icon":"fab fa-markdown","order":6,"category":["使用指南"],"tag":["Markdown"],"description":"安硕信息(南方部) 面试流程 技术初面 -> 技术初面 学习Java的方法 学习Java过程中有没有什么比较难的点 Stream流有没有用过,一些常用的方法? 中间操作： Filter(过滤) Map(转换) Sorted(排序) Distinct(去重) Limit(限制) Skip(跳过) Peek(展示) 终止操作： forEach(循环) Co...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/interviewExperience/%E5%AE%89%E7%A1%95%E4%BF%A1%E6%81%AF(%E5%8D%97%E6%96%B9%E9%83%A8).html"}],["meta",{"property":"og:site_name","content":"麻花的小站"}],["meta",{"property":"og:title","content":"安硕信息(南方部)"}],["meta",{"property":"og:description","content":"安硕信息(南方部) 面试流程 技术初面 -> 技术初面 学习Java的方法 学习Java过程中有没有什么比较难的点 Stream流有没有用过,一些常用的方法? 中间操作： Filter(过滤) Map(转换) Sorted(排序) Distinct(去重) Limit(限制) Skip(跳过) Peek(展示) 终止操作： forEach(循环) Co..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-13T15:53:31.000Z"}],["meta",{"property":"article:author","content":"Jack-Chen"}],["meta",{"property":"article:tag","content":"Markdown"}],["meta",{"property":"article:modified_time","content":"2024-11-13T15:53:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"安硕信息(南方部)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-13T15:53:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack-Chen\\",\\"url\\":\\"https://chemnminghe.top\\"}]}"]]},"headers":[{"level":2,"title":"安硕信息(南方部)","slug":"安硕信息-南方部","link":"#安硕信息-南方部","children":[{"level":3,"title":"面试流程","slug":"面试流程","link":"#面试流程","children":[]}]}],"git":{"createdTime":1730296475000,"updatedTime":1731513211000,"contributors":[{"name":"陈铭鹤","email":"615880048@qq.com","commits":1}]},"readingTime":{"minutes":5.37,"words":1612},"filePathRelative":"interviewExperience/安硕信息(南方部).md","localizedDate":"2024年10月30日","excerpt":"<h2>安硕信息(南方部)</h2>\\n<h3>面试流程</h3>\\n<p>技术初面 -&gt;</p>\\n<h4>技术初面</h4>\\n<h5>学习Java的方法</h5>\\n<h5>学习Java过程中有没有什么比较难的点</h5>\\n<h5>Stream流有没有用过,一些常用的方法?</h5>\\n<p>中间操作：\\nFilter(过滤)\\nMap(转换)\\nSorted(排序)\\nDistinct(去重)\\nLimit(限制)\\nSkip(跳过)\\nPeek(展示)</p>\\n<p>终止操作：\\nforEach(循环)\\nCollect(收集)\\nCount(计数)\\nReduce(聚合)\\nAnyMatch(任意匹配)\\nAllMatch(全部匹配)\\nNoneMatch(无匹配)</p>","autoDesc":true}');export{c as comp,o as data};
