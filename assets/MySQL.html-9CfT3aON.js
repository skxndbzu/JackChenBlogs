import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,d as n}from"./app-Pz-t-dus.js";const e={},l=n(`<h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySQL</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h3><p>数据库：DataBase，简称 DB，存储和管理数据的仓库</p><p>数据库的优势：</p><ul><li>可以持久化存储数据</li><li>方便存储和管理数据</li><li>使用了统一的方式操作数据库 SQL</li></ul><p>数据库、数据表、数据的关系介绍：</p><ul><li>数据库 <ul><li>用于存储和管理数据的仓库</li><li>一个库中可以包含多个数据表</li></ul></li><li>数据表 <ul><li>数据库最重要的组成部分之一</li><li>由纵向的列和横向的行组成（类似 excel 表格）</li><li>可以指定列名、数据类型、约束等</li><li>一个表中可以存储多条数据</li></ul></li><li>数据：想要永久化存储的数据</li></ul><p>参考视频：https://www.bilibili.com/video/BV1zJ411M7TB</p><p>参考专栏：https://time.geekbang.org/column/intro/139</p><p>参考书籍：https://book.douban.com/subject/35231266/</p><hr><h3 id="mysql-1" tabindex="-1"><a class="header-anchor" href="#mysql-1"><span>MySQL</span></a></h3><p>MySQL 数据库是一个最流行的关系型数据库管理系统之一，关系型数据库是将数据保存在不同的数据表中，而且表与表之间可以有关联关系，提高了灵活性</p><p>缺点：数据存储在磁盘中，导致读写性能差，而且数据关系复杂，扩展性差</p><p>MySQL 所使用的 SQL 语句是用于访问数据库最常用的标准化语言</p><h4 id="系统数据库" tabindex="-1"><a class="header-anchor" href="#系统数据库"><span>系统数据库</span></a></h4><p>Mysql数据库安装完成后，自带了一下四个数据库，具体作用如下：</p><table><thead><tr><th>数据库</th><th>含义</th></tr></thead><tbody><tr><td>mysql</td><td>存储MySQL服务器正常运行所需要的各种信息 （时区、主从、用户、权限等）</td></tr><tr><td>information_schema</td><td>提供了访问数据库元数据的各种表和视图，包含数据库、表、字段类型及访问权限等</td></tr><tr><td>performance_schema</td><td>为MySQL服务器运行时状态提供了一个底层监控功能，主要用于收集数据库服务器性能参数</td></tr><tr><td>sys</td><td>包含了一系列方便 DBA 和开发人员利用 performance_schema性能数据库进行性能调优和诊断的视图</td></tr></tbody></table><p>MySQL 配置：</p><ul><li><p>MySQL 安装：https://www.jianshu.com/p/ba48f1e386f0</p></li><li><p>MySQL 配置：</p><ul><li><p>修改 MySQL 默认字符集：安装 MySQL 之后第一件事就是修改字符集编码</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>vim /etc/mysql/my.cnf</span></span>
<span class="line"><span></span></span>
<span class="line"><span>添加如下内容：</span></span>
<span class="line"><span>[mysqld]</span></span>
<span class="line"><span>character-set-server=utf8</span></span>
<span class="line"><span>collation-server=utf8_general_ci</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[client]</span></span>
<span class="line"><span>default-character-set=utf8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动 MySQL 服务：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> start/restart</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>登录 MySQL：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  敲回车，输入密码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">初始密码查看：cat</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /var/log/mysqld.log</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">在root@localhost:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   后面的就是初始密码</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看默认字符集命令：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW VARIABLES LIKE &#39;char%&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>修改MySQL登录密码：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>set global validate_password_policy=0;</span></span>
<span class="line"><span>set global validate_password_length=1;</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>set password=password(&#39;密码&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>授予远程连接权限（MySQL 内输入）：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 授权</span></span>
<span class="line"><span>grant all privileges on *.* to &#39;root&#39; @&#39;%&#39; identified by &#39;密码&#39;;</span></span>
<span class="line"><span>-- 刷新</span></span>
<span class="line"><span>flush privileges;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>修改 MySQL 绑定 IP：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/mysql/mysql.conf.d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 666</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mysqld.cnf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mysqld.cnf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># bind-address = 127.0.0.1注释该行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>关闭 Linux 防火墙</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> firewalld.service</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 放行3306端口</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="体系架构" tabindex="-1"><a class="header-anchor" href="#体系架构"><span>体系架构</span></a></h2><h3 id="整体架构" tabindex="-1"><a class="header-anchor" href="#整体架构"><span>整体架构</span></a></h3><p>体系结构详解：</p><ul><li><p>第一层：网络连接层</p><ul><li>一些客户端和链接服务，包含本地 Socket 通信和大多数基于客户端/服务端工具实现的 TCP/IP 通信，主要完成一些类似于连接处理、授权认证、及相关的安全方案</li><li>在该层上引入了<strong>连接池</strong> Connection Pool 的概念，管理缓冲用户连接，线程处理等需要缓存的需求</li><li>在该层上实现基于 SSL 的安全链接，服务器也会为安全接入的每个客户端验证它所具有的操作权限</li></ul></li><li><p>第二层：核心服务层</p><ul><li>查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，所有的内置函数（日期、数学、加密函数等） <ul><li>Management Serveices &amp; Utilities：系统管理和控制工具，备份、安全、复制、集群等</li><li>SQL Interface：接受用户的 SQL 命令，并且返回用户需要查询的结果</li><li>Parser：SQL 语句分析器</li><li>Optimizer：查询优化器</li><li>Caches &amp; Buffers：查询缓存，服务器会查询内部的缓存，如果缓存空间足够大，可以在大量读操作的环境中提升系统性能</li></ul></li><li>所有<strong>跨存储引擎的功能</strong>在这一层实现，如存储过程、触发器、视图等</li><li>在该层服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询顺序，是否利用索引等， 最后生成相应的执行操作</li><li>MySQL 中服务器层不管理事务，<strong>事务是由存储引擎实现的</strong></li></ul></li><li><p>第三层：存储引擎层</p><ul><li>Pluggable Storage Engines：存储引擎接口，MySQL 区别于其他数据库的重要特点就是其存储引擎的架构模式是插件式的（存储引擎是基于表的，而不是数据库）</li><li>存储引擎<strong>真正的负责了 MySQL 中数据的存储和提取</strong>，服务器通过 API 和存储引擎进行通信</li><li>不同的存储引擎具有不同的功能，共用一个 Server 层，可以根据开发的需要，来选取合适的存储引擎</li></ul></li><li><p>第四层：系统文件层</p><ul><li>数据存储层，主要是将数据存储在文件系统之上，并完成与存储引擎的交互</li><li>File System：文件系统，保存配置文件、数据文件、日志文件、错误文件、二进制文件等</li></ul></li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-体系结构.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="建立连接" tabindex="-1"><a class="header-anchor" href="#建立连接"><span>建立连接</span></a></h3><h4 id="连接器" tabindex="-1"><a class="header-anchor" href="#连接器"><span>连接器</span></a></h4><p>池化技术：对于访问数据库来说，建立连接的代价是比较昂贵的，因为每个连接对应一个用来交互的线程，频繁的创建关闭连接比较耗费资源，有必要建立数据库连接池，以提高访问的性能</p><p>连接建立 TCP 以后需要做<strong>权限验证</strong>，验证成功后可以进行执行 SQL。如果这时管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限，只有再新建的连接才会使用新的权限设置</p><p>MySQL 服务器可以同时和多个客户端进行交互，所以要保证每个连接会话的隔离性（事务机制部分详解）</p><p>整体的执行流程：</p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SQL的执行流程.png" style="zoom:33%;"><hr><h4 id="权限信息" tabindex="-1"><a class="header-anchor" href="#权限信息"><span>权限信息</span></a></h4><p>grant 语句会同时修改数据表和内存，判断权限的时候使用的是内存数据</p><p>flush privileges 语句本身会用数据表（磁盘）的数据重建一份内存权限数据，所以在权限数据可能存在不一致的情况下使用，这种不一致往往是由于直接用 DML 语句操作系统权限表导致的，所以尽量不要使用这类语句</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-权限范围.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="连接状态" tabindex="-1"><a class="header-anchor" href="#连接状态"><span>连接状态</span></a></h4><p>客户端如果长时间没有操作，连接器就会自动断开，时间是由参数 wait_timeout 控制的，默认值是 8 小时。如果在连接被断开之后，客户端<strong>再次发送请求</strong>的话，就会收到一个错误提醒：<code>Lost connection to MySQL server during query</code></p><p>数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接；短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个</p><p>为了减少连接的创建，推荐使用长连接，但是<strong>过多的长连接会造成 OOM</strong>，解决方案：</p><ul><li><p>定期断开长连接，使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>KILL CONNECTION id</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>MySQL 5.7 版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源，这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态</p></li></ul><p>SHOW PROCESSLIST：查看当前 MySQL 在进行的线程，可以实时地查看 SQL 的执行情况，其中的 Command 列显示为 Sleep 的这一行，就表示现在系统里面有一个空闲连接</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SHOW_PROCESSLIST命令.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>ID</td><td>用户登录 mysql 时系统分配的 connection_id，可以使用函数 connection_id() 查看</td></tr><tr><td>User</td><td>显示当前用户，如果不是 root，这个命令就只显示用户权限范围的 sql 语句</td></tr><tr><td>Host</td><td>显示这个语句是从哪个 ip 的哪个端口上发的，可以用来跟踪出现问题语句的用户</td></tr><tr><td>db</td><td>显示这个进程目前连接的是哪个数据库</td></tr><tr><td>Command</td><td>显示当前连接的执行的命令，一般取值为休眠 Sleep、查询 Query、连接 Connect 等</td></tr><tr><td>Time</td><td>显示这个状态持续的时间，单位是秒</td></tr><tr><td>State</td><td>显示使用当前连接的 sql 语句的状态，以查询为例，需要经过 copying to tmp table、sorting result、sending data等状态才可以完成</td></tr><tr><td>Info</td><td>显示执行的 sql 语句，是判断问题语句的一个重要依据</td></tr></tbody></table><p><strong>Sending data 状态</strong>表示 MySQL 线程开始访问数据行并把结果返回给客户端，而不仅仅只是返回给客户端，是处于执行器过程中的任意阶段。由于在 Sending data 状态下，MySQL 线程需要做大量磁盘读取操作，所以是整个查询中耗时最长的状态</p><hr><h3 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程"><span>执行流程</span></a></h3><h4 id="查询缓存" tabindex="-1"><a class="header-anchor" href="#查询缓存"><span>查询缓存</span></a></h4><h5 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程"><span>工作流程</span></a></h5><p>当执行完全相同的 SQL 语句的时候，服务器就会直接从缓存中读取结果，当数据被修改，之前的缓存会失效，修改比较频繁的表不适合做查询缓存</p><p>查询过程：</p><ol><li>客户端发送一条查询给服务器</li><li>服务器先会检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果（一般是 K-V 键值对），否则进入下一阶段</li><li>分析器进行 SQL 分析，再由优化器生成对应的执行计划</li><li>执行器根据优化器生成的执行计划，调用存储引擎的 API 来执行查询</li><li>将结果返回给客户端</li></ol><p>大多数情况下不建议使用查询缓存，因为查询缓存往往弊大于利</p><ul><li>查询缓存的<strong>失效非常频繁</strong>，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能费力地把结果存起来，还没使用就被一个更新全清空了，对于更新压力大的数据库来说，查询缓存的命中率会非常低</li><li>除非业务就是有一张静态表，很长时间才会更新一次，比如一个系统配置表，那这张表上的查询才适合使用查询缓存</li></ul><hr><h5 id="缓存配置" tabindex="-1"><a class="header-anchor" href="#缓存配置"><span>缓存配置</span></a></h5><ol><li><p>查看当前 MySQL 数据库是否支持查询缓存：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW VARIABLES LIKE &#39;have_query_cache&#39;;	-- YES</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查看当前 MySQL 是否开启了查询缓存：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW VARIABLES LIKE &#39;query_cache_type&#39;;	-- OFF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><p>OFF 或 0：查询缓存功能关闭</p></li><li><p>ON 或 1：查询缓存功能打开，查询结果符合缓存条件即会缓存，否则不予缓存；可以显式指定 SQL_NO_CACHE 不予缓存</p></li><li><p>DEMAND 或 2：查询缓存功能按需进行，显式指定 SQL_CACHE 的 SELECT 语句才缓存，其它不予缓存</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT SQL_CACHE id, name FROM customer; -- SQL_CACHE:查询结果可缓存</span></span>
<span class="line"><span>SELECT SQL_NO_CACHE id, name FROM customer;-- SQL_NO_CACHE:不使用查询缓存</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>查看查询缓存的占用大小：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW VARIABLES LIKE &#39;query_cache_size&#39;;-- 单位是字节 1048576 / 1024 = 1024 = 1KB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查看查询缓存的状态变量：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW STATUS LIKE &#39;Qcache%&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-查询缓存的状态变量.png" style="zoom:67%;"><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>Qcache_free_blocks</td><td>查询缓存中的可用内存块数</td></tr><tr><td>Qcache_free_memory</td><td>查询缓存的可用内存量</td></tr><tr><td>Qcache_hits</td><td>查询缓存命中数</td></tr><tr><td>Qcache_inserts</td><td>添加到查询缓存的查询数</td></tr><tr><td>Qcache_lowmen_prunes</td><td>由于内存不足而从查询缓存中删除的查询数</td></tr><tr><td>Qcache_not_cached</td><td>非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存）</td></tr><tr><td>Qcache_queries_in_cache</td><td>查询缓存中注册的查询数</td></tr><tr><td>Qcache_total_blocks</td><td>查询缓存中的块总数</td></tr></tbody></table></li><li><p>配置 my.cnf：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 666</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/mysql/my.cnf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> my.cnf</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># mysqld中配置缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">query_cache_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启服务既可生效，执行 SQL 语句进行验证 ，执行一条比较耗时的 SQL 语句，然后再多执行几次，查看后面几次的执行时间；获取通过查看查询缓存的缓存命中数，来判定是否走查询缓存</p></li></ol><hr><h5 id="缓存失效" tabindex="-1"><a class="header-anchor" href="#缓存失效"><span>缓存失效</span></a></h5><p>查询缓存失效的情况：</p><ul><li><p>SQL 语句不一致，要想命中查询缓存，查询的 SQL 语句必须一致，因为<strong>缓存中 key 是查询的语句</strong>，value 是查询结构</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>select count(*) from tb_item;</span></span>
<span class="line"><span>Select count(*) from tb_item;	-- 不走缓存，首字母不一致</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当查询语句中有一些不确定查询时，则不会缓存，比如：now()、current_date()、curdate()、curtime()、rand()、uuid()、user()、database()</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM tb_item WHERE updatetime &lt; NOW() LIMIT 1;</span></span>
<span class="line"><span>SELECT USER();</span></span>
<span class="line"><span>SELECT DATABASE();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不使用任何表查询语句：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT &#39;A&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查询 mysql、information_schema、performance_schema 等系统表时，不走查询缓存：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM information_schema.engines;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>在<strong>跨存储引擎</strong>的存储过程、触发器或存储函数的主体内执行的查询，缓存失效</p></li><li><p>如果表更改，则使用该表的<strong>所有高速缓存查询都将变为无效</strong>并从高速缓存中删除，包括使用 MERGE 映射到已更改表的表的查询，比如：INSERT、UPDATE、DELETE、ALTER TABLE、DROP TABLE、DROP DATABASE</p></li></ul><hr><h4 id="分析器" tabindex="-1"><a class="header-anchor" href="#分析器"><span>分析器</span></a></h4><p>没有命中查询缓存，就开始了 SQL 的真正执行，分析器会对 SQL 语句做解析</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>解析器：处理语法和解析查询，生成一课对应的解析树</p><ul><li>先做<strong>词法分析</strong>，输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么代表什么。从输入的 select 这个关键字识别出来这是一个查询语句；把字符串 t 识别成 表名 t，把字符串 id 识别成列 id</li><li>然后做<strong>语法分析</strong>，根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。如果语句不对，就会收到 <code>You have an error in your SQL syntax</code> 的错误提醒</li></ul><p>预处理器：进一步检查解析树的合法性，比如数据表和数据列是否存在、别名是否有歧义等</p><hr><h4 id="优化器" tabindex="-1"><a class="header-anchor" href="#优化器"><span>优化器</span></a></h4><h5 id="成本分析" tabindex="-1"><a class="header-anchor" href="#成本分析"><span>成本分析</span></a></h5><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序</p><ul><li>根据搜索条件找出所有可能的使用的索引</li><li>成本分析，执行成本由 I/O 成本和 CPU 成本组成，计算全表扫描和使用不同索引执行 SQL 的代价</li><li>找到一个最优的执行方案，用最小的代价去执行语句</li></ul><p>在数据库里面，扫描行数是影响执行代价的因素之一，扫描的行数越少意味着访问磁盘的次数越少，消耗的 CPU 资源越少，优化器还会结合是否使用临时表、是否排序等因素进行综合判断</p><hr><h5 id="统计数据" tabindex="-1"><a class="header-anchor" href="#统计数据"><span>统计数据</span></a></h5><p>MySQL 中保存着两种统计数据：</p><ul><li>innodb_table_stats 存储了表的统计数据，每一条记录对应着一个表的统计数据</li><li>innodb_index_stats 存储了索引的统计数据，每一条记录对应着一个索引的一个统计项的数据</li></ul><p>MySQL 在真正执行语句之前，并不能精确地知道满足条件的记录有多少条，只能根据统计信息来估算记录，统计信息就是索引的区分度，一个索引上不同的值的个数（比如性别只能是男女，就是 2 ），称之为基数（cardinality），<strong>基数越大说明区分度越好</strong></p><p>通过<strong>采样统计</strong>来获取基数，InnoDB 默认会选择 N 个数据页，统计这些页面上的不同值得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数</p><p>在 MySQL 中，有两种存储统计数据的方式，可以通过设置参数 <code>innodb_stats_persistent</code> 的值来选择：</p><ul><li>ON：表示统计信息会持久化存储（默认），采样页数 N 默认为 20，可以通过 <code>innodb_stats_persistent_sample_pages</code> 指定，页数越多统计的数据越准确，但消耗的资源更大</li><li>OFF：表示统计信息只存储在内存，采样页数 N 默认为 8，也可以通过系统变量设置（不推荐，每次重新计算浪费资源）</li></ul><p>数据表是会持续更新的，两种统计信息的更新方式：</p><ul><li>设置 <code>innodb_stats_auto_recalc</code> 为 1，当发生变动的记录数量超过表大小的 10% 时，自动触发重新计算，不过是<strong>异步进行</strong></li><li>调用 <code>ANALYZE TABLE t</code> 手动更新统计信息，只对信息做<strong>重新统计</strong>（不是重建表），没有修改数据，这个过程中加了 MDL 读锁并且是同步进行，所以会暂时阻塞系统</li></ul><p><strong>EXPLAIN 执行计划在优化器阶段生成</strong>，如果 explain 的结果预估的 rows 值跟实际情况差距比较大，可以执行 analyze 命令重新修正信息</p><hr><h5 id="错选索引" tabindex="-1"><a class="header-anchor" href="#错选索引"><span>错选索引</span></a></h5><p>采样统计本身是估算数据，或者 SQL 语句中的字段选择有问题时，可能导致 MySQL 没有选择正确的执行索引</p><p>解决方法：</p><ul><li><p>采用 force index 强行选择一个索引</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">FORCE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;seazean&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>可以考虑修改 SQL 语句，引导 MySQL 使用期望的索引</p></li><li><p>新建一个更合适的索引，来提供给优化器做选择，或删掉误用的索引</p></li></ul><hr><h4 id="执行器" tabindex="-1"><a class="header-anchor" href="#执行器"><span>执行器</span></a></h4><p>开始执行的时候，要先判断一下当前连接对表有没有<strong>执行查询的权限</strong>，如果没有就会返回没有权限的错误，在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。如果有权限，就打开表继续执行，执行器就会根据表的引擎定义，去使用这个引擎提供的接口</p><hr><h4 id="引擎层" tabindex="-1"><a class="header-anchor" href="#引擎层"><span>引擎层</span></a></h4><p>Server 层和存储引擎层的交互是<strong>以记录为单位的</strong>，存储引擎会将单条记录返回给 Server 层做进一步处理，并不是直接返回所有的记录</p><p>工作流程：</p><ul><li>首先根据二级索引选择扫描范围，获取第一条符合二级索引条件的记录，进行回表查询，将聚簇索引的记录返回 Server 层，由 Server 判断记录是否符合要求</li><li>然后在二级索引上继续扫描下一个符合条件的记录</li></ul><p>推荐阅读：https://mp.weixin.qq.com/s/YZ-LckObephrP1f15mzHpA</p><hr><h3 id="终止流程" tabindex="-1"><a class="header-anchor" href="#终止流程"><span>终止流程</span></a></h3><h4 id="终止语句" tabindex="-1"><a class="header-anchor" href="#终止语句"><span>终止语句</span></a></h4><p>终止线程中正在执行的语句：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>KILL QUERY thread_id</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>KILL 不是马上终止的意思，而是告诉执行线程这条语句已经不需要继续执行，可以开始执行停止的逻辑（类似于打断）。因为对表做增删改查操作，会在表上加 MDL 读锁，如果线程被 KILL 时就直接终止，那这个 MDL 读锁就没机会被释放了</p><p>命令 <code>KILL QUERYthread_id_A</code> 的执行流程：</p><ul><li>把 session A 的运行状态改成 THD::KILL_QUERY（将变量 killed 赋值为 THD::KILL_QUERY）</li><li>给 session A 的执行线程发一个信号，让 session A 来处理这个 THD::KILL_QUERY 状态</li></ul><p>会话处于等待状态（锁阻塞），必须满足是一个可以被唤醒的等待，必须有机会去<strong>判断线程的状态</strong>，如果不满足就会造成 KILL 失败</p><p>典型场景：innodb_thread_concurrency 为 2，代表并发线程上限数设置为 2</p><ul><li>session A 执行事务，session B 执行事务，达到线程上限；此时 session C 执行事务会阻塞等待，session D 执行 kill query C 无效</li><li>C 的逻辑是每 10 毫秒判断是否可以进入 InnoDB 执行，如果不行就调用 nanosleep 函数进入 sleep 状态，没有去判断线程状态</li></ul><p>补充：执行 Ctrl+C 的时候，是 MySQL 客户端另外启动一个连接，然后发送一个 KILL QUERY 命令</p><hr><h4 id="终止连接" tabindex="-1"><a class="header-anchor" href="#终止连接"><span>终止连接</span></a></h4><p>断开线程的连接：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>KILL CONNECTION id</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>断开连接后执行 SHOW PROCESSLIST 命令，如果这条语句的 Command 列显示 Killed，代表线程的状态是 KILL_CONNECTION，说明这个线程有语句正在执行，当前状态是停止语句执行中，终止逻辑耗时较长</p><ul><li>超大事务执行期间被 KILL，这时回滚操作需要对事务执行期间生成的所有新数据版本做回收操作，耗时很长</li><li>大查询回滚，如果查询过程中生成了比较大的临时文件，删除临时文件可能需要等待 IO 资源，导致耗时较长</li><li>DDL 命令执行到最后阶段被 KILL，需要删除中间过程的临时文件，也可能受 IO 资源影响耗时较久</li></ul><p>总结：KILL CONNECTION 本质上只是把客户端的 SQL 连接断开，后面的终止流程还是要走 KILL QUERY</p><p>一个事务被 KILL 之后，持续处于回滚状态，不应该强行重启整个 MySQL 进程，应该等待事务自己执行完成，因为重启后依然继续做回滚操作的逻辑</p><hr><h3 id="常用工具" tabindex="-1"><a class="header-anchor" href="#常用工具"><span>常用工具</span></a></h3><h4 id="mysql-2" tabindex="-1"><a class="header-anchor" href="#mysql-2"><span>mysql</span></a></h4><p>mysql 不是指 mysql 服务，而是指 mysql 的客户端工具</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [options] [database]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>-u --user=name：指定用户名</li><li>-p --password[=name]：指定密码</li><li>-h --host=name：指定服务器IP或域名</li><li>-P --port=#：指定连接端口</li><li>-e --execute=name：执行SQL语句并退出，在控制台执行SQL语句，而不用连接到数据库执行</li></ul><p>示例：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -h</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 127.0.0.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -P</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3306</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p2143</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> db01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;select * from tb_book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="admin" tabindex="-1"><a class="header-anchor" href="#admin"><span>admin</span></a></h4><p>mysqladmin 是一个执行管理操作的客户端程序，用来检查服务器的配置和当前状态、创建并删除数据库等</p><p>通过 <code>mysqladmin --help</code> 指令查看帮助文档</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqladmin</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p2143</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;test01&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="binlog" tabindex="-1"><a class="header-anchor" href="#binlog"><span>binlog</span></a></h4><p>服务器生成的日志文件以二进制格式保存，如果需要检查这些文本，就要使用 mysqlbinlog 日志管理工具</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqlbinlog</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [options]  log-files1 log-files2 ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>-d --database=name：指定数据库名称，只列出指定的数据库相关操作</li><li>-o --offset=#：忽略掉日志中的前 n 行命令。</li><li>-r --result-file=name：将输出的文本格式日志输出到指定文件。</li><li>-s --short-form：显示简单格式，省略掉一些信息。</li><li>--start-datatime=date1 --stop-datetime=date2：指定日期间隔内的所有日志</li><li>--start-position=pos1 --stop-position=pos2：指定位置间隔内的所有日志</li></ul><hr><h4 id="dump" tabindex="-1"><a class="header-anchor" href="#dump"><span>dump</span></a></h4><h5 id="命令介绍" tabindex="-1"><a class="header-anchor" href="#命令介绍"><span>命令介绍</span></a></h5><p>mysqldump 客户端工具用来备份数据库或在不同数据库之间进行数据迁移，备份内容包含创建表，及插入表的 SQL 语句</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqldump</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [options] db_name [tables] </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [备份到该文件名]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqldump</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [options] --database/-B db1 [db2 db3...]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqldump</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [options] --all-databases/-A</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>连接选项：</p><ul><li>-u --user=name：指定用户名</li><li>-p --password[=name]：指定密码</li><li>-h --host=name：指定服务器 IP 或域名</li><li>-P --port=#：指定连接端口</li></ul><p>输出内容选项：</p><ul><li>--add-drop-database：在每个数据库创建语句前加上 Drop database 语句</li><li>--add-drop-table：在每个表创建语句前加上 Drop table 语句 , 默认开启，不开启 (--skip-add-drop-table)</li><li>-n --no-create-db：不包含数据库的创建语句</li><li>-t --no-create-info：不包含数据表的创建语句</li><li>-d --no-data：不包含数据</li><li>-T, --tab=name：自动生成两个文件：一个 .sql 文件，创建表结构的语句；一个 .txt 文件，数据文件，相当于 select into outfile</li></ul><p>示例：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p2143</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> db01</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tb_book</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --add-drop-database</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --add-drop-table</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> a.sql</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p2143</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -T</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /tmp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> city</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> （把test数据库里的city表生成两个表在/tmp目录下）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="数据备份" tabindex="-1"><a class="header-anchor" href="#数据备份"><span>数据备份</span></a></h5><p>命令行方式：</p><ul><li>备份命令：mysqldump -u root -p 数据库名称 &gt; 文件保存路径</li><li>恢复 <ol><li>登录MySQL数据库：<code>mysql -u root p</code></li><li>删除已经备份的数据库</li><li>重新创建与备份数据库名称相同的数据库</li><li>使用该数据库</li><li>导入文件执行：<code>source 备份文件全路径</code></li></ol></li></ul><p>更多方式参考：https://time.geekbang.org/column/article/81925</p><p>图形化界面：</p><ul><li><p>备份</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/图形化界面备份.png" alt="图形化界面备份" tabindex="0" loading="lazy"><figcaption>图形化界面备份</figcaption></figure></li><li><p>恢复</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/图形化界面恢复.png" alt="图形化界面恢复" tabindex="0" loading="lazy"><figcaption>图形化界面恢复</figcaption></figure></li></ul><hr><h4 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>import</span></a></h4><p>mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的文本文件</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqlimport</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [options]  db_name  textfile1  [textfile2...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqlimport</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p2143</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /tmp/city.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>导入 sql 文件，可以使用 MySQL 中的 source 指令 :</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>source 文件全路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="show" tabindex="-1"><a class="header-anchor" href="#show"><span>show</span></a></h4><p>mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqlshow</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [options] [db_name [table_name [col_name]]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>--count：显示数据库及表的统计信息（数据库，表 均可以不指定）</li><li>-i：显示指定数据库或者指定表的<strong>状态信息</strong></li></ul><p>示例：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#查询每个数据库的表的数量及表中记录的数量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqlshow</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p1234</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --count</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#查询test库中每个表中的字段书，及行数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqlshow</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p1234</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --count</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#查询test库中book表的详细情况</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqlshow</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p1234</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> book</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --count</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="单表操作" tabindex="-1"><a class="header-anchor" href="#单表操作"><span>单表操作</span></a></h2><h3 id="sql" tabindex="-1"><a class="header-anchor" href="#sql"><span>SQL</span></a></h3><ul><li><p>SQL</p><ul><li>Structured Query Language：结构化查询语言</li><li>定义了操作所有关系型数据库的规则，每种数据库操作的方式可能会存在不一样的地方，称为“方言”</li></ul></li><li><p>SQL 通用语法</p><ul><li>SQL 语句可以单行或多行书写，以<strong>分号结尾</strong>。</li><li>可使用空格和缩进来增强语句的可读性。</li><li>MySQL 数据库的 SQL 语句不区分大小写，<strong>关键字建议使用大写</strong>。</li><li>数据库的注释： <ul><li>单行注释：-- 注释内容 #注释内容（MySQL 特有）</li><li>多行注释：/* 注释内容 */</li></ul></li></ul></li><li><p>SQL 分类</p><ul><li><p>DDL（Data Definition Language）数据定义语言</p><ul><li>用来定义数据库对象：数据库，表，列等。关键字：create、drop,、alter 等</li></ul></li><li><p>DML（Data Manipulation Language）数据操作语言</p><ul><li>用来对数据库中表的数据进行增删改。关键字：insert、delete、update 等</li></ul></li><li><p>DQL（Data Query Language）数据查询语言</p><ul><li>用来查询数据库中表的记录(数据)。关键字：select、where 等</li></ul></li><li><p>DCL（Data Control Language）数据控制语言</p><ul><li>用来定义数据库的访问权限和安全级别，及创建用户。关键字：grant， revoke等</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SQL分类.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul></li></ul><hr><h3 id="ddl" tabindex="-1"><a class="header-anchor" href="#ddl"><span>DDL</span></a></h3><h4 id="数据库-1" tabindex="-1"><a class="header-anchor" href="#数据库-1"><span>数据库</span></a></h4><ul><li><p>R(Retrieve)：查询</p><ul><li><p>查询所有数据库：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW DATABASES;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查询某个数据库的创建语句</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> DATABASE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 数据库名称;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- 标准语法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> DATABASE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mysql;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- 查看mysql数据库的创建格式</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>C(Create)：创建</p><ul><li><p>创建数据库</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE DATABASE 数据库名称;-- 标准语法</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE DATABASE db1;     -- 创建db1数据库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建数据库（判断，如果不存在则创建）</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE DATABASE IF NOT EXISTS 数据库名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>创建数据库，并指定字符集</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE DATABASE 数据库名称 CHARACTER SET 字符集名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>例如：创建db4数据库、如果不存在则创建，指定字符集为gbk</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建db4数据库、如果不存在则创建，指定字符集为gbk</span></span>
<span class="line"><span>CREATE DATABASE IF NOT EXISTS db4 CHARACTER SET gbk;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查看db4数据库的字符集</span></span>
<span class="line"><span>SHOW CREATE DATABASE db4;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>U(Update)：修改</p><ul><li><p>修改数据库的字符集</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER DATABASE 数据库名称 CHARACTER SET 字符集名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>常用字符集：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>--查询所有支持的字符集</span></span>
<span class="line"><span>SHOW CHARSET;</span></span>
<span class="line"><span>--查看所有支持的校对规则</span></span>
<span class="line"><span>SHOW COLLATION;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 字符集: utf8,latinI,GBK,,GBK是utf8的子集</span></span>
<span class="line"><span>-- 校对规则: ci 大小定不敏感，cs或bin大小写敏感</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>D(Delete)：删除</p><ul><li><p>删除数据库：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP DATABASE 数据库名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>删除数据库(判断，如果存在则删除)：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP DATABASE IF EXISTS 数据库名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>使用数据库：</p><ul><li><p>查询当前正在使用的数据库名称</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT DATABASE();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用数据库</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>USE 数据库名称； -- 标准语法</span></span>
<span class="line"><span>USE db4;	   -- 使用db4数据库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><hr><h4 id="数据表" tabindex="-1"><a class="header-anchor" href="#数据表"><span>数据表</span></a></h4><ul><li><p>R(Retrieve)：查询</p><ul><li><p>查询数据库中所有的数据表</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>USE mysql;-- 使用mysql数据库</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SHOW TABLES;-- 查询库中所有的表</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询表结构</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DESC 表名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查询表字符集</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW TABLE STATUS FROM 库名 LIKE &#39;表名&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>C(Create)：创建</p><ul><li><p>创建数据表</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE 表名(</span></span>
<span class="line"><span>    列名1 数据类型1,</span></span>
<span class="line"><span>    列名2 数据类型2,</span></span>
<span class="line"><span>    ....</span></span>
<span class="line"><span>    列名n 数据类型n</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>-- 注意：最后一列，不需要加逗号</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给某列加上描述，格式为：</p><p>列名 数据类型 comment &#39;字段描述&#39;,</p><p>把某一列属性设置为无符号的 unsigned:</p><p>列名 数据类型 unsigned，</p></li><li><p>复制表</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE 表名 LIKE 被复制的表名;  -- 标准语法</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE TABLE product2 LIKE product; -- 复制product表到product2表</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数据类型</p><p>| 数据类型 | 说明 | | --------- | ------------------------------------------------------------ | | TINYINT | 1 byte (-128,127) | | AMALLINT | 2 byte(-32768,32767) | | MEDIUMINT | 3 byte(-8388608,8388607) | | INT | 整数类型 | | FLOAT | 单精度浮点 | | DOUBLE | 小数类型 | | DATE | 日期，只包含年月日：yyyy-MM-dd | | DATETIME | 日期，包含年月日时分秒：yyyy-MM-dd HH:mm:ss | | TIMESTAMP | 时间戳类型，包含年月日时分秒：yyyy-MM-dd HH:mm:ss<br>如果不给这个字段赋值或赋值为 NULL，则默认使用当前的系统时间 | | CHAR | 字符串，定长类型 | | VARCHAR | 字符串，<strong>变长类型</strong><br>name varchar(20) 代表姓名最大 20 个字符：zhangsan 8 个字符，张三 2 个字符 |</p><p><code>INT(n)</code>：n 代表位数</p><ul><li>3：int（9）显示结果为 000000010</li><li>3：int（3）显示结果为 010</li></ul><p><code>varchar(n)</code>：n 表示的是字符数</p></li><li><p>例如：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 使用db3数据库</span></span>
<span class="line"><span>USE db3;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 创建一个product商品表</span></span>
<span class="line"><span>CREATE TABLE product(</span></span>
<span class="line"><span>	id INT,				-- 商品编号</span></span>
<span class="line"><span>	NAME VARCHAR(30),	-- 商品名称</span></span>
<span class="line"><span>	price DOUBLE,		-- 商品价格</span></span>
<span class="line"><span>	stock INT,			-- 商品库存</span></span>
<span class="line"><span>	insert_time DATE    -- 上架时间</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>​</p><ul><li><p>U(Update)：修改</p><ul><li><p>修改表名</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 RENAME TO 新的表名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>修改表的字符集</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 CHARACTER SET 字符集名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>添加一列</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 ADD 列名 数据类型;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>修改列数据类型</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 MODIFY 列名 新数据类型;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>修改列名称和数据类型</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 CHANGE 列名 新列名 新数据类型;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>删除列</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 DROP 列名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>D(Delete)：删除</p><ul><li><p>删除数据表</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP TABLE 表名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>删除数据表(判断，如果存在则删除)</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP TABLE IF EXISTS 表名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><hr><h3 id="dml" tabindex="-1"><a class="header-anchor" href="#dml"><span>DML</span></a></h3><h4 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>INSERT</span></a></h4><ul><li><p>新增表数据</p><ul><li><p>新增格式 1：给指定列添加数据</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>INSERT INTO 表名(列名1,列名2...) VALUES (值1,值2...);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>新增格式 2：默认给全部列添加数据</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>INSERT INTO 表名 VALUES (值1,值2,值3,...);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>新增格式 3：批量添加数据</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 给指定列批量添加数据</span></span>
<span class="line"><span>INSERT INTO 表名(列名1,列名2,...) VALUES (值1,值2,...),(值1,值2,...)...;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 默认给所有列批量添加数据 </span></span>
<span class="line"><span>INSERT INTO 表名 VALUES (值1,值2,值3,...),(值1,值2,值3,...)...;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>字符串拼接</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CONCAT(string1,string2,&#39;&#39;,...)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>注意事项</p><ul><li>列名和值的数量以及数据类型要对应</li><li>除了数字类型，其他数据类型的数据都需要加引号(单引双引都可以，推荐单引)</li></ul></li></ul><hr><h4 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>UPDATE</span></a></h4><ul><li><p>修改表数据语法</p><ul><li><p>标准语法</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>UPDATE 表名 SET 列名1 = 值1,列名2 = 值2,... [where 条件];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>修改电视的价格为1800、库存为36</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>UPDATE product SET price=1800,stock=36 WHERE NAME=&#39;电视&#39;;</span></span>
<span class="line"><span>SELECT * FROM product;-- 查看所有商品信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>注意事项</p><ul><li>修改语句中必须加条件</li><li>如果不加条件，则将所有数据都修改</li></ul></li></ul><hr><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>DELETE</span></a></h4><ul><li><p>删除表数据语法</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELETE FROM 表名 [WHERE 条件];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>注意事项</p><ul><li>删除语句中必须加条件</li><li>如果不加条件，则将所有数据删除</li></ul></li></ul><p>​</p><hr><h3 id="dql" tabindex="-1"><a class="header-anchor" href="#dql"><span>DQL</span></a></h3><h4 id="查询语法" tabindex="-1"><a class="header-anchor" href="#查询语法"><span>查询语法</span></a></h4><p>数据库查询遵循条件在前的原则</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT DISTINCT</span></span>
<span class="line"><span>	&lt;select list&gt;</span></span>
<span class="line"><span>FROM</span></span>
<span class="line"><span>	&lt;left_table&gt; &lt;join_type&gt;</span></span>
<span class="line"><span>JOIN</span></span>
<span class="line"><span>	&lt;right_table&gt; ON &lt;join_condition&gt;	-- 连接查询在多表查询部分详解</span></span>
<span class="line"><span>WHERE</span></span>
<span class="line"><span>	&lt;where_condition&gt;</span></span>
<span class="line"><span>GROUP BY</span></span>
<span class="line"><span>	&lt;group_by_list&gt;</span></span>
<span class="line"><span>HAVING</span></span>
<span class="line"><span>	&lt;having_condition&gt;</span></span>
<span class="line"><span>ORDER BY</span></span>
<span class="line"><span>	&lt;order_by_condition&gt;</span></span>
<span class="line"><span>LIMIT</span></span>
<span class="line"><span>	&lt;limit_params&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行顺序：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>FROM	&lt;left_table&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ON 		&lt;join_condition&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;join_type&gt;		JOIN	&lt;right_table&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>WHERE		&lt;where_condition&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>GROUP BY 	&lt;group_by_list&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>HAVING		&lt;having_condition&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SELECT DISTINCT		&lt;select list&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ORDER BY	&lt;order_by_condition&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LIMIT		&lt;limit_params&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>where和having的区别：</strong></p><p>执行时机不同： where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</p><p>判断条件不同：where不能对聚合函数进行判断，而having可以。</p><p>ORDER BY 有两个属性：asc、desc。如果不写属性的话默认是asc。</p><hr><h4 id="查询全部" tabindex="-1"><a class="header-anchor" href="#查询全部"><span>查询全部</span></a></h4><ul><li><p>查询全部的表数据</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 标准语法</span></span>
<span class="line"><span>SELECT * FROM 表名;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询product表所有数据(常用)，此方法会影响查询数据的效率，如果对效率有要求不建议使用</span></span>
<span class="line"><span>SELECT * FROM product;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询指定字段的表数据</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名1,列名2,... FROM 表名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>去除重复查询</strong>：只有值全部重复的才可以去除，需要创建临时表辅助查询</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT DISTINCT 列名1,列名2,... FROM 表名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>计算列的值（四则运算）</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名1 运算符(+ - * /) 列名2 FROM 表名;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/*如果某一列值为null，可以进行替换</span></span>
<span class="line"><span>	ifnull(表达式1,表达式2)</span></span>
<span class="line"><span>	表达式1：想替换的列</span></span>
<span class="line"><span>	表达式2：想替换的值*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 查询商品名称和库存，库存数量在原有基础上加10</span></span>
<span class="line"><span>SELECT NAME,stock+10 FROM product;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询商品名称和库存，库存数量在原有基础上加10。进行null值判断</span></span>
<span class="line"><span>SELECT NAME,IFNULL(stock,0)+10 FROM product;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>起别名</strong></p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名1,列名2,... AS 别名 FROM 表名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 查询商品名称和库存，库存数量在原有基础上加10。进行null值判断，起别名为getSum,AS可以省略。</span></span>
<span class="line"><span>SELECT NAME,IFNULL(stock,0)+10 AS getsum FROM product;</span></span>
<span class="line"><span>SELECT NAME,IFNULL(stock,0)+10 getsum FROM product;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="条件查询" tabindex="-1"><a class="header-anchor" href="#条件查询"><span>条件查询</span></a></h4><ul><li><p>条件查询语法</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名 FROM 表名 WHERE 条件;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>条件分类</p><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN ... AND ...</td><td>在某个范围之内(都包含)，前一个数必须小于后一个数</td></tr><tr><td>IN(...)</td><td>多选一</td></tr><tr><td>LIKE</td><td><strong>模糊查询</strong>：_单个任意字符、%任意个字符、[] 匹配集合内的字符<br><code>LIKE &#39;[^AB]%&#39; </code>：不以 A 和 B 开头的任意文本</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr><tr><td>IS NOT NULL</td><td>不是NULL</td></tr><tr><td>AND 或 &amp;&amp;</td><td>并且</td></tr><tr><td>OR 或 ||</td><td>或者</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr><tr><td>UNION</td><td>对两个结果集进行<strong>并集操作并进行去重，同时进行默认规则的排序</strong></td></tr><tr><td>UNION ALL</td><td>对两个结果集进行并集操作不进行去重，不进行排序</td></tr></tbody></table></li><li><p>例如：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 查询库存大于20的商品信息</span></span>
<span class="line"><span>SELECT * FROM product WHERE stock &gt; 20;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询品牌为华为的商品信息</span></span>
<span class="line"><span>SELECT * FROM product WHERE brand=&#39;华为&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询金额在4000 ~ 6000之间的商品信息</span></span>
<span class="line"><span>SELECT * FROM product WHERE price &gt;= 4000 AND price &lt;= 6000;</span></span>
<span class="line"><span>SELECT * FROM product WHERE price BETWEEN 4000 AND 6000;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询库存为14、30、23的商品信息</span></span>
<span class="line"><span>SELECT * FROM product WHERE stock=14 OR stock=30 OR stock=23;</span></span>
<span class="line"><span>SELECT * FROM product WHERE stock IN(14,30,23);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询库存为null的商品信息</span></span>
<span class="line"><span>SELECT * FROM product WHERE stock IS NULL;</span></span>
<span class="line"><span>-- 查询库存不为null的商品信息</span></span>
<span class="line"><span>SELECT * FROM product WHERE stock IS NOT NULL;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询名称以&#39;小米&#39;为开头的商品信息</span></span>
<span class="line"><span>SELECT * FROM product WHERE NAME LIKE &#39;小米%&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询名称第二个字是&#39;为&#39;的商品信息</span></span>
<span class="line"><span>SELECT * FROM product WHERE NAME LIKE &#39;_为%&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询名称为四个字符的商品信息 4个下划线</span></span>
<span class="line"><span>SELECT * FROM product WHERE NAME LIKE &#39;____&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询名称中包含电脑的商品信息</span></span>
<span class="line"><span>SELECT * FROM product WHERE NAME LIKE &#39;%电脑%&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-DQL数据准备.png" style="zoom:80%;"></li></ul><hr><h4 id="函数查询" tabindex="-1"><a class="header-anchor" href="#函数查询"><span>函数查询</span></a></h4><h5 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数"><span>聚合函数</span></a></h5><p>聚合函数：将一列数据作为一个整体，进行纵向的计算</p><ul><li><p>聚合函数语法</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 函数名(列名) FROM 表名 [WHERE 条件]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>聚合函数分类</p><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>COUNT(列名)</td><td>统计数量（一般选用不为 null 的列）</td></tr><tr><td>MAX(列名)</td><td>最大值</td></tr><tr><td>MIN(列名)</td><td>最小值</td></tr><tr><td>SUM(列名)</td><td>求和</td></tr><tr><td>AVG(列名)</td><td>平均值（会忽略 null 行）</td></tr></tbody></table></li><li><p>例如</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 计算product表中总记录条数 7</span></span>
<span class="line"><span>SELECT COUNT(*) FROM product;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 获取最高价格</span></span>
<span class="line"><span>SELECT MAX(price) FROM product;</span></span>
<span class="line"><span>-- 获取最高价格的商品名称</span></span>
<span class="line"><span>SELECT NAME,price FROM product WHERE price = (SELECT MAX(price) FROM product);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 获取最低库存</span></span>
<span class="line"><span>SELECT MIN(stock) FROM product;</span></span>
<span class="line"><span>-- 获取最低库存的商品名称</span></span>
<span class="line"><span>SELECT NAME,stock FROM product WHERE stock = (SELECT MIN(stock) FROM product);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 获取总库存数量</span></span>
<span class="line"><span>SELECT SUM(stock) FROM product;</span></span>
<span class="line"><span>-- 获取品牌为小米的平均商品价格</span></span>
<span class="line"><span>SELECT AVG(price) FROM product WHERE brand=&#39;小米&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="文本函数" tabindex="-1"><a class="header-anchor" href="#文本函数"><span>文本函数</span></a></h5><p>CONCAT()：用于连接两个字段</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> CONCAT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">TRIM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(col1), </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;(&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">TRIM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(col2), </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> concat_col </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mytable</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- 许多数据库会使用空格把一个值填充为列宽，连接的结果出现一些不必要的空格，使用TRIM()可以去除首尾空格</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>LENGTH</td><td>计算字符串长度函数，返回字符串的字节长度</td></tr><tr><td>CONCAT(s1,s2...sn)</td><td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</td></tr><tr><td>INSERT</td><td>替换字符串函数</td></tr><tr><td>LOWER</td><td>将字符串中的字母转换为小写</td></tr><tr><td>UPPER</td><td>将字符串中的字母转换为大写</td></tr><tr><td>LEFT</td><td>从左侧字截取符串，返回字符串左边的若干个字符</td></tr><tr><td>RIGHT</td><td>从右侧字截取符串，返回字符串右边的若干个字符</td></tr><tr><td>TRIM</td><td>删除字符串左右两侧的空格</td></tr><tr><td>REPLACE</td><td>字符串替换函数，返回替换后的新字符串</td></tr><tr><td>SUBSTRING(str,start,len)</td><td>截取字符串，返回从指定位置开始的指定长度的字符换</td></tr><tr><td>REVERSE</td><td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td></tr><tr><td>LPAD(str,n,pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符<br>串长度</td></tr><tr><td>RPAD(str,n,pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符<br>串长度</td></tr></tbody></table><hr><h5 id="数字函数" tabindex="-1"><a class="header-anchor" href="#数字函数"><span>数字函数</span></a></h5><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>ABS</td><td>求绝对值</td></tr><tr><td>SQRT</td><td>求二次方根</td></tr><tr><td>CEIL</td><td>向上取整</td></tr><tr><td>MOD(x,y)</td><td>求x/y的余数</td></tr><tr><td>CEIL 和 CEILING</td><td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td></tr><tr><td>FLOOR</td><td>向下取整，返回值转化为一个BIGINT</td></tr><tr><td>RAND</td><td>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td></tr><tr><td>ROUND(x,y)</td><td>对所传参数x进行四舍五入，保留y位小数</td></tr><tr><td>SIGN</td><td>返回参数的符号</td></tr><tr><td>POW 和 POWER</td><td>两个函数的功能相同，都是所传参数的次方的结果值</td></tr><tr><td>SIN</td><td>求正弦值</td></tr><tr><td>ASIN</td><td>求反正弦值，与函数 SIN 互为反函数</td></tr><tr><td>COS</td><td>求余弦值</td></tr><tr><td>ACOS</td><td>求反余弦值，与函数 COS 互为反函数</td></tr><tr><td>TAN</td><td>求正切值</td></tr><tr><td>ATAN</td><td>求反正切值，与函数 TAN 互为反函数</td></tr><tr><td>COT</td><td>求余切值</td></tr></tbody></table><hr><h5 id="日期函数" tabindex="-1"><a class="header-anchor" href="#日期函数"><span>日期函数</span></a></h5><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>CURDATE 和 CURRENT_DATE</td><td>两个函数作用相同，返回当前系统的日期值</td></tr><tr><td>CURTIME 和 CURRENT_TIME</td><td>两个函数作用相同，返回当前系统的时间值</td></tr><tr><td>NOW 和 SYSDATE</td><td>两个函数作用相同，返回当前系统的日期和时间值</td></tr><tr><td>MONTH</td><td>获取指定日期中的月份</td></tr><tr><td>MONTHNAME</td><td>获取指定日期中的月份英文名称</td></tr><tr><td>DAYNAME</td><td>获取指定曰期对应的星期几的英文名称</td></tr><tr><td>DAYOFWEEK</td><td>获取指定日期对应的一周的索引位置值</td></tr><tr><td>WEEK</td><td>获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</td></tr><tr><td>DAYOFYEAR</td><td>获取指定曰期是一年中的第几天，返回值范围是1~366</td></tr><tr><td>DAYOFMONTH</td><td>获取指定日期是一个月中是第几天，返回值范围是1~31</td></tr><tr><td>YEAR</td><td>获取年份，返回值范围是 1970〜2069</td></tr><tr><td>TIME_TO_SEC</td><td>将时间参数转换为秒数</td></tr><tr><td>SEC_TO_TIME</td><td>将秒数转换为时间，与TIME_TO_SEC 互为反函数</td></tr><tr><td>DATE_ADD(date, INERVAL expr type) 和 ADDDATE</td><td>两个函数功能相同，都是向日期或时间添加指定的时间间隔,date代表当前时间，expr代表要添加的数，type代表添加日期（year，month，day，week,hour,minute,second)</td></tr><tr><td>DATE_SUB 和 SUBDATE</td><td>两个函数功能相同，都是向日期减去指定的时间间隔</td></tr><tr><td>ADDTIME</td><td>时间加法运算，在原始时间上添加指定的时间</td></tr><tr><td>SUBTIME</td><td>时间减法运算，在原始时间上减去指定的时间</td></tr><tr><td>DATEDIFF</td><td>获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td></tr><tr><td>DATE_FORMAT</td><td>格式化指定的日期，根据参数返回指定格式的值</td></tr><tr><td>WEEKDAY</td><td>获取指定日期在一周内的对应的工作日索引</td></tr></tbody></table><h5 id="流程函数" tabindex="-1"><a class="header-anchor" href="#流程函数"><span>流程函数</span></a></h5><p>流程函数也是很常用的一类函数，可以在SQL语句中实现条件筛选，从而提高语句的效率。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value , t , f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1 , value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [res1] ...ELSE [ default ] END</td><td>如果val1为true，返回res1，... 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [res1] ... ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，否则返回default默认值, ...代表WHEN THEN 可以写多个</td></tr></tbody></table><p>可以将整段函数括起来取别名</p><hr><h4 id="正则查询" tabindex="-1"><a class="header-anchor" href="#正则查询"><span>正则查询</span></a></h4><p>正则表达式（Regular Expression）是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM emp WHERE name REGEXP &#39;^T&#39;;	-- 匹配以T开头的name值</span></span>
<span class="line"><span>SELECT * FROM emp WHERE name REGEXP &#39;2$&#39;;	-- 匹配以2结尾的name值</span></span>
<span class="line"><span>SELECT * FROM emp WHERE name REGEXP &#39;[uvw]&#39;;-- 匹配包含 uvw 的name值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>在字符串开始处进行匹配</td></tr><tr><td>$</td><td>在字符串末尾处进行匹配</td></tr><tr><td>.</td><td>匹配任意单个字符, 包括换行符</td></tr><tr><td>[...]</td><td>匹配出括号内的任意字符</td></tr><tr><td>[^...]</td><td>匹配不出括号内的任意字符</td></tr><tr><td>a*</td><td>匹配零个或者多个a(包括空串)</td></tr><tr><td>a+</td><td>匹配一个或者多个a(不包括空串)</td></tr><tr><td>a?</td><td>匹配零个或者一个a</td></tr><tr><td>a1|a2</td><td>匹配a1或a2</td></tr><tr><td>a(m)</td><td>匹配m个a</td></tr><tr><td>a(m,)</td><td>至少匹配m个a</td></tr><tr><td>a(m,n)</td><td>匹配m个a 到 n个a</td></tr><tr><td>a(,n)</td><td>匹配0到n个a</td></tr><tr><td>(...)</td><td>将模式元素组成单一元素</td></tr></tbody></table><hr><h4 id="排序查询" tabindex="-1"><a class="header-anchor" href="#排序查询"><span>排序查询</span></a></h4><ul><li><p>排序查询语法</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名 FROM 表名 [WHERE 条件] ORDER BY 列名1 排序方式1,列名2 排序方式2;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>排序方式</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ASC:升序</span></span>
<span class="line"><span>DESC:降序</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：多个排序条件，当前边的条件值一样时，才会判断第二条件</p></li><li><p>例如</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 按照库存升序排序</span></span>
<span class="line"><span>SELECT * FROM product ORDER BY stock ASC;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询名称中包含手机的商品信息。按照金额降序排序</span></span>
<span class="line"><span>SELECT * FROM product WHERE NAME LIKE &#39;%手机%&#39; ORDER BY price DESC;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 按照金额升序排序，如果金额相同，按照库存降序排列</span></span>
<span class="line"><span>SELECT * FROM product ORDER BY price ASC,stock DESC;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="分组查询" tabindex="-1"><a class="header-anchor" href="#分组查询"><span>分组查询</span></a></h4><p>分组查询会进行去重</p><ul><li><p>分组查询语法</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名 FROM 表名 [WHERE 条件] GROUP BY 分组列名 [HAVING 分组后条件过滤] [ORDER BY 排序列名 排序方式];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤</p><p>分组规定：</p><ul><li>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前</li><li>NULL 的行会单独分为一组</li><li>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型</li></ul></li><li><p>例如</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 按照品牌分组，获取每组商品的总金额</span></span>
<span class="line"><span>SELECT brand,SUM(price) FROM product GROUP BY brand;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 对金额大于4000元的商品，按照品牌分组,获取每组商品的总金额</span></span>
<span class="line"><span>SELECT brand,SUM(price) FROM product WHERE price &gt; 4000 GROUP BY brand;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 对金额大于4000元的商品，按照品牌分组，获取每组商品的总金额，只显示总金额大于7000元的</span></span>
<span class="line"><span>SELECT brand,SUM(price) AS getSum FROM product WHERE price &gt; 4000 GROUP BY brand HAVING getSum &gt; 7000;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 对金额大于4000元的商品，按照品牌分组，获取每组商品的总金额，只显示总金额大于7000元的、并按照总金额的降序排列</span></span>
<span class="line"><span>SELECT brand,SUM(price) AS getSum FROM product WHERE price &gt; 4000 GROUP BY brand HAVING getSum &gt; 7000 ORDER BY getSum DESC;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询"><span>分页查询</span></a></h4><p>分页查询是数据库的方言，不同的数据库有不同的实现，Mysql是LIMIT。</p><ul><li><p>分页查询语法</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名 FROM 表名 [WHERE 条件] GROUP BY 分组列名 [HAVING 分组后条件过滤] [ORDER BY 排序列名 排序方式] LIMIT 开始索引,查询条数;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>公式：开始索引 = (当前页码-1) * 每页显示的条数</p></li><li><p>例如</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM product LIMIT 0,2;  -- 第一页 开始索引=(1-1) * 2</span></span>
<span class="line"><span>SELECT * FROM product LIMIT 2,2;  -- 第二页 开始索引=(2-1) * 2</span></span>
<span class="line"><span>SELECT * FROM product LIMIT 4,2;  -- 第三页 开始索引=(3-1) * 2</span></span>
<span class="line"><span>SELECT * FROM product LIMIT 6,2;  -- 第四页 开始索引=(4-1) * 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-DQL分页查询图解.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h3 id="dcl" tabindex="-1"><a class="header-anchor" href="#dcl"><span>DCL</span></a></h3><p>DCL英文全称是Data Control Language(数据控制语言)，用来管理数据库用户、控制数据库的访 问权限。</p><h4 id="用户管理" tabindex="-1"><a class="header-anchor" href="#用户管理"><span>用户管理</span></a></h4><h5 id="查询用户" tabindex="-1"><a class="header-anchor" href="#查询用户"><span><strong>查询用户</strong></span></a></h5><p>​ USE mysql;</p><p>​ SELECT * FROM user;</p><h5 id="创建用户" tabindex="-1"><a class="header-anchor" href="#创建用户"><span><strong>创建用户</strong></span></a></h5><p>​ CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</p><p>​ 其中主机名为local host代表主机可以访问该数据库，%表示可以在任意主机上访问该数据库。</p><h5 id="修改用户密码" tabindex="-1"><a class="header-anchor" href="#修改用户密码"><span><strong>修改用户密码</strong></span></a></h5><p>​ ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</p><h5 id="删除用户" tabindex="-1"><a class="header-anchor" href="#删除用户"><span><strong>删除用户</strong></span></a></h5><p>​ DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</p><h4 id="权限控制" tabindex="-1"><a class="header-anchor" href="#权限控制"><span>权限控制</span></a></h4><p>MySQL中定义了很多种权限，但是常用的就以下几种</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><h5 id="查询权限" tabindex="-1"><a class="header-anchor" href="#查询权限"><span>查询权限</span></a></h5><p>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39; ;</p><h5 id="授予权限" tabindex="-1"><a class="header-anchor" href="#授予权限"><span>授予权限</span></a></h5><p>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</p><h5 id="撤销权限" tabindex="-1"><a class="header-anchor" href="#撤销权限"><span>撤销权限</span></a></h5><p>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</p><p>注意事项： • 多个权限之间，使用逗号分隔 • 授权时， 数据库名和表名可以使用 * 进行通配，代表所有</p><hr><h2 id="多表操作" tabindex="-1"><a class="header-anchor" href="#多表操作"><span>多表操作</span></a></h2><h3 id="约束分类" tabindex="-1"><a class="header-anchor" href="#约束分类"><span>约束分类</span></a></h3><h4 id="约束介绍" tabindex="-1"><a class="header-anchor" href="#约束介绍"><span>约束介绍</span></a></h4><p>约束：对表中的数据进行限定，保证数据的正确性、有效性、完整性</p><p>约束的分类：</p><table><thead><tr><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>PRIMARY KEY</td><td>主键约束</td></tr><tr><td>PRIMARY KEY AUTO_INCREMENT</td><td>主键、自动增长</td></tr><tr><td>UNIQUE</td><td>唯一约束</td></tr><tr><td>NOT NULL</td><td>非空约束</td></tr><tr><td>FOREIGN KEY</td><td>外键约束</td></tr><tr><td>FOREIGN KEY ON UPDATE CASCADE</td><td>外键级联更新</td></tr><tr><td>FOREIGN KEY ON DELETE CASCADE</td><td>外键级联删除</td></tr></tbody></table><hr><h4 id="主键约束" tabindex="-1"><a class="header-anchor" href="#主键约束"><span>主键约束</span></a></h4><ul><li><p>主键约束特点：</p><ul><li>主键约束默认包含<strong>非空和唯一</strong>两个功能</li><li>一张表只能有一个主键</li><li>主键一般用于表中数据的唯一标识</li></ul></li><li><p>建表时添加主键约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE 表名(</span></span>
<span class="line"><span>	列名 数据类型 PRIMARY KEY,</span></span>
<span class="line"><span>    列名 数据类型,</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除主键约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 DROP PRIMARY KEY;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>建表后单独添加主键约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 MODIFY 列名 数据类型 PRIMARY KEY;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>例如</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建student表</span></span>
<span class="line"><span>CREATE TABLE student(</span></span>
<span class="line"><span>	id INT PRIMARY KEY  -- 给id添加主键约束</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 添加数据</span></span>
<span class="line"><span>INSERT INTO student VALUES (1),(2);</span></span>
<span class="line"><span>-- 主键默认唯一，添加重复数据，会报错</span></span>
<span class="line"><span>INSERT INTO student VALUES (2);</span></span>
<span class="line"><span>-- 主键默认非空，不能添加null的数据</span></span>
<span class="line"><span>INSERT INTO student VALUES (NULL);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="主键自增" tabindex="-1"><a class="header-anchor" href="#主键自增"><span>主键自增</span></a></h4><p>主键自增约束可以为空，并自动增长。删除某条数据不影响自增的下一个数值，依然按照前一个值自增</p><ul><li><p>建表时添加主键自增约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE 表名(</span></span>
<span class="line"><span>	列名 数据类型 PRIMARY KEY AUTO_INCREMENT,</span></span>
<span class="line"><span>    列名 数据类型,</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除主键自增约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 MODIFY 列名 数据类型;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>建表后单独添加主键自增约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 MODIFY 列名 数据类型 AUTO_INCREMENT;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>例如</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建student2表</span></span>
<span class="line"><span>CREATE TABLE student2(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT    -- 给id添加主键自增约束</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 添加数据</span></span>
<span class="line"><span>INSERT INTO student2 VALUES (1),(2);</span></span>
<span class="line"><span>-- 添加null值，会自动增长</span></span>
<span class="line"><span>INSERT INTO student2 VALUES (NULL),(NULL);-- 3，4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="唯一约束" tabindex="-1"><a class="header-anchor" href="#唯一约束"><span>唯一约束</span></a></h4><p>唯一约束：约束不能有重复的数据</p><ul><li><p>建表时添加唯一约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE 表名(</span></span>
<span class="line"><span>	列名 数据类型 UNIQUE,</span></span>
<span class="line"><span>    列名 数据类型,</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除唯一约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 DROP INDEX 列名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>建表后单独添加唯一约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 MODIFY 列名 数据类型 UNIQUE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h4 id="非空约束" tabindex="-1"><a class="header-anchor" href="#非空约束"><span>非空约束</span></a></h4><ul><li><p>建表时添加非空约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE 表名(</span></span>
<span class="line"><span>	列名 数据类型 NOT NULL,</span></span>
<span class="line"><span>    列名 数据类型,</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除非空约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 MODIFY 列名 数据类型;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>建表后单独添加非空约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 MODIFY 列名 数据类型 NOT NULL;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h4 id="外键约束" tabindex="-1"><a class="header-anchor" href="#外键约束"><span>外键约束</span></a></h4><p>外键约束：让表和表之间产生关系，从而保证数据的准确性</p><ul><li><p>建表时添加外键约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE 表名(</span></span>
<span class="line"><span>	列名 数据类型 约束,</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    CONSTRAINT 外键名 FOREIGN KEY (本表外键列名) REFERENCES 主表名(主表主键列名)</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除外键约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>建表后单独添加外键约束</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY (本表外键列名) REFERENCES 主表名(主表主键列名);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>例如</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建user用户表</span></span>
<span class="line"><span>CREATE TABLE USER(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,    -- id</span></span>
<span class="line"><span>	name VARCHAR(20) NOT NULL             -- 姓名</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>-- 添加用户数据</span></span>
<span class="line"><span>INSERT INTO USER VALUES (NULL,&#39;张三&#39;),(NULL,&#39;李四&#39;),(NULL,&#39;王五&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 创建orderlist订单表</span></span>
<span class="line"><span>CREATE TABLE orderlist(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,    -- id</span></span>
<span class="line"><span>	number VARCHAR(20) NOT NULL,          -- 订单编号</span></span>
<span class="line"><span>	uid INT,                              -- 订单所属用户</span></span>
<span class="line"><span>	CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id)   -- 添加外键约束</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>-- 添加订单数据</span></span>
<span class="line"><span>INSERT INTO orderlist VALUES (NULL,&#39;hm001&#39;,1),(NULL,&#39;hm002&#39;,1),</span></span>
<span class="line"><span>(NULL,&#39;hm003&#39;,2),(NULL,&#39;hm004&#39;,2),</span></span>
<span class="line"><span>(NULL,&#39;hm005&#39;,3),(NULL,&#39;hm006&#39;,3);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 添加一个订单，但是没有所属用户。无法添加</span></span>
<span class="line"><span>INSERT INTO orderlist VALUES (NULL,&#39;hm007&#39;,8);</span></span>
<span class="line"><span>-- 删除王五这个用户，但是订单表中王五还有很多个订单呢。无法删除</span></span>
<span class="line"><span>DELETE FROM USER WHERE NAME=&#39;王五&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>删除/更新行为 ： 添加了外键之后，再删除父表数据时产生的约束行为，我们就称为删除/更新行为。具体的删除/更新行 为有以下几种:</p><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。 (与 RESTRICT 一致) 默认行为</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。 (与 NO ACTION 一致) 默认行为</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在子表中的记录。</td></tr><tr><td>SET NULL</td><td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（这就要求该外键允许取null）。</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键列设置成一个默认的值 (Innodb不支持)</td></tr></tbody></table><p>具体语法为: ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名 (主表字段名) ON UPDATE (更新时的行为) ON DELETE (删除时的行为);</p><h4 id="检查约束" tabindex="-1"><a class="header-anchor" href="#检查约束"><span>检查约束</span></a></h4><p>例：检查年龄在0到120之间</p><p>age int check (age &gt; 0 &amp;&amp; age &lt;=120)</p><hr><h4 id="外键级联" tabindex="-1"><a class="header-anchor" href="#外键级联"><span>外键级联</span></a></h4><p>级联操作：当把主表中的数据进行删除或更新时，从表中有关联的数据的相应操作，包括 RESTRICT、CASCADE、SET NULL 和 NO ACTION</p><ul><li>RESTRICT 和 NO ACTION相同， 是指限制在子表有关联记录的情况下， 父表不能更新</li><li>CASCADE 表示父表在更新或者删除时，更新或者删除子表对应的记录</li><li>SET NULL 则表示父表在更新或者删除的时候，子表的对应字段被SET NULL</li></ul><p>级联操作：</p><ul><li><p>添加级联更新</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY (本表外键列名) REFERENCES 主表名(主表主键列名) ON UPDATE [CASCADE | RESTRICT | SET NULL];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>添加级联删除</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY (本表外键列名) REFERENCES 主表名(主表主键列名) ON DELETE CASCADE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>同时添加级联更新和级联删除</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY (本表外键列名) REFERENCES 主表名(主表主键列名) ON UPDATE CASCADE ON DELETE CASCADE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h3 id="多表设计" tabindex="-1"><a class="header-anchor" href="#多表设计"><span>多表设计</span></a></h3><h4 id="一对一" tabindex="-1"><a class="header-anchor" href="#一对一"><span>一对一</span></a></h4><p>多表：有多张数据表，而表与表之间有一定的关联关系，通过外键约束实现，分为一对一、一对多、多对多三类</p><p>举例：人和身份证</p><p>实现原则：在任意一个表建立外键，去关联另外一个表的主键</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建person表</span></span>
<span class="line"><span>CREATE TABLE person(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,	-- 主键id</span></span>
<span class="line"><span>	NAME VARCHAR(20)                        -- 姓名</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>-- 添加数据</span></span>
<span class="line"><span>INSERT INTO person VALUES (NULL,&#39;张三&#39;),(NULL,&#39;李四&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 创建card表</span></span>
<span class="line"><span>CREATE TABLE card(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,	-- 主键id</span></span>
<span class="line"><span>	number VARCHAR(20) UNIQUE NOT NULL,	-- 身份证号</span></span>
<span class="line"><span>	pid INT UNIQUE,                         -- 外键列</span></span>
<span class="line"><span>	CONSTRAINT cp_fk1 FOREIGN KEY (pid) REFERENCES person(id)</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>-- 添加数据</span></span>
<span class="line"><span>INSERT INTO card VALUES (NULL,&#39;12345&#39;,1),(NULL,&#39;56789&#39;,2);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/多表设计一对一.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="一对多" tabindex="-1"><a class="header-anchor" href="#一对多"><span>一对多</span></a></h4><p>举例：用户和订单、商品分类和商品</p><p>实现原则：在多的一方，建立外键约束，来关联一的一方主键</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建user表</span></span>
<span class="line"><span>CREATE TABLE USER(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,	-- 主键id</span></span>
<span class="line"><span>	NAME VARCHAR(20)                        -- 姓名</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>-- 添加数据</span></span>
<span class="line"><span>INSERT INTO USER VALUES (NULL,&#39;张三&#39;),(NULL,&#39;李四&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 创建orderlist表</span></span>
<span class="line"><span>CREATE TABLE orderlist(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,	-- 主键id</span></span>
<span class="line"><span>	number VARCHAR(20),                     -- 订单编号</span></span>
<span class="line"><span>	uid INT,				-- 外键列</span></span>
<span class="line"><span>	CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id)</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>-- 添加数据</span></span>
<span class="line"><span>INSERT INTO orderlist VALUES (NULL,&#39;hm001&#39;,1),(NULL,&#39;hm002&#39;,1),(NULL,&#39;hm003&#39;,2),(NULL,&#39;hm004&#39;,2);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/多表设计一对多.png" alt="多表设计一对多" tabindex="0" loading="lazy"><figcaption>多表设计一对多</figcaption></figure><hr><h4 id="多对多" tabindex="-1"><a class="header-anchor" href="#多对多"><span>多对多</span></a></h4><p>举例：学生和课程。一个学生可以选择多个课程，一个课程也可以被多个学生选择</p><p>实现原则：借助第三张表中间表，中间表至少包含两个列，这两个列作为中间表的外键，分别关联两张表的主键</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建student表</span></span>
<span class="line"><span>CREATE TABLE student(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,	-- 主键id</span></span>
<span class="line"><span>	NAME VARCHAR(20)			-- 学生姓名</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>-- 添加数据</span></span>
<span class="line"><span>INSERT INTO student VALUES (NULL,&#39;张三&#39;),(NULL,&#39;李四&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 创建course表</span></span>
<span class="line"><span>CREATE TABLE course(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,	-- 主键id</span></span>
<span class="line"><span>	NAME VARCHAR(10)			-- 课程名称</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>-- 添加数据</span></span>
<span class="line"><span>INSERT INTO course VALUES (NULL,&#39;语文&#39;),(NULL,&#39;数学&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 创建中间表</span></span>
<span class="line"><span>CREATE TABLE stu_course(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,	-- 主键id</span></span>
<span class="line"><span>	sid INT,  -- 用于和student表中的id进行外键关联</span></span>
<span class="line"><span>	cid INT,  -- 用于和course表中的id进行外键关联</span></span>
<span class="line"><span>	CONSTRAINT sc_fk1 FOREIGN KEY (sid) REFERENCES student(id), -- 添加外键约束</span></span>
<span class="line"><span>	CONSTRAINT sc_fk2 FOREIGN KEY (cid) REFERENCES course(id)   -- 添加外键约束</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>-- 添加数据</span></span>
<span class="line"><span>INSERT INTO stu_course VALUES (NULL,1,1),(NULL,1,2),(NULL,2,1),(NULL,2,2);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/多表设计多对多.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="连接查询" tabindex="-1"><a class="header-anchor" href="#连接查询"><span>连接查询</span></a></h3><h4 id="内外连接" tabindex="-1"><a class="header-anchor" href="#内外连接"><span>内外连接</span></a></h4><h5 id="内连接" tabindex="-1"><a class="header-anchor" href="#内连接"><span>内连接</span></a></h5><p>连接查询的是两张表有交集的部分数据，两张表分为<strong>驱动表和被驱动表</strong>，如果结果集中的每条记录都是两个表相互匹配的组合，则称这样的结果集为笛卡尔积</p><p>内连接查询，若驱动表中的记录在被驱动表中找不到匹配的记录时，则该记录不会加到最后的结果集</p><ul><li><p>显式内连接：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名 FROM 表名1 [INNER] JOIN 表名2 ON 条件;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>隐式内连接：内连接中 WHERE 子句和 ON 子句是等价的</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名 FROM 表名1,表名2 WHERE 条件;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>STRAIGHT_JOIN与 JOIN 类似，只不过左表始终在右表之前读取，只适用于内连接</p><hr><h5 id="外连接" tabindex="-1"><a class="header-anchor" href="#外连接"><span>外连接</span></a></h5><p>外连接查询，若驱动表中的记录在被驱动表中找不到匹配的记录时，则该记录也会加到最后的结果集，只是对于被驱动表中<strong>不匹配过滤条件</strong>的记录，各个字段使用 NULL 填充</p><p>应用实例：查学生成绩，也想展示出缺考的人的成绩</p><ul><li><p>左外连接：选择左侧的表为驱动表，查询左表的全部数据，和左右两张表有交集部分的数据</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名 FROM 表名1 LEFT [OUTER] JOIN 表名2 ON 条件;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>右外连接：选择右侧的表为驱动表，查询右表的全部数据，和左右两张表有交集部分的数据</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名 FROM 表名1 RIGHT [OUTER] JOIN 表名2 ON 条件;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-JOIN查询图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="自连接" tabindex="-1"><a class="header-anchor" href="#自连接"><span>自连接</span></a></h4><p>自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次。我们先来学习一下自连接 的查询语法：</p><p>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ... ;</p><p>而对于自连接查询，可以是内连接查询，也可以是外连接查询。</p><p>注意事项: 在自连接查询中，必须要为表起别名，要不然我们不清楚所指定的条件、返回的字段，到底 是哪一张表的字段。</p><hr><h4 id="关联查询" tabindex="-1"><a class="header-anchor" href="#关联查询"><span>关联查询</span></a></h4><p>自关联查询：同一张表中有数据关联，可以多次查询这同一个表</p><ul><li><p>数据准备</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建员工表</span></span>
<span class="line"><span>CREATE TABLE employee(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,	-- 员工编号</span></span>
<span class="line"><span>	NAME VARCHAR(20),					-- 员工姓名</span></span>
<span class="line"><span>	mgr INT,							-- 上级编号</span></span>
<span class="line"><span>	salary DOUBLE						-- 员工工资</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>-- 添加数据</span></span>
<span class="line"><span>INSERT INTO employee VALUES (1001,&#39;孙悟空&#39;,1005,9000.00),..,(1009,&#39;宋江&#39;,NULL,16000.00);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/自关联查询数据准备.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>数据查询</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 查询所有员工的姓名及其直接上级的姓名，没有上级的员工也需要查询</span></span>
<span class="line"><span>/*</span></span>
<span class="line"><span>分析</span></span>
<span class="line"><span>	员工信息 employee表</span></span>
<span class="line"><span>	条件：employee.mgr = employee.id</span></span>
<span class="line"><span>	查询左表的全部数据，和左右两张表有交集部分数据，左外连接</span></span>
<span class="line"><span>*/</span></span>
<span class="line"><span>SELECT</span></span>
<span class="line"><span>	e1.id,</span></span>
<span class="line"><span>	e1.name,</span></span>
<span class="line"><span>	e1.mgr,</span></span>
<span class="line"><span>	e2.id,</span></span>
<span class="line"><span>	e2.name</span></span>
<span class="line"><span>FROM</span></span>
<span class="line"><span>	employee e1</span></span>
<span class="line"><span>LEFT OUTER JOIN</span></span>
<span class="line"><span>	employee e2</span></span>
<span class="line"><span>ON</span></span>
<span class="line"><span>	e1.mgr = e2.id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>id		name	mgr	   id	  name</span></span>
<span class="line"><span>1001	孙悟空	  1005	1005	唐僧</span></span>
<span class="line"><span>1002	猪八戒	  1005	1005	唐僧</span></span>
<span class="line"><span>1003	沙和尚	  1005	1005	唐僧</span></span>
<span class="line"><span>1004	小白龙	  1005	1005	唐僧</span></span>
<span class="line"><span>1005	唐僧	   NULL	 NULL	 NULL</span></span>
<span class="line"><span>1006	武松	   1009	 1009	 宋江</span></span>
<span class="line"><span>1007	李逵	   1009	 1009	 宋江</span></span>
<span class="line"><span>1008	林冲	   1009	 1009	 宋江</span></span>
<span class="line"><span>1009	宋江	   NULL	 NULL	 NULL</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="连接原理" tabindex="-1"><a class="header-anchor" href="#连接原理"><span>连接原理</span></a></h4><p>Index Nested-Loop Join 算法：查询驱动表得到<strong>数据集</strong>，然后根据数据集中的每一条记录的<strong>关联字段再分别</strong>到被驱动表中查找匹配（<strong>走索引</strong>），所以驱动表只需要访问一次，被驱动表要访问多次</p><p>MySQL 将查询驱动表后得到的记录成为驱动表的扇出，连接查询的成本：单次访问驱动表的成本 + 扇出值 * 单次访问被驱动表的成本，优化器会选择成本最小的表连接顺序（确定谁是驱动表，谁是被驱动表）生成执行计划，进行连接查询，优化方式：</p><ul><li>减少驱动表的扇出（让数据量小的表来做驱动表）</li><li>降低访问被驱动表的成本</li></ul><p>说明：STRAIGHT_JOIN 是查一条驱动表，然后根据关联字段去查被驱动表，要访问多次驱动表，所以需要优化为 INL 算法</p><p>Block Nested-Loop Join 算法：一种<strong>空间换时间</strong>的优化方式，基于块的循环连接，执行连接查询前申请一块固定大小的内存作为连接缓冲区 Join Buffer，先把若干条驱动表中的扇出暂存在缓冲区，每一条被驱动表中的记录一次性的与 Buffer 中多条记录进行匹配（扫描全部数据，一条一条的匹配），因为是在内存中完成，所以速度快，并且降低了 I/O 成本</p><p>Join Buffer 可以通过参数 <code>join_buffer_size</code> 进行配置，默认大小是 256 KB</p><p>在成本分析时，对于很多张表的连接查询，连接顺序有非常多，MySQL 如果挨着进行遍历计算成本，会消耗很多资源</p><ul><li>提前结束某种连接顺序的成本评估：维护一个全局变量记录当前成本最小的连接方式，如果一种顺序只计算了一部分就已经超过了最小成本，可以提前结束计算</li><li>系统变量 optimizer_search_depth：如果连接表的个数小于该变量，就继续穷举分析每一种连接数量，反之只对数量与 depth 值相同的表进行分析，该值越大成本分析的越精确</li><li>系统变量 optimizer_prune_level：控制启发式规则的启用，这些规则就是根据以往经验指定的，不满足规则的连接顺序不分析成本</li></ul><hr><h4 id="连接优化" tabindex="-1"><a class="header-anchor" href="#连接优化"><span>连接优化</span></a></h4><h5 id="bka" tabindex="-1"><a class="header-anchor" href="#bka"><span>BKA</span></a></h5><p>Batched Key Access 算法是对 NLJ 算法的优化，在读取被驱动表的记录时使用顺序 IO，Extra 信息中会有 Batched Key Access 信息</p><p>使用 BKA 的表的 JOIN 过程如下：</p><ul><li>连接驱动表将满足条件的记录放入 Join Buffer，并将两表连接的字段放入一个 DYNAMIC_ARRAY ranges 中</li><li>在进行表的过接过程中，会将 ranges 相关的信息传入 Buffer 中，进行被驱动表主建的查找及排序操作</li><li>调用步骤 2 中产生的有序主建，<strong>顺序读取被驱动表的数据</strong></li><li>当缓冲区的数据被读完后，会重复进行步骤 2、3，直到记录被读取完</li></ul><p>使用 BKA 优化需要设进行设置：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET optimizer_switch=&#39;mrr=on,mrr_cost_based=off,batched_key_access=on&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>说明：前两个参数的作用是启用 MRR，因为 BKA 算法的优化要依赖于 MRR（系统优化 → 内存优化 → Read 详解）</p><hr><h5 id="bnl" tabindex="-1"><a class="header-anchor" href="#bnl"><span>BNL</span></a></h5><h6 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h6><p>BNL 即 Block Nested-Loop Join 算法，由于要访问多次被驱动表，会产生两个问题：</p><ul><li><p>Join 语句多次扫描一个冷表，并且语句执行时间小于 1 秒，就会在再次扫描冷表时，把冷表的数据页移到 LRU 链表头部，导致热数据被淘汰，影响业务的正常运行</p><p>这种情况冷表的数据量要小于整个 Buffer Pool 的 old 区域，能够完全放入 old 区，才会再次被读时加到 young，否则读取下一段时就已经把上一段淘汰</p></li><li><p>Join 语句在循环读磁盘和淘汰内存页，进入 old 区域的数据页很可能在 1 秒之内就被淘汰，就会导致 MySQL 实例的 Buffer Pool 在这段时间内 young 区域的数据页没有被合理地淘汰</p></li></ul><p>大表 Join 操作虽然对 IO 有影响，但是在语句执行结束后对 IO 的影响随之结束。但是对 Buffer Pool 的影响就是持续性的，需要依靠后续的查询请求慢慢恢复内存命中率</p><h6 id="优化" tabindex="-1"><a class="header-anchor" href="#优化"><span>优化</span></a></h6><p>将 BNL 算法转成 BKA 算法，优化方向：</p><ul><li>在被驱动表上建索引，这样就可以根据索引进行顺序 IO</li><li>使用临时表，<strong>在临时表上建立索引</strong>，将被驱动表和临时表进行连接查询</li></ul><p>驱动表 t1，被驱动表 t2，使用临时表的工作流程：</p><ul><li>把表 t1 中满足条件的数据放在临时表 tmp_t 中</li><li>给临时表 tmp_t 的关联字段加上索引，使用 BKA 算法</li><li>让表 t2 和 tmp_t 做 Join 操作（临时表是被驱动表）</li></ul><p>补充：MySQL 8.0 支持 hash join，join_buffer 维护的不再是一个无序数组，而是一个哈希表，查询效率更高，执行效率比临时表更高</p><hr><h3 id="嵌套查询" tabindex="-1"><a class="header-anchor" href="#嵌套查询"><span>嵌套查询</span></a></h3><h4 id="查询分类" tabindex="-1"><a class="header-anchor" href="#查询分类"><span>查询分类</span></a></h4><p>查询语句中嵌套了查询语句，<strong>将嵌套查询称为子查询</strong>，FROM 子句后面的子查询的结果集称为派生表</p><p>根据结果分类：</p><h5 id="标量子查询" tabindex="-1"><a class="header-anchor" href="#标量子查询"><span>标量子查询</span></a></h5><ul><li><p>结果是单行单列：可以将查询的结果作为另一条语句的查询条件，使用运算符判断，常用的操作符：= &lt;&gt; &gt; &gt;= &lt; &lt;=</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名 FROM 表名 WHERE 列名=(SELECT 列名/聚合函数(列名) FROM 表名 [WHERE 条件]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="列子查询" tabindex="-1"><a class="header-anchor" href="#列子查询"><span>列子查询</span></a></h5></li><li><p>结果是多行单列：可以作为条件，使用运算符 IN 或 NOT IN 进行判断</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名 FROM 表名 WHERE 列名 [NOT] IN (SELECT 列名 FROM 表名 [WHERE 条件]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><h5 id="行子查询" tabindex="-1"><a class="header-anchor" href="#行子查询"><span>行子查询</span></a></h5><p>子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。 常用的操作符：= 、&lt;&gt; 、IN 、NOT IN</p><p>案例: A. 查询与 &quot;张无忌&quot; 的薪资及直属领导相同的员工信息 这个需求同样可以拆解为两步进行: ①. 查询 &quot;张无忌&quot; 的薪资及直属领导 select salary, managerid from emp where name = &#39;张无忌&#39;;</p><p>②. 查询与 &quot;张无忌&quot; 的薪资及直属领导相同的员工信息 ; select * from emp where (salary,managerid) = (select salary, managerid from emp where name = &#39;张无忌&#39;);</p><h5 id="表子查询" tabindex="-1"><a class="header-anchor" href="#表子查询"><span>表子查询</span></a></h5></li><li><p>结果是多行多列：查询的结果可以作为一张虚拟表参与查询</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 列名 FROM 表名 [别名],(SELECT 列名 FROM 表名 [WHERE 条件]) [别名] [WHERE 条件];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询订单表orderlist中id大于4的订单信息和所属用户USER信息</span></span>
<span class="line"><span>SELECT </span></span>
<span class="line"><span>	* </span></span>
<span class="line"><span>FROM </span></span>
<span class="line"><span>	USER u,</span></span>
<span class="line"><span>	(SELECT * FROM orderlist WHERE id&gt;4) o </span></span>
<span class="line"><span>WHERE </span></span>
<span class="line"><span>	u.id=o.uid;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>相关性分类：</p><ul><li>不相关子查询：子查询不依赖外层查询的值，可以单独运行出结果</li><li>相关子查询：子查询的执行需要依赖外层查询的值</li></ul><hr><h4 id="查询优化" tabindex="-1"><a class="header-anchor" href="#查询优化"><span>查询优化</span></a></h4><p>不相关子查询的结果集会被写入一个临时表，并且在写入时<strong>去重</strong>，该过程称为<strong>物化</strong>，存储结果集的临时表称为物化表</p><p>系统变量 tmp_table_size 或者 max_heap_table_size 为表的最值</p><ul><li>小于系统变量时，内存中可以保存，会为建立<strong>基于内存</strong>的 MEMORY 存储引擎的临时表，并建立哈希索引</li><li>大于任意一个系统变量时，物化表会使用<strong>基于磁盘</strong>的 InnoDB 存储引擎来保存结果集中的记录，索引类型为 B+ 树</li></ul><p>物化后，嵌套查询就相当于外层查询的表和物化表进行内连接查询，然后经过优化器选择成本最小的表连接顺序执行查询</p><p>子查询物化会产生建立临时表的成本，但是将子查询转化为连接查询可以充分发挥优化器的作用，所以引入：半连接</p><ul><li>t1 和 t2 表进行半连接，对于 t1 表中的某条记录，只需要关心在 t2 表中是否存在，而不需要关心有多少条记录与之匹配，最终结果集只保留 t1 的记录</li><li>半连接只是执行子查询的一种方式，MySQL 并没有提供面向用户的半连接语法</li></ul><p>参考书籍：https://book.douban.com/subject/35231266/</p><hr><h4 id="联合查询" tabindex="-1"><a class="header-anchor" href="#联合查询"><span>联合查询</span></a></h4><p>UNION 是取这两个子查询结果的并集，并进行去重，同时进行默认规则的排序（union 是行加起来，join 是列加起来）</p><p>UNION ALL 是对两个结果集进行并集操作不进行去重，不进行排序</p><p>两者都可以不加括号</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>(select 1000 as f) union (select id from t1 order by id desc limit 2); #t1表中包含id 为 1-1000 的数据</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>语句的执行流程：</p><ul><li>创建一个内存临时表，这个临时表只有一个整型字段 f，并且 f 是主键字段</li><li>执行第一个子查询，得到 1000 这个值，并存入临时表中</li><li>执行第二个子查询，拿到第一行 id=1000，试图插入临时表中，但由于 1000 这个值已经存在于临时表了，违反了唯一性约束，所以插入失败，然后继续执行</li><li>取到第二行 id=999，插入临时表成功</li><li>从临时表中按行取出数据，返回结果并删除临时表，结果中包含两行数据分别是 1000 和 999</li></ul><hr><h3 id="查询练习" tabindex="-1"><a class="header-anchor" href="#查询练习"><span>查询练习</span></a></h3><p>数据准备：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建db4数据库</span></span>
<span class="line"><span>CREATE DATABASE db4;</span></span>
<span class="line"><span>-- 使用db4数据库</span></span>
<span class="line"><span>USE db4;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 创建user表</span></span>
<span class="line"><span>CREATE TABLE USER(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,	-- 用户id</span></span>
<span class="line"><span>	NAME VARCHAR(20),					-- 用户姓名</span></span>
<span class="line"><span>	age INT                             -- 用户年龄</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 订单表</span></span>
<span class="line"><span>CREATE TABLE orderlist(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,	-- 订单id</span></span>
<span class="line"><span>	number VARCHAR(30),					-- 订单编号</span></span>
<span class="line"><span>	uid INT,   							-- 外键字段</span></span>
<span class="line"><span>	CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id)</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 商品分类表</span></span>
<span class="line"><span>CREATE TABLE category(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,  -- 商品分类id</span></span>
<span class="line"><span>	NAME VARCHAR(10)                    -- 商品分类名称</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 商品表</span></span>
<span class="line"><span>CREATE TABLE product(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,   -- 商品id</span></span>
<span class="line"><span>	NAME VARCHAR(30),                    -- 商品名称</span></span>
<span class="line"><span>	cid INT, -- 外键字段</span></span>
<span class="line"><span>	CONSTRAINT cp_fk1 FOREIGN KEY (cid) REFERENCES category(id)</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 中间表</span></span>
<span class="line"><span>CREATE TABLE us_pro(</span></span>
<span class="line"><span>	upid INT PRIMARY KEY AUTO_INCREMENT,  -- 中间表id</span></span>
<span class="line"><span>	uid INT, 							  -- 外键字段。需要和用户表的主键产生关联</span></span>
<span class="line"><span>	pid INT,							  -- 外键字段。需要和商品表的主键产生关联</span></span>
<span class="line"><span>	CONSTRAINT up_fk1 FOREIGN KEY (uid) REFERENCES USER(id),</span></span>
<span class="line"><span>	CONSTRAINT up_fk2 FOREIGN KEY (pid) REFERENCES product(id)</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/多表练习架构设计.png" alt="多表练习架构设计" tabindex="0" loading="lazy"><figcaption>多表练习架构设计</figcaption></figure><p><strong>数据查询：</strong></p><ol><li><p>查询用户的编号、姓名、年龄、订单编号</p><p>数据：用户的编号、姓名、年龄在 user 表，订单编号在 orderlist 表</p><p>条件：user.id = orderlist.uid</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT</span></span>
<span class="line"><span>	u.*,</span></span>
<span class="line"><span>	o.number</span></span>
<span class="line"><span>FROM</span></span>
<span class="line"><span>	USER u,</span></span>
<span class="line"><span>	orderlist o</span></span>
<span class="line"><span>WHERE</span></span>
<span class="line"><span>	u.id = o.uid;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询所有的用户，显示用户的编号、姓名、年龄、订单编号。</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT</span></span>
<span class="line"><span>	u.*,</span></span>
<span class="line"><span>	o.number</span></span>
<span class="line"><span>FROM</span></span>
<span class="line"><span>	USER u</span></span>
<span class="line"><span>LEFT OUTER JOIN</span></span>
<span class="line"><span>	orderlist o</span></span>
<span class="line"><span>ON</span></span>
<span class="line"><span>	u.id = o.uid;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询用户年龄大于 23 岁的信息，显示用户的编号、姓名、年龄、订单编号</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT</span></span>
<span class="line"><span>	u.*,</span></span>
<span class="line"><span>	o.number</span></span>
<span class="line"><span>FROM</span></span>
<span class="line"><span>	USER u,</span></span>
<span class="line"><span>	orderlist o</span></span>
<span class="line"><span>WHERE</span></span>
<span class="line"><span>	u.id = o.uid</span></span>
<span class="line"><span>	AND</span></span>
<span class="line"><span>	u.age &gt; 23;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT</span></span>
<span class="line"><span>	u.*,</span></span>
<span class="line"><span>	o.number</span></span>
<span class="line"><span>FROM</span></span>
<span class="line"><span>	(SELECT * FROM USER WHERE age &gt; 23) u,-- 嵌套查询</span></span>
<span class="line"><span>	orderlist o</span></span>
<span class="line"><span>WHERE</span></span>
<span class="line"><span>	u.id = o.uid;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询张三和李四用户的信息，显示用户的编号、姓名、年龄、订单编号。</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT</span></span>
<span class="line"><span>	u.*,</span></span>
<span class="line"><span>	o.number</span></span>
<span class="line"><span>FROM</span></span>
<span class="line"><span>	USER u,</span></span>
<span class="line"><span>	orderlist o</span></span>
<span class="line"><span>WHERE</span></span>
<span class="line"><span>	u.id=o.uid</span></span>
<span class="line"><span>	AND</span></span>
<span class="line"><span>	u.name IN (&#39;张三&#39;,&#39;李四&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询所有的用户和该用户能查看的所有的商品，显示用户的编号、姓名、年龄、商品名称</p><p>数据：用户的编号、姓名、年龄在 user 表，商品名称在 product 表，中间表 us_pro</p><p>条件：us_pro.uid = user.id AND us_pro.pid = product.id</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT</span></span>
<span class="line"><span>	u.id,</span></span>
<span class="line"><span>	u.name,</span></span>
<span class="line"><span>	u.age,</span></span>
<span class="line"><span>	p.name</span></span>
<span class="line"><span>FROM</span></span>
<span class="line"><span>	USER u,</span></span>
<span class="line"><span>	product p,</span></span>
<span class="line"><span>	us_pro up</span></span>
<span class="line"><span>WHERE</span></span>
<span class="line"><span>	up.uid = u.id</span></span>
<span class="line"><span>	AND</span></span>
<span class="line"><span>	up.pid=p.id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询张三和李四这两个用户可以看到的商品，显示用户的编号、姓名、年龄、商品名称。</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT</span></span>
<span class="line"><span>	u.id,</span></span>
<span class="line"><span>	u.name,</span></span>
<span class="line"><span>	u.age,</span></span>
<span class="line"><span>	p.name</span></span>
<span class="line"><span>FROM</span></span>
<span class="line"><span>	USER u,</span></span>
<span class="line"><span>	product p,</span></span>
<span class="line"><span>	us_pro up</span></span>
<span class="line"><span>WHERE</span></span>
<span class="line"><span>	up.uid=u.id</span></span>
<span class="line"><span>	AND</span></span>
<span class="line"><span>	up.pid=p.id</span></span>
<span class="line"><span>	AND</span></span>
<span class="line"><span>	u.name IN (&#39;张三&#39;,&#39;李四&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h2 id="高级结构" tabindex="-1"><a class="header-anchor" href="#高级结构"><span>高级结构</span></a></h2><h3 id="视图" tabindex="-1"><a class="header-anchor" href="#视图"><span>视图</span></a></h3><h4 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍"><span>基本介绍</span></a></h4><p>视图概念：视图是一种虚拟存在的数据表，这个虚拟的表并不在数据库中实际存在</p><p>本质：将一条 SELECT 查询语句的结果封装到了一个虚拟表中，所以在创建视图的时候，工作重心要放在这条 SELECT 查询语句上</p><p>作用：将一些比较复杂的查询语句的结果，封装到一个虚拟表中，再有相同查询需求时，直接查询该虚拟表</p><p>优点：</p><ul><li>简单：使用视图的用户不需要关心表的结构、关联条件和筛选条件，因为虚拟表中已经是过滤好的结果集</li><li>安全：使用视图的用户只能访问查询的结果集，对表的权限管理并不能限制到某个行某个列</li><li>数据独立，一旦视图的结构确定，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响</li></ul><hr><h4 id="视图创建" tabindex="-1"><a class="header-anchor" href="#视图创建"><span>视图创建</span></a></h4><ul><li><p>创建视图</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE [OR REPLACE] </span></span>
<span class="line"><span>VIEW 视图名称 [(列名列表)] </span></span>
<span class="line"><span>AS 查询语句</span></span>
<span class="line"><span>[WITH [CASCADED | LOCAL] CHECK OPTION];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>注：[OR REPLACE] 是替换的意思</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WITH [CASCADED | LOCAL] CHECK OPTION</code> 决定了是否允许更新数据使记录不再满足视图的条件：</p><ul><li><p>LOCAL（本地）：只要满足本视图的条件就可以更新，比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 local ，但是v1视图创 建时未指定检查选项。 则在执行检查时，只会检查v2，不会检查v2的关联视图v1。<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687067490344.png" alt="1687067490344" loading="lazy"></p></li><li><p>CASCADED（级联）：必须满足所有针对该视图的所有视图的条件才可以更新， 默认值，比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 cascaded，但是v1视图 创建时未指定检查选项。 则在执行检查时，不仅会检查v2，还会级联检查v2的关联视图v1。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687067452908.png" alt="1687067452908" tabindex="0" loading="lazy"><figcaption>1687067452908</figcaption></figure></li></ul></li><li><p>例如</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 数据准备 city</span></span>
<span class="line"><span>id	NAME	cid</span></span>
<span class="line"><span>1	深圳	 	1</span></span>
<span class="line"><span>2	上海		1</span></span>
<span class="line"><span>3	纽约		2</span></span>
<span class="line"><span>4	莫斯科	    3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 数据准备 country</span></span>
<span class="line"><span>id	NAME</span></span>
<span class="line"><span>1	中国</span></span>
<span class="line"><span>2	美国</span></span>
<span class="line"><span>3	俄罗斯</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 创建city_country视图，保存城市和国家的信息(使用指定列名)</span></span>
<span class="line"><span>CREATE </span></span>
<span class="line"><span>VIEW </span></span>
<span class="line"><span>	city_country (city_id,city_name,country_name)</span></span>
<span class="line"><span>AS</span></span>
<span class="line"><span>    SELECT</span></span>
<span class="line"><span>        c1.id,</span></span>
<span class="line"><span>        c1.name,</span></span>
<span class="line"><span>        c2.name</span></span>
<span class="line"><span>    FROM</span></span>
<span class="line"><span>        city c1,</span></span>
<span class="line"><span>        country c2</span></span>
<span class="line"><span>    WHERE</span></span>
<span class="line"><span>        c1.cid=c2.id;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 注：视图默认不会加前面的表名，最好取个别名防止报错</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询视图</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM 视图名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查询某个视图创建</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW CREATE VIEW 视图名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h4 id="视图修改" tabindex="-1"><a class="header-anchor" href="#视图修改"><span>视图修改</span></a></h4><p>视图表数据修改，会<strong>自动修改源表中的数据</strong>，因为更新的是视图中的基表中的数据</p><ul><li><p>修改视图表中的数据</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>UPDATE 视图名称 SET 列名 = 值 WHERE 条件;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>修改视图的结构</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]</span></span>
<span class="line"><span>VIEW 视图名称 [(列名列表)] </span></span>
<span class="line"><span>AS 查询语句</span></span>
<span class="line"><span>[WITH [CASCADED | LOCAL] CHECK OPTION]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 将视图中的country_name修改为name</span></span>
<span class="line"><span>ALTER </span></span>
<span class="line"><span>VIEW </span></span>
<span class="line"><span>	city_country (city_id,city_name,name) </span></span>
<span class="line"><span>AS</span></span>
<span class="line"><span>    SELECT</span></span>
<span class="line"><span>        c1.id,</span></span>
<span class="line"><span>        c1.name,</span></span>
<span class="line"><span>        c2.name</span></span>
<span class="line"><span>    FROM</span></span>
<span class="line"><span>        city c1,</span></span>
<span class="line"><span>        country c2</span></span>
<span class="line"><span>    WHERE</span></span>
<span class="line"><span>        c1.cid=c2.id;</span></span>
<span class="line"><span>-- 注：视图最好给表取别名，因为视图只会记录属性名，容易报错</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="视图删除" tabindex="-1"><a class="header-anchor" href="#视图删除"><span>视图删除</span></a></h4><ul><li><p>删除视图</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP VIEW 视图名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>如果存在则删除</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP VIEW IF EXISTS 视图名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="视图更新" tabindex="-1"><a class="header-anchor" href="#视图更新"><span>视图更新</span></a></h4><p>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一 项，则该视图不可更新： A. 聚合函数或窗口函数（SUM()、 MIN()、 MAX()、 COUNT()等） B. DISTINCT C. GROUP BY D. HAVING E. UNION 或者 UNION ALL 示例演示:</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>create view stu_v_count as select count(*) from student;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上述的视图中，就只有一个单行单列的数据，如果我们对这个视图进行更新或插入的，将会报错。</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>insert into stu_v_count values(10);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687068663823.png" alt="1687068663823" tabindex="0" loading="lazy"><figcaption>1687068663823</figcaption></figure><p>上述的视图中，就只有一个单行单列的数据，如果我们对这个视图进行更新或插入的，将会报错。 insert into stu_v_count values(10);</p><hr><h3 id="存储过程" tabindex="-1"><a class="header-anchor" href="#存储过程"><span>存储过程</span></a></h3><h4 id="基本介绍-1" tabindex="-1"><a class="header-anchor" href="#基本介绍-1"><span>基本介绍</span></a></h4><p>存储过程和函数：存储过程和函数是事先经过编译并存储在数据库中的一段 SQL 语句的集合</p><p>存储过程和函数的好处：</p><ul><li>提高代码的复用性</li><li>减少数据在数据库和应用服务器之间的传输，提高传输效率</li><li>减少代码层面的业务处理</li><li><strong>一次编译永久有效</strong></li></ul><p>存储过程和函数的区别：</p><ul><li>存储函数必须有返回值</li><li>存储过程可以没有返回值</li></ul><hr><h4 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h4><p>DELIMITER：</p><ul><li><p>DELIMITER 关键字用来声明 sql 语句的分隔符，告诉 MySQL 该段命令已经结束</p></li><li><p>MySQL 语句默认的分隔符是分号，但是有时需要一条功能 sql 语句中包含分号，但是并不作为结束标识，这时使用 DELIMITER 来指定分隔符：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER 分隔符</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>存储过程的创建调用查看和删除：</p><ul><li><p>创建存储过程</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 修改分隔符为$</span></span>
<span class="line"><span>DELIMITER $</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 标准语法</span></span>
<span class="line"><span>CREATE PROCEDURE 存储过程名称(参数...)</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	sql语句;</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 修改分隔符为分号</span></span>
<span class="line"><span>DELIMITER ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>调用存储过程</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CALL 存储过程名称(实际参数);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查看存储过程</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM mysql.proc WHERE db=&#39;数据库名称&#39;;</span></span>
<span class="line"><span>SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = &#39;xxx&#39;;  -- 查询指</span></span>
<span class="line"><span>定数据库的存储过程及状态信息</span></span>
<span class="line"><span>SHOW  CREATE  PROCEDURE   存储过程名称 ;  -- 查询某个存储过程的定义</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除存储过程</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP PROCEDURE [IF EXISTS] 存储过程名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>练习：</p><ul><li><p>数据准备</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>id	NAME	age		gender	score</span></span>
<span class="line"><span>1	张三		23		男		95</span></span>
<span class="line"><span>2	李四		24		男		98</span></span>
<span class="line"><span>3	王五		25		女		100</span></span>
<span class="line"><span>4	赵六		26		女		90</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建 stu_group() 存储过程，封装分组查询总成绩，并按照总成绩升序排序的功能</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE PROCEDURE stu_group()</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	SELECT gender,SUM(score) getSum FROM student GROUP BY gender ORDER BY getSum ASC; </span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DELIMITER ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 调用存储过程</span></span>
<span class="line"><span>CALL stu_group();</span></span>
<span class="line"><span>-- 删除存储过程</span></span>
<span class="line"><span>DROP PROCEDURE IF EXISTS stu_group;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="存储语法" tabindex="-1"><a class="header-anchor" href="#存储语法"><span>存储语法</span></a></h4><h5 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h5><p>在MySQL中变量分为三种类型: 系统变量、用户定义变量、局部变量。</p><p>​ 系统变量： 系统变量 是MySQL服务器提供，不是用户定义的，属于服务器层面。分为全局变量（GLOBAL）、会话 变量（SESSION）。 查看系统变量</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW [ SESSION | GLOBAL ] VARIABLES ; -- 查看所有系统变量</span></span>
<span class="line"><span>SHOW [ SESSION | GLOBAL ] VARIABLES LIKE &#39;......&#39;; -- 可以通过LIKE模糊匹配方</span></span>
<span class="line"><span>式查找变量</span></span>
<span class="line"><span>SELECT @@[SESSION | GLOBAL] 系统变量名; -- 查看指定变量的值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置系统变量</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET [ SESSION | GLOBAL ] 系统变量名 = 值 ;</span></span>
<span class="line"><span>SET @@[SESSION | GLOBAL]系统变量名 = 值 ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>如果没有指定SESSION/GLOBAL，默认是SESSION，会话变量。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>mysql服务重新启动之后，所设置的全局参数会失效，要想不失效，可以在 /etc/my.cnf 中配置。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>A. 全局变量(GLOBAL): 全局变量针对于所有的会话。 B. 会话变量(SESSION): 会话变量针对于单个会话，在另外一个会话窗口就不生效了。</p><p>演示示例:</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 查看系统变量</span></span>
<span class="line"><span>show session variables ;</span></span>
<span class="line"><span>show session variables like &#39;auto%&#39;;</span></span>
<span class="line"><span>show global variables like &#39;auto%&#39;;</span></span>
<span class="line"><span>select @@global.autocommit;</span></span>
<span class="line"><span>select @@session.autocommit;</span></span>
<span class="line"><span>-- 设置系统变量</span></span>
<span class="line"><span>set session autocommit = 1;</span></span>
<span class="line"><span>insert into course(id, name) VALUES (6, &#39;ES&#39;);</span></span>
<span class="line"><span>set global autocommit = 0;</span></span>
<span class="line"><span>select @@global.autocommit;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用户定义变量</strong></p><p>用户定义变量 是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用 &quot;@变量 名&quot; 使用就可以。其作用域为当前连接。</p><p>赋值</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 方式一：</span></span>
<span class="line"><span>SET @var_name = expr [, @var_name = expr] ... ;</span></span>
<span class="line"><span>SET @var_name := expr [, @var_name := expr] ... ;</span></span>
<span class="line"><span>-- 方式二：</span></span>
<span class="line"><span>SELECT @var_name := expr [, @var_name := expr] ... ;</span></span>
<span class="line"><span>SELECT 字段名 INTO @var_name FROM 表名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT @var_name ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意: 用户定义的变量无需对其进行声明或初始化，只不过获取到的值为NULL。</p><p>演示示例:</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 赋值</span></span>
<span class="line"><span>set @myname = &#39;itcast&#39;;</span></span>
<span class="line"><span>set @myage := 10;</span></span>
<span class="line"><span>set @mygender := &#39;男&#39;,@myhobby := &#39;java&#39;;</span></span>
<span class="line"><span>select @mycolor := &#39;red&#39;;</span></span>
<span class="line"><span>select count(*) into @mycount from tb_user;</span></span>
<span class="line"><span>-- 使用</span></span>
<span class="line"><span>select @myname,@myage,@mygender,@myhobby;</span></span>
<span class="line"><span>select @mycolor , @mycount;</span></span>
<span class="line"><span>select @abc;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>局部变量：</p><p>局部变量 是根据需要定义的在局部生效的变量，访问之前，需要DECLARE声明。可用作存储过程内的 局部变量和输入参数，<strong>局部变量的范围是在其内声明的BEGIN ... END块</strong>。</p><p>声明</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DECLARE 变量名 变量类型 [DEFAULT ... ] ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>变量类型就是数据库字段类型：INT、BIGINT、CHAR、VARCHAR、DATE、TIME等。</p><p>赋值</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET 变量名 = 值 ;</span></span>
<span class="line"><span>SET 变量名 := 值 ;</span></span>
<span class="line"><span>SELECT 字段名 INTO 变量名 FROM 表名 ... ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示示例:</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 声明局部变量 - declare</span></span>
<span class="line"><span>-- 赋值</span></span>
<span class="line"><span>create procedure p2()</span></span>
<span class="line"><span>begin</span></span>
<span class="line"><span>declare stu_count int default 0;</span></span>
<span class="line"><span>select count(*) into stu_count from student;</span></span>
<span class="line"><span>select stu_count;</span></span>
<span class="line"><span>end;</span></span>
<span class="line"><span>call p2();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="if语句" tabindex="-1"><a class="header-anchor" href="#if语句"><span>IF语句</span></a></h5><ul><li><p>if 语句标准语法</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>IF 判断条件1 THEN 执行的sql语句1;</span></span>
<span class="line"><span>[ELSEIF 判断条件2 THEN 执行的sql语句2;]</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>[ELSE 执行的sql语句n;]</span></span>
<span class="line"><span>END IF;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数据准备：表 student</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>id	NAME	age		gender	score</span></span>
<span class="line"><span>1	张三		23		男		95</span></span>
<span class="line"><span>2	李四		24		男		98</span></span>
<span class="line"><span>3	王五		25		女		100</span></span>
<span class="line"><span>4	赵六		26		女		90</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>根据总成绩判断：全班 380 分及以上学习优秀、320 ~ 380 学习良好、320 以下学习一般</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span>CREATE PROCEDURE pro_test4()</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	DECLARE total INT;							-- 定义总分数变量</span></span>
<span class="line"><span>	DECLARE description VARCHAR(10);			-- 定义分数描述变量</span></span>
<span class="line"><span>	SELECT SUM(score) INTO total FROM student; 	-- 为总分数变量赋值</span></span>
<span class="line"><span>	-- 判断总分数</span></span>
<span class="line"><span>	IF total &gt;= 380 THEN</span></span>
<span class="line"><span>		SET description = &#39;学习优秀&#39;;</span></span>
<span class="line"><span>	ELSEIF total &gt;=320 AND total &lt; 380 THEN</span></span>
<span class="line"><span>		SET description = &#39;学习良好&#39;;</span></span>
<span class="line"><span>	ELSE</span></span>
<span class="line"><span>		SET description = &#39;学习一般&#39;;</span></span>
<span class="line"><span>	END IF;</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span>DELIMITER ;</span></span>
<span class="line"><span>-- 调用pro_test4存储过程</span></span>
<span class="line"><span>CALL pro_test4();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="参数传递" tabindex="-1"><a class="header-anchor" href="#参数传递"><span>参数传递</span></a></h5><ul><li><p>参数传递的语法</p><p>IN：代表输入参数，需要由调用者传递实际数据，默认的 OUT：代表输出参数，该参数可以作为返回值 INOUT：代表既可以作为输入参数，也可以作为输出参数</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 标准语法</span></span>
<span class="line"><span>CREATE PROCEDURE 存储过程名称([IN|OUT|INOUT] 参数名 数据类型)</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	执行的sql语句;</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DELIMITER ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>输入总成绩变量，代表学生总成绩，输出分数描述变量，代表学生总成绩的描述</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE PROCEDURE pro_test6(IN total INT, OUT description VARCHAR(10))</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	-- 判断总分数</span></span>
<span class="line"><span>	IF total &gt;= 380 THEN </span></span>
<span class="line"><span>		SET description = &#39;学习优秀&#39;;</span></span>
<span class="line"><span>	ELSEIF total &gt;= 320 AND total &lt; 380 THEN </span></span>
<span class="line"><span>		SET description = &#39;学习不错&#39;;</span></span>
<span class="line"><span>	ELSE </span></span>
<span class="line"><span>		SET description = &#39;学习一般&#39;;</span></span>
<span class="line"><span>	END IF;</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DELIMITER ;</span></span>
<span class="line"><span>-- 调用pro_test6存储过程</span></span>
<span class="line"><span>CALL pro_test6(310,@description);</span></span>
<span class="line"><span>CALL pro_test6((SELECT SUM(score) FROM student), @description);</span></span>
<span class="line"><span>-- 查询总成绩描述</span></span>
<span class="line"><span>SELECT @description;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看参数方法</p><ul><li>@变量名 : <strong>用户会话变量</strong>，代表整个会话过程他都是有作用的，类似于全局变量</li><li>@@变量名 : <strong>系统变量</strong></li></ul></li></ul><hr><h5 id="case" tabindex="-1"><a class="header-anchor" href="#case"><span>CASE</span></a></h5><ul><li><p>标准语法 1</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CASE 表达式</span></span>
<span class="line"><span>    WHEN 值1 THEN 执行sql语句1;</span></span>
<span class="line"><span>    [WHEN 值2 THEN 执行sql语句2;]</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    [ELSE 执行sql语句n;]</span></span>
<span class="line"><span>END CASE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>标准语法 2</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>sCASE</span></span>
<span class="line"><span>    WHEN 判断条件1 THEN 执行sql语句1;</span></span>
<span class="line"><span>    [WHEN 判断条件2 THEN 执行sql语句2;]</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    [ELSE 执行sql语句n;]</span></span>
<span class="line"><span>END CASE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>演示</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span>CREATE PROCEDURE pro_test7(IN total INT)</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	-- 定义变量</span></span>
<span class="line"><span>	DECLARE description VARCHAR(10);</span></span>
<span class="line"><span>	-- 使用case判断</span></span>
<span class="line"><span>	CASE</span></span>
<span class="line"><span>	WHEN total &gt;= 380 THEN</span></span>
<span class="line"><span>		SET description = &#39;学习优秀&#39;;</span></span>
<span class="line"><span>	WHEN total &gt;= 320 AND total &lt; 380 THEN</span></span>
<span class="line"><span>		SET description = &#39;学习不错&#39;;</span></span>
<span class="line"><span>	ELSE </span></span>
<span class="line"><span>		SET description = &#39;学习一般&#39;;</span></span>
<span class="line"><span>	END CASE;</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	-- 查询分数描述信息</span></span>
<span class="line"><span>	SELECT description;</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span>DELIMITER ;</span></span>
<span class="line"><span>-- 调用pro_test7存储过程</span></span>
<span class="line"><span>CALL pro_test7(390);</span></span>
<span class="line"><span>CALL pro_test7((SELECT SUM(score) FROM student));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="while" tabindex="-1"><a class="header-anchor" href="#while"><span>WHILE</span></a></h5><ul><li><p>while 循环语法</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>WHILE 条件判断语句 DO</span></span>
<span class="line"><span>	循环体语句;</span></span>
<span class="line"><span>	条件控制语句;</span></span>
<span class="line"><span>END WHILE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>计算 1~100 之间的偶数和</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span>CREATE PROCEDURE pro_test6()</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	-- 定义求和变量</span></span>
<span class="line"><span>	DECLARE result INT DEFAULT 0;</span></span>
<span class="line"><span>	-- 定义初始化变量</span></span>
<span class="line"><span>	DECLARE num INT DEFAULT 1;</span></span>
<span class="line"><span>	-- while循环</span></span>
<span class="line"><span>	WHILE num &lt;= 100 DO</span></span>
<span class="line"><span>		IF num % 2 = 0 THEN</span></span>
<span class="line"><span>			SET result = result + num;</span></span>
<span class="line"><span>		END IF;</span></span>
<span class="line"><span>		SET num = num + 1;</span></span>
<span class="line"><span>	END WHILE;</span></span>
<span class="line"><span>	-- 查询求和结果</span></span>
<span class="line"><span>	SELECT result;</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span>DELIMITER ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 调用pro_test6存储过程</span></span>
<span class="line"><span>CALL pro_test6();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="repeat" tabindex="-1"><a class="header-anchor" href="#repeat"><span>REPEAT</span></a></h5><ul><li><p>repeat 循环标准语法</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>初始化语句;</span></span>
<span class="line"><span>REPEAT</span></span>
<span class="line"><span>	循环体语句;</span></span>
<span class="line"><span>	条件控制语句;</span></span>
<span class="line"><span>	UNTIL 条件判断语句</span></span>
<span class="line"><span>END REPEAT;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>计算 1~10 之间的和</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span>CREATE PROCEDURE pro_test9()</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	-- 定义求和变量</span></span>
<span class="line"><span>	DECLARE result INT DEFAULT 0;</span></span>
<span class="line"><span>	-- 定义初始化变量</span></span>
<span class="line"><span>	DECLARE num INT DEFAULT 1;</span></span>
<span class="line"><span>	-- repeat循环</span></span>
<span class="line"><span>	REPEAT</span></span>
<span class="line"><span>		-- 累加</span></span>
<span class="line"><span>		SET result = result + num;</span></span>
<span class="line"><span>		-- 让num+1</span></span>
<span class="line"><span>		SET num = num + 1;</span></span>
<span class="line"><span>		-- 停止循环</span></span>
<span class="line"><span>		UNTIL num &gt; 10</span></span>
<span class="line"><span>	END REPEAT;</span></span>
<span class="line"><span>	-- 查询求和结果</span></span>
<span class="line"><span>	SELECT result;</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DELIMITER ;</span></span>
<span class="line"><span>-- 调用pro_test9存储过程</span></span>
<span class="line"><span>CALL pro_test9();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="loop" tabindex="-1"><a class="header-anchor" href="#loop"><span>LOOP</span></a></h5><p>LOOP 实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用 LEAVE 语句实现，如果不加退出循环的语句，那么就变成了死循环</p><p>LEAVE ：配合循环使用，退出循环。 ITERATE：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环。</p><ul><li><p>loop 循环标准语法</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[循环名称:] LOOP</span></span>
<span class="line"><span>	条件判断语句</span></span>
<span class="line"><span>		[LEAVE 循环名称;]</span></span>
<span class="line"><span>	循环体语句;</span></span>
<span class="line"><span>	条件控制语句;</span></span>
<span class="line"><span>END LOOP 循环名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>计算 1~10 之间的和</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span>CREATE PROCEDURE pro_test10()</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	-- 定义求和变量</span></span>
<span class="line"><span>	DECLARE result INT DEFAULT 0;</span></span>
<span class="line"><span>	-- 定义初始化变量</span></span>
<span class="line"><span>	DECLARE num INT DEFAULT 1;</span></span>
<span class="line"><span>	-- loop循环</span></span>
<span class="line"><span>	l:LOOP</span></span>
<span class="line"><span>		-- 条件成立，停止循环</span></span>
<span class="line"><span>		IF num &gt; 10 THEN</span></span>
<span class="line"><span>			LEAVE l;</span></span>
<span class="line"><span>		END IF;</span></span>
<span class="line"><span>		-- 累加</span></span>
<span class="line"><span>		SET result = result + num;</span></span>
<span class="line"><span>		-- 让num+1</span></span>
<span class="line"><span>		SET num = num + 1;</span></span>
<span class="line"><span>	END LOOP l;</span></span>
<span class="line"><span>	-- 查询求和结果</span></span>
<span class="line"><span>	SELECT result;</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span>DELIMITER ;</span></span>
<span class="line"><span>-- 调用pro_test10存储过程</span></span>
<span class="line"><span>CALL pro_test10();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="游标" tabindex="-1"><a class="header-anchor" href="#游标"><span>游标</span></a></h5><p>游标是用来存储查询结果集的数据类型，在存储过程和函数中可以使用光标对结果集进行循环的处理</p><ul><li>游标可以遍历返回的多行结果，每次拿到一整行数据</li><li>简单来说游标就类似于集合的迭代器遍历</li><li>MySQL 中的游标只能用在存储过程和函数中</li></ul><p>游标的语法</p><ul><li><p>创建游标</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DECLARE 游标名称 CURSOR FOR 查询sql语句;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>打开游标</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>OPEN 游标名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用游标获取数据</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>FETCH 游标名称 INTO 变量名1,变量名2,...;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>关闭游标</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CLOSE 游标名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Mysql 通过一个 Error handler 声明来判断指针是否到尾部，并且必须和创建游标的 SQL 语句声明在一起：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DECLARE EXIT HANDLER FOR NOT FOUND (do some action，一般是设置标志变量)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>游标的基本使用</p><ul><li><p>数据准备：表 student</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>id	NAME	age		gender	score</span></span>
<span class="line"><span>1	张三		23		男		95</span></span>
<span class="line"><span>2	李四		24		男		98</span></span>
<span class="line"><span>3	王五		25		女		100</span></span>
<span class="line"><span>4	赵六		26		女		90</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建 stu_score 表</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE stu_score(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,</span></span>
<span class="line"><span>	score INT</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将student表中所有的成绩保存到stu_score表中</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE PROCEDURE pro_test12()</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	-- 定义成绩变量</span></span>
<span class="line"><span>	DECLARE s_score INT;</span></span>
<span class="line"><span>	-- 定义标记变量</span></span>
<span class="line"><span>	DECLARE flag INT DEFAULT 0;</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	-- 创建游标，查询所有学生成绩数据</span></span>
<span class="line"><span>	DECLARE stu_result CURSOR FOR SELECT score FROM student;</span></span>
<span class="line"><span>	-- 游标结束后，将标记变量改为1  这两个必须声明在一起</span></span>
<span class="line"><span>	DECLARE EXIT HAND SET flag = 1;</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	-- 开启游标</span></span>
<span class="line"><span>	OPEN stu_result;</span></span>
<span class="line"><span>	-- 循环使用游标</span></span>
<span class="line"><span>	REPEAT</span></span>
<span class="line"><span>		-- 使用游标，遍历结果,拿到数据</span></span>
<span class="line"><span>		FETCH stu_result INTO s_score;</span></span>
<span class="line"><span>		-- 将数据保存到stu_score表中</span></span>
<span class="line"><span>		INSERT INTO stu_score VALUES (NULL,s_score);</span></span>
<span class="line"><span>	UNTIL flag=1</span></span>
<span class="line"><span>	END REPEAT;</span></span>
<span class="line"><span>	-- 关闭游标</span></span>
<span class="line"><span>	CLOSE stu_result;</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DELIMITER ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 调用pro_test12存储过程</span></span>
<span class="line"><span>CALL pro_test12();</span></span>
<span class="line"><span>-- 查询stu_score表</span></span>
<span class="line"><span>SELECT * FROM stu_score;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="条件处理程序" tabindex="-1"><a class="header-anchor" href="#条件处理程序"><span>条件处理程序</span></a></h5><p>条件处理程序（Handler）可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。具体 语法为</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DECLARE handler_action HANDLER FOR condition_value [, condition_value]... statement ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>handler_action 的取值：</span></span>
<span class="line"><span>	CONTINUE: 继续执行当前程序</span></span>
<span class="line"><span>	EXIT: 终止执行当前程序</span></span>
<span class="line"><span>condition_value 的取值：</span></span>
<span class="line"><span>	SQLSTATE sqlstate_value: 状态码，如 02000</span></span>
<span class="line"><span>	SQLWARNING: 所有以01开头的SQLSTATE代码的简写</span></span>
<span class="line"><span>	NOT FOUND: 所有以02开头的SQLSTATE代码的简写</span></span>
<span class="line"><span>	SQLEXCEPTION: 所有没有被SQLWARNING 或 NOT FOUND捕获的SQLSTATE代码的简写</span></span>
<span class="line"><span>statement的含义：</span></span>
<span class="line"><span>	sql语句</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="存储函数" tabindex="-1"><a class="header-anchor" href="#存储函数"><span>存储函数</span></a></h3><p>存储函数和存储过程是非常相似的，存储函数可以做的事情，存储过程也可以做到</p><p>存储函数有返回值，存储过程没有返回值（参数的 out 其实也相当于是返回数据了）</p><ul><li><p>创建存储函数</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span>-- 标准语法</span></span>
<span class="line"><span>CREATE FUNCTION 函数名称(参数 数据类型)</span></span>
<span class="line"><span>RETURNS type [characteristic...]</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	执行的sql语句;</span></span>
<span class="line"><span>	RETURN 结果;</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DELIMITER ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>characteristic说明：</span></span>
<span class="line"><span>	DETERMINISTIC：相同的输入参数总是产生相同的结果</span></span>
<span class="line"><span>	NO SQL ：不包含 SQL 语句。</span></span>
<span class="line"><span>	READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>调用存储函数，因为有返回值，所以使用 SELECT 调用</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 函数名称(实际参数);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>删除存储函数</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP FUNCTION 函数名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>定义存储函数，获取学生表中成绩大于95分的学生数量</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span>CREATE FUNCTION fun_test()</span></span>
<span class="line"><span>RETURN INT</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	-- 定义统计变量</span></span>
<span class="line"><span>	DECLARE result INT;</span></span>
<span class="line"><span>	-- 查询成绩大于95分的学生数量，给统计变量赋值</span></span>
<span class="line"><span>	SELECT COUNT(score) INTO result FROM student WHERE score &gt; 95;</span></span>
<span class="line"><span>	-- 返回统计结果</span></span>
<span class="line"><span>	SELECT result;</span></span>
<span class="line"><span>END</span></span>
<span class="line"><span>DELIMITER ;</span></span>
<span class="line"><span>-- 调用fun_test存储函数</span></span>
<span class="line"><span>SELECT fun_test();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="触发器" tabindex="-1"><a class="header-anchor" href="#触发器"><span>触发器</span></a></h3><h4 id="基本介绍-2" tabindex="-1"><a class="header-anchor" href="#基本介绍-2"><span>基本介绍</span></a></h4><p>触发器是与表有关的数据库对象，在 insert/update/delete 之前或之后触发并执行触发器中定义的 SQL 语句</p><ul><li><p>触发器的这种特性可以协助应用在数据库端确保数据的完整性 、日志记录 、数据校验等操作</p></li><li><p>使用别名 NEW 和 OLD 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的</p></li><li><p>现在触发器还只支持行级触发，不支持语句级触发</p></li></ul><table><thead><tr><th>触发器类型</th><th>OLD的含义</th><th>NEW的含义</th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td>无 (因为插入前状态无数据)</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE 型触发器</td><td>OLD 表示修改之前的数据</td><td>NEW 表示将要或已经修改后的数据</td></tr><tr><td>DELETE 型触发器</td><td>OLD 表示将要或者已经删除的数据</td><td>无 (因为删除后状态无数据)</td></tr></tbody></table><hr><h4 id="基本操作-1" tabindex="-1"><a class="header-anchor" href="#基本操作-1"><span>基本操作</span></a></h4><ul><li><p>创建触发器</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE TRIGGER 触发器名称</span></span>
<span class="line"><span>BEFORE|AFTER  INSERT|UPDATE|DELETE</span></span>
<span class="line"><span>ON 表名</span></span>
<span class="line"><span>[FOR EACH ROW]  -- 行级触发器</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	触发器要执行的功能;</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DELIMITER ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看触发器的状态、语法等信息</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW TRIGGERS;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>删除触发器，如果没有指定 schema_name，默认为当前数据库</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP TRIGGER [schema_name.]trigger_name;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h4 id="触发演示" tabindex="-1"><a class="header-anchor" href="#触发演示"><span>触发演示</span></a></h4><p>通过触发器记录账户表的数据变更日志。包含：增加、修改、删除</p><ul><li><p>数据准备</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建db9数据库</span></span>
<span class="line"><span>CREATE DATABASE db9;</span></span>
<span class="line"><span>-- 使用db9数据库</span></span>
<span class="line"><span>USE db9;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建账户表account</span></span>
<span class="line"><span>CREATE TABLE account(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,	-- 账户id</span></span>
<span class="line"><span>	NAME VARCHAR(20),					-- 姓名</span></span>
<span class="line"><span>	money DOUBLE						-- 余额</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>-- 添加数据</span></span>
<span class="line"><span>INSERT INTO account VALUES (NULL,&#39;张三&#39;,1000),(NULL,&#39;李四&#39;,2000);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建日志表account_log</span></span>
<span class="line"><span>CREATE TABLE account_log(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,	-- 日志id</span></span>
<span class="line"><span>	operation VARCHAR(20),				-- 操作类型 (insert update delete)</span></span>
<span class="line"><span>	operation_time DATETIME,			-- 操作时间</span></span>
<span class="line"><span>	operation_id INT,					-- 操作表的id</span></span>
<span class="line"><span>	operation_params VARCHAR(200)       -- 操作参数</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建 INSERT 型触发器</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE TRIGGER account_insert</span></span>
<span class="line"><span>AFTER INSERT</span></span>
<span class="line"><span>ON account</span></span>
<span class="line"><span>FOR EACH ROW</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	INSERT INTO account_log VALUES (NULL,&#39;INSERT&#39;,NOW(),new.id,CONCAT(&#39;插入后{id=&#39;,new.id,&#39;,name=&#39;,new.name,&#39;,money=&#39;,new.money,&#39;}&#39;));</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DELIMITER ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 向account表添加记录</span></span>
<span class="line"><span>INSERT INTO account VALUES (NULL,&#39;王五&#39;,3000);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询日志表</span></span>
<span class="line"><span>SELECT * FROM account_log;</span></span>
<span class="line"><span>/*</span></span>
<span class="line"><span>id	operation	operation_time		operation_id	operation_params</span></span>
<span class="line"><span>1	INSERT	   	2021-01-26 19:51:11		3	     插入后{id=3,name=王五money=2000}</span></span>
<span class="line"><span>*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建 UPDATE 型触发器</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE TRIGGER account_update</span></span>
<span class="line"><span>AFTER UPDATE</span></span>
<span class="line"><span>ON account</span></span>
<span class="line"><span>FOR EACH ROW</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	INSERT INTO account_log VALUES (NULL,&#39;UPDATE&#39;,NOW(),new.id,CONCAT(&#39;修改前{id=&#39;,old.id,&#39;,name=&#39;,old.name,&#39;,money=&#39;,old.money,&#39;}&#39;,&#39;修改后{id=&#39;,new.id,&#39;,name=&#39;,new.name,&#39;,money=&#39;,new.money,&#39;}&#39;));</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DELIMITER ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 修改account表</span></span>
<span class="line"><span>UPDATE account SET money=3500 WHERE id=3;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询日志表</span></span>
<span class="line"><span>SELECT * FROM account_log;</span></span>
<span class="line"><span>/*</span></span>
<span class="line"><span>id	operation	operation_time		operation_id	  operation_params</span></span>
<span class="line"><span>2	UPDATE	   	2021-01-26 19:58:54		2		 更新前{id=2,name=李四money=1000}</span></span>
<span class="line"><span>												 更新后{id=2,name=李四money=200}</span></span>
<span class="line"><span>*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建 DELETE 型触发器</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DELIMITER $</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE TRIGGER account_delete</span></span>
<span class="line"><span>AFTER DELETE</span></span>
<span class="line"><span>ON account</span></span>
<span class="line"><span>FOR EACH ROW</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>	INSERT INTO account_log VALUES (NULL,&#39;DELETE&#39;,NOW(),old.id,CONCAT(&#39;删除前{id=&#39;,old.id,&#39;,name=&#39;,old.name,&#39;,money=&#39;,old.money,&#39;}&#39;));</span></span>
<span class="line"><span>END$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DELIMITER ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 删除account表数据</span></span>
<span class="line"><span>DELETE FROM account WHERE id=3;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询日志表</span></span>
<span class="line"><span>SELECT * FROM account_log;</span></span>
<span class="line"><span>/*</span></span>
<span class="line"><span>id	operation	operation_time		operation_id	operation_params</span></span>
<span class="line"><span>3	DELETE		2021-01-26 20:02:48		3	    删除前{id=3,name=王五money=2000}</span></span>
<span class="line"><span>*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎"><span>存储引擎</span></a></h2><h3 id="基本介绍-3" tabindex="-1"><a class="header-anchor" href="#基本介绍-3"><span>基本介绍</span></a></h3><p>对比其他数据库，MySQL 的架构可以在不同场景应用并发挥良好作用，主要体现在存储引擎，插件式的存储引擎架构将查询处理和其他的系统任务以及数据的存储提取分离，可以针对不同的存储需求可以选择最优的存储引擎</p><p>存储引擎的介绍：</p><ul><li>MySQL 数据库使用不同的机制存取表文件 , 机制的差别在于不同的存储方式、索引技巧、锁定水平等不同的功能和能力，在 MySQL 中，将这些不同的技术及配套的功能称为存储引擎</li><li>Oracle、SqlServer 等数据库只有一种存储引擎，MySQL <strong>提供了插件式的存储引擎架构</strong>，所以 MySQL 存在多种存储引擎 , 就会让数据库采取了不同的处理数据的方式和扩展功能</li><li>在关系型数据库中数据的存储是以表的形式存进行，所以存储引擎也称为表类型（存储和操作此表的类型）</li><li>通过选择不同的引擎，能够获取最佳的方案, 也能够获得额外的速度或者功能，提高程序的整体效果。</li></ul><p>MySQL 支持的存储引擎：</p><ul><li>MySQL 支持的引擎包括：InnoDB、MyISAM、MEMORY、Archive、Federate、CSV、BLACKHOLE 等</li><li>MySQL5.5 之前的默认存储引擎是 MyISAM，5.5 之后就改为了 InnoDB</li></ul><h4 id="innodb引擎" tabindex="-1"><a class="header-anchor" href="#innodb引擎"><span>InnoDB引擎</span></a></h4><p>MySQL5.5 版本开始，默认使用InnoDB存储引擎，它擅长事务处理，具有崩溃恢复特性，在日常开发中使用非常广泛。下面是InnoDB架构图，左侧为内存结构，右侧为磁盘结构。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687222999294.png" alt="1687222999294" tabindex="0" loading="lazy"><figcaption>1687222999294</figcaption></figure><p>在左侧的内存结构中，主要分为这么四大块儿： Buffer Pool、Change Buffer、Adaptive Hash Index、Log Buffer。 接下来介绍一下这四个部分。</p><p>1). <strong>Buffer Pool</strong></p><p>InnoDB存储引擎基于磁盘文件存储，访问物理硬盘和在内存中进行访问，速度相差很大，为了尽可能弥补这两者之间的I/O效率的差值，就需要把经常使用的数据加载到缓冲池中，避免每次访问都进行磁盘I/O。</p><p>在InnoDB的缓冲池中不仅缓存了索引页和数据页，还包含了undo页、插入缓存、自适应哈希索引以及 InnoDB的锁信息等等。</p><p>缓冲池 Buffer Pool，是主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。</p><p>缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态，将Page分为三种类型： • free page：空闲page，未被使用。 • clean page：被使用page，数据没有被修改过。 • dirty page：脏页，被使用page，数据被修改过，也中数据与磁盘的数据产生了不一致。</p><p>在专用服务器上，通常将多达80％的物理内存分配给缓冲池 。参数设置： show variables like &#39;innodb_buffer_pool_size&#39;;</p><p>2). <strong>Change Buffer</strong> Change Buffer，更改缓冲区（针对于非唯一二级索引页），在执行DML语句时，如果这些数据Page 没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区 Change Buffer 中，在未来数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新到磁盘中。 Change Buffer的意义是什么呢? 先来看一幅图，这个是二级索引的结构图：<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687223807376.png" alt="1687223807376" loading="lazy"></p><p>与聚集索引不同，二级索引通常是非唯一的，并且以相对随机的顺序插入二级索引。同样，删除和更新 可能会影响索引树中不相邻的二级索引页，如果每一次都操作磁盘，会造成大量的磁盘IO。有了 ChangeBuffer之后，我们可以在缓冲池中进行合并处理，减少磁盘IO。</p><p>3). <strong>Adaptive Hash Index</strong> 自适应hash索引，用于优化对Buffer Pool数据的查询。MySQL的innoDB引擎中虽然没有直接支持hash索引，但是给我们提供了一个功能就是这个自适应hash索引。因为前面我们讲到过，hash索引在 进行等值匹配时，一般性能是要高于B+树的，因为hash索引一般只需要一次IO即可，而B+树，可能需要几次匹配，所以hash索引的效率要高，但是hash索引又不适合做范围查询、模糊匹配等。 InnoDB存储引擎会监控对表上各索引页的查询，如果观察到在特定的条件下hash索引可以提升速度，则建立hash索引，称之为自适应hash索引。 <strong>自适应哈希索引，无需人工干预，是系统根据情况自动完成。</strong> 参数： adaptive_hash_index</p><p>4). <strong>Log Buffer</strong> Log Buffer：日志缓冲区，用来保存要写入到磁盘中的log日志数据（redo log 、undo log），默认大小为 16MB，日志缓冲区的日志会定期刷新到磁盘中。如果需要更新、插入或删除许多行的事 务，增加日志缓冲区的大小可以节省磁盘 I/O。 参数: innodb_log_buffer_size：缓冲区大小 innodb_flush_log_at_trx_commit：日志刷新到磁盘时机，取值主要包含以下三个：</p><p>1:日志在每次事务提交时写入并刷新到磁盘，默认值。</p><p>0:每秒将日志写入并刷新到磁盘一次。</p><p>2:日志在每次事务提交后写入，并每秒刷新到磁盘一次</p><p>磁盘结构 接下来，再来看看InnoDB体系结构的右边部分，也就是磁盘结构：<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687224588959.png" alt="1687224588959" loading="lazy">1). <strong>System Tablespace</strong> 系统表空间是更改缓冲区的存储区域。如果表是在系统表空间而不是每个表文件或通用表空间中创建的，它也可能包含表和索引数据。(在MySQL5.x版本中还包含InnoDB数据字典、undolog等) 参数：innodb_data_file_path 系统表空间，默认的文件名叫 ibdata1。</p><p>2). <strong>File-Per-Table Tablespaces</strong> 如果开启了innodb_file_per_table开关 ，则每个表的文件表空间包含单个InnoDB表的数据和索引 ，并存储在文件系统上的单个数据文件中。 开关参数：innodb_file_per_table ，该参数默认开启。 那也就是说，我们没创建一个表，都会产生一个表空间文件，如图： 3). <strong>General Tablespaces</strong> 通用表空间，需要通过 CREATE TABLESPACE 语法创建通用表空间，在创建表时，可以指定该表空间。 A. 创建表空间</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLESPACE ts_name  ADD  DATAFILE  &#39;file_name&#39; ENGINE = engine_name;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>B. 创建表时指定表空间</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE  TABLE  xxx ...  TABLESPACE  ts_name;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>4). <strong>Undo Tablespaces</strong> 撤销表空间，MySQL实例在初始化时会自动创建两个默认的undo表空间（初始大小16M），用于存储 undo log日志。 5). <strong>Temporary Tablespaces</strong> InnoDB 使用会话临时表空间和全局临时表空间。存储用户创建的临时表等数据。 6). <strong>Doublewrite Buffer Files</strong> 双写缓冲区，innoDB引擎将数据页从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系统异常时恢复数据。<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687224857362.png" alt="1687224857362" loading="lazy"></p><p>7). <strong>Redo Log</strong> 重做日志，是用来实现事务的持久性。该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log）,前者是在内存中，后者在磁盘中。当事务提交之后会把所 有修改信息都会存到该日志中, 用于在刷新脏页到磁盘时,发生错误时, 进行数据恢复使用。 以循环方式写入重做日志文件，涉及两个文件： 前面我们介绍了InnoDB的内存结构，以及磁盘结构，那么内存中我们所更新的数据，又是如何到磁盘中的呢？ 此时，就涉及到一组后台线程，接下来，就来介绍一些InnoDB中涉及到的后台线程。</p><h5 id="后台线程" tabindex="-1"><a class="header-anchor" href="#后台线程"><span>后台线程<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687225707609.png" alt="1687225707609" loading="lazy"></span></a></h5><p>在InnoDB的后台线程中，分为4类，分别是：Master Thread 、IO Thread、Purge Thread、Page Cleaner Thread。 1). Master Thread 核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中, 保持数据的一致性， 还包括脏页的刷新、合并插入缓存、undo页的回收 。 2). IO Thread 在InnoDB存储引擎中大量使用了AIO来处理IO请求, 这样可以极大地提高数据库的性能，而IO Thread主要负责这些IO请求的回调。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687225756413.png" alt="1687225756413" tabindex="0" loading="lazy"><figcaption>1687225756413</figcaption></figure><p>查看到InnoDB的状态信息</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>show engine innodb status \\G;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3). Purge Thread 主要用于回收事务已经提交了的undo log，在事务提交之后，undo log可能不用了，就用它来回收。 4). Page Cleaner Thread 协助 Master Thread 刷新脏页到磁盘的线程，它可以减轻 Master Thread 的工作压力，减少阻塞。</p><hr><h3 id="引擎对比" tabindex="-1"><a class="header-anchor" href="#引擎对比"><span>引擎对比</span></a></h3><p>MyISAM 存储引擎：</p><ul><li>特点：不支持事务和外键，读取速度快，节约资源</li><li>应用场景：<strong>适用于读多写少的场景</strong>，对事务的完整性要求不高，比如一些数仓、离线数据、支付宝的年度总结之类的场景，业务进行只读操作，查询起来会更快</li><li>存储方式： <ul><li>每个 MyISAM 在磁盘上存储成 3 个文件，其文件名都和表名相同，拓展名不同</li><li>表的定义保存在 .frm 或者sdi文件，表数据保存在 .MYD (MYData) 文件中，索引保存在 .MYI (MYIndex) 文件中</li></ul></li></ul><p>InnoDB 存储引擎：(MySQL5.5 版本后默认的存储引擎)</p><ul><li>特点：<strong>支持事务</strong>和外键操作，支持并发控制。对比 MyISAM 的存储引擎，InnoDB 写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引</li><li>应用场景：对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，读写频繁的操作</li><li>存储方式： <ul><li>使用共享表空间存储， 这种方式创建的表的表结构保存在 .frm 和sdi文件中， 数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path 定义的表空间中，可以是多个文件</li><li>使用多表空间存储，创建的表的表结构存在 .frm 文件中，每个表的数据和索引单独保存在 .ibd 中</li></ul></li></ul><p>​ 逻辑存储结构</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1686905882743.png" alt="1686905882743" tabindex="0" loading="lazy"><figcaption>1686905882743</figcaption></figure><ul><li><p>表空间 : InnoDB存储引擎逻辑结构的最高层，ibd文件其实就是表空间文件，在表空间中可以 包含多个Segment段。</p></li><li><p>段 : 表空间是由各个段组成的， 常见的段有数据段、索引段、回滚段等。InnoDB中对于段的管 理，都是引擎自身完成，不需要人为对其控制，一个段中包含多个区。</p></li><li><p>区 : 区是表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为 16K， 即一个区中一共有64个连续的页。</p></li><li><p>页 : 页是组成区的最小单元，页也是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默 认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。</p></li><li><p>行 : InnoDB 存储引擎是面向行的，也就是说数据是按行进行存放的，在每一行中除了定义表时 所指定的字段以外，还包含两个隐藏字段:</p><p>Trx_id：每次对某条记录进行改动时，都会把对应的事务id赋值给trx_id隐藏列。 Roll_pointer：每次对某条引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</p></li></ul><p>MEMORY 存储引擎：</p><ul><li>特点：每个 MEMORY 表实际对应一个磁盘文件 ，该文件中只存储表的结构，表数据保存在内存中，且默认<strong>使用 HASH 索引</strong>，所以数据默认就是无序的，但是在需要快速定位记录可以提供更快的访问，<strong>服务一旦关闭，表中的数据就会丢失</strong>，存储不安全</li><li>应用场景：<strong>缓存型存储引擎</strong>，通常用于更新不太频繁的小表，用以快速得到访问结果</li><li>存储方式：表结构保存在 .frm 中</li></ul><p>MERGE 存储引擎：</p><ul><li><p>特点：</p><ul><li>是一组 MyISAM 表的组合，这些 MyISAM 表必须结构完全相同，通过将不同的表分布在多个磁盘上</li><li>MERGE 表本身并没有存储数据，对 MERGE 类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的 MyISAM 表进行的</li></ul></li><li><p>应用场景：将一系列等同的 MyISAM 表以逻辑方式组合在一起，并作为一个对象引用他们，适合做数据仓库</p></li><li><p>操作方式：</p><ul><li>插入操作是通过 INSERT_METHOD 子句定义插入的表，使用 FIRST 或 LAST 值使得插入操作被相应地作用在第一或者最后一个表上；不定义这个子句或者定义为 NO，表示不能对 MERGE 表执行插入操作</li><li>对 MERGE 表进行 DROP 操作，但是这个操作只是删除 MERGE 表的定义，对内部的表是没有任何影响的</li></ul><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE order_1(</span></span>
<span class="line"><span>)ENGINE = MyISAM DEFAULT CHARSET=utf8;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE TABLE order_2(</span></span>
<span class="line"><span>)ENGINE = MyISAM DEFAULT CHARSET=utf8;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE TABLE order_all(</span></span>
<span class="line"><span>	-- 结构与MyISAM表相同</span></span>
<span class="line"><span>)ENGINE = MERGE UNION = (order_1,order_2) INSERT_METHOD=LAST DEFAULT CHARSET=utf8;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MERGE.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><table><thead><tr><th>特性</th><th>MyISAM</th><th>InnoDB</th><th>MEMORY</th></tr></thead><tbody><tr><td>存储限制</td><td>有（平台对文件系统大小的限制）</td><td>64TB</td><td>有（平台的内存限制）</td></tr><tr><td><strong>事务安全</strong></td><td><strong>不支持</strong></td><td><strong>支持</strong></td><td><strong>不支持</strong></td></tr><tr><td><strong>锁机制</strong></td><td><strong>表锁</strong></td><td><strong>表锁/行锁</strong></td><td><strong>表锁</strong></td></tr><tr><td>B+Tree 索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>集群索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>数据索引</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>数据缓存</td><td>不支持</td><td>支持</td><td>N/A</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>N/A</td></tr><tr><td>数据可压缩</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>空间使用</td><td>低</td><td>高</td><td>N/A</td></tr><tr><td>内存使用</td><td>低</td><td>高</td><td>中等</td></tr><tr><td>批量插入速度</td><td>高</td><td>低</td><td>高</td></tr><tr><td><strong>外键</strong></td><td><strong>不支持</strong></td><td><strong>支持</strong></td><td><strong>不支持</strong></td></tr></tbody></table><p>只读场景 MyISAM 比 InnoDB 更快：</p><ul><li>底层存储结构有差别，MyISAM 是非聚簇索引，叶子节点保存的是数据的具体地址，不用回表查询</li><li>InnoDB 每次查询需要维护 MVCC 版本状态，保证并发状态下的读写冲突问题</li></ul><hr><h3 id="引擎操作" tabindex="-1"><a class="header-anchor" href="#引擎操作"><span>引擎操作</span></a></h3><ul><li><p>查询数据库支持的存储引擎</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW ENGINES;</span></span>
<span class="line"><span>SHOW VARIABLES LIKE &#39;%storage_engine%&#39;; -- 查看Mysql数据库默认的存储引擎</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询某个数据库中所有数据表的存储引擎</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW TABLE STATUS FROM 数据库名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查询某个数据库中某个数据表的存储引擎</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW TABLE STATUS FROM 数据库名称 WHERE NAME = &#39;数据表名称&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>创建数据表，指定存储引擎</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE 表名(</span></span>
<span class="line"><span>	列名,数据类型,</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>)ENGINE = 引擎名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改数据表的存储引擎</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE 表名 ENGINE = 引擎名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h2 id="索引机制" tabindex="-1"><a class="header-anchor" href="#索引机制"><span>索引机制</span></a></h2><h3 id="索引介绍" tabindex="-1"><a class="header-anchor" href="#索引介绍"><span>索引介绍</span></a></h3><h4 id="基本介绍-4" tabindex="-1"><a class="header-anchor" href="#基本介绍-4"><span>基本介绍</span></a></h4><p>MySQL 官方对索引的定义为：索引（index）是帮助 MySQL 高效获取数据的一种数据结构，**本质是排好序的快速查找数据结构。**在表数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式指向数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引</p><p><strong>索引是在存储引擎层实现的</strong>，所以并没有统一的索引标准，即不同存储引擎的索引的工作方式并不一样</p><p>索引使用：一张数据表，用于保存数据；一个索引配置文件，用于保存索引；每个索引都指向了某一个数据 <img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-索引的介绍.png" alt="" loading="lazy"></p><p>左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快 Col2 的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据的物理地址的指针，这样就可以运用二叉查找快速获取到相应数据</p><p>索引的优点：</p><ul><li>类似于书籍的目录索引，提高数据检索的效率，降低数据库的 IO 成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低 CPU 的消耗</li></ul><p>索引的缺点：</p><ul><li>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式<strong>存储在磁盘</strong>上</li><li>虽然索引大大提高了查询效率，同时却也降低更新表的速度。对表进行 INSERT、UPDATE、DELETE 操作，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，还会调整因为更新所带来的键值变化后的索引信息，<strong>但是更新数据也需要先从数据库中获取</strong>，索引加快了获取速度，所以可以相互抵消一下。</li><li>索引会影响到 WHERE 的查询条件和排序 ORDER BY 两大功能</li></ul><hr><h4 id="索引分类" tabindex="-1"><a class="header-anchor" href="#索引分类"><span>索引分类</span></a></h4><p>索引一般的分类如下：</p><ul><li><p>功能分类</p><ul><li>主键索引：一种特殊的唯一索引，不允许有空值，一般在建表时同时创建主键索引</li><li>单列索引：一个索引只包含单个列，一个表可以有多个单列索引（普通索引）</li><li>联合索引：顾名思义，就是将单列索引进行组合</li><li>唯一索引：索引列的值必须唯一，<strong>允许有空值</strong>，如果是联合索引，则列值组合必须唯一 <ul><li>NULL 值可以出现多次，因为两个 NULL 比较的结果既不相等，也不不等，结果仍然是未知</li><li>可以声明不允许存储 NULL 值的非空唯一索引</li></ul></li><li>外键索引：只有 InnoDB 引擎支持外键索引，用来保证数据的一致性、完整性和实现级联操作</li></ul></li><li><p>结构分类</p><ul><li>BTree 索引：MySQL 使用最频繁的一个索引数据结构，是 InnoDB 和 MyISAM 存储引擎默认的索引类型，底层基于 B+Tree</li><li>Hash 索引：MySQL中 Memory 存储引擎默认支持的索引类型</li><li>R-tree 索引（空间索引）：空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型</li><li>Full-text 索引（全文索引）：快速匹配全部文档的方式。MyISAM 支持， InnoDB 不支持 FULLTEXT 类型的索引，但是 InnoDB 可以使用 sphinx 插件支持全文索引，MEMORY 引擎不支持</li></ul><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>BTREE</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>HASH</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-tree</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6 版本之后支持</td><td>支持</td><td>不支持</td></tr></tbody></table></li></ul><p>联合索引图示：根据身高年龄建立的组合索引（height、age）</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-组合索引图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="索引操作" tabindex="-1"><a class="header-anchor" href="#索引操作"><span>索引操作</span></a></h3><p>索引在创建表的时候可以同时创建， 也可以随时增加新的索引</p><ul><li><p>创建索引：如果一个表中有一列是主键，那么会<strong>默认为其创建主键索引</strong>（主键列不需要单独创建索引）</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE [UNIQUE|FULLTEXT] INDEX 索引名称 [USING 索引类型] ON 表名(列名...);</span></span>
<span class="line"><span>-- 索引类型默认是 B+TREE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看索引</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW INDEX FROM 表名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>添加索引</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 单列索引</span></span>
<span class="line"><span>ALTER TABLE 表名 ADD INDEX 索引名称(列名);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 组合索引</span></span>
<span class="line"><span>ALTER TABLE 表名 ADD INDEX 索引名称(列名1,列名2,...);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 主键索引</span></span>
<span class="line"><span>ALTER TABLE 表名 ADD PRIMARY KEY(主键列名); </span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 外键索引(添加外键约束，就是外键索引)</span></span>
<span class="line"><span>ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY (本表外键列名) REFERENCES 主表名(主键列名);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 唯一索引</span></span>
<span class="line"><span>ALTER TABLE 表名 ADD UNIQUE 索引名称(列名);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 全文索引(mysql只支持文本类型)</span></span>
<span class="line"><span>ALTER TABLE 表名 ADD FULLTEXT 索引名称(列名);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除索引</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP INDEX 索引名称 ON 表名;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>案例练习</p><p>数据准备：student</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>id	NAME	 age	score</span></span>
<span class="line"><span>1	张三		23		99</span></span>
<span class="line"><span>2	李四		24		95</span></span>
<span class="line"><span>3	王五		25		98</span></span>
<span class="line"><span>4	赵六		26		97</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>索引操作：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 为student表中姓名列创建一个普通索引</span></span>
<span class="line"><span>CREATE INDEX idx_name ON student(NAME);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 为student表中年龄列创建一个唯一索引</span></span>
<span class="line"><span>CREATE UNIQUE INDEX idx_age ON student(age);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="聚簇索引" tabindex="-1"><a class="header-anchor" href="#聚簇索引"><span>聚簇索引</span></a></h3><h4 id="索引对比" tabindex="-1"><a class="header-anchor" href="#索引对比"><span>索引对比</span></a></h4><p>聚簇索引是一种数据存储方式，并不是一种单独的索引类型</p><ul><li>聚簇索引的叶子节点存放的是主键值和数据行，支持覆盖索引</li><li>非聚簇索引的叶子节点存放的是主键值或指向数据行的指针（由存储引擎决定）</li></ul><p>在 Innodb 下主键索引是聚簇索引，在 MyISAM 下主键索引是非聚簇索引</p><hr><h4 id="innodb" tabindex="-1"><a class="header-anchor" href="#innodb"><span>Innodb</span></a></h4><h5 id="聚簇索引-1" tabindex="-1"><a class="header-anchor" href="#聚簇索引-1"><span>聚簇索引</span></a></h5><p>在 Innodb 存储引擎，B+ 树索引可以分为聚簇索引（也称聚集索引、clustered index）和辅助索引（也称非聚簇索引或二级索引、secondary index、non-clustered index）</p><p>InnoDB 中，聚簇索引是按照每张表的主键构造一颗 B+ 树，叶子节点中存放的就是整张表的数据，将聚簇索引的叶子节点称为数据页</p><ul><li>这个特性决定了<strong>数据也是索引的一部分</strong>，所以一张表只能有一个聚簇索引</li><li>辅助索引的存在不影响聚簇索引中数据的组织，所以一张表可以有多个辅助索引</li></ul><p>聚簇索引的优点：</p><ul><li>数据访问更快，聚簇索引将索引和数据保存在同一个 B+ 树中，因此从聚簇索引中获取数据比非聚簇索引更快</li><li>聚簇索引对于主键的排序查找和范围查找速度非常快</li></ul><p>聚簇索引的缺点：</p><ul><li>插入速度严重依赖于插入顺序，按照主键的顺序（递增）插入是最快的方式，否则将会出现页分裂，严重影响性能，所以对于 InnoDB 表，一般都会定义一个自增的 ID 列为主键</li><li>更新主键的代价很高，将会导致被更新的行移动，所以对于 InnoDB 表，一般定义主键为不可更新</li><li>二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据</li></ul><hr><h5 id="辅助索引" tabindex="-1"><a class="header-anchor" href="#辅助索引"><span>辅助索引</span></a></h5><p>在聚簇索引之上创建的索引称之为辅助索引，非聚簇索引都是辅助索引，像复合索引、前缀索引、唯一索引等</p><p>辅助索引叶子节点存储的是主键值，而不是数据的物理地址，所以访问数据需要二次查找，推荐使用覆盖索引，可以减少回表查询</p><p><strong>检索过程</strong>：辅助索引找到主键值，再通过聚簇索引（二分）找到数据页，最后通过数据页中的 Page Directory（二分）找到对应的数据分组，遍历组内所所有的数据找到数据行</p><p>补充：无索引走全表查询，查到数据页后和上述步骤一致</p><hr><h5 id="索引实现" tabindex="-1"><a class="header-anchor" href="#索引实现"><span>索引实现</span></a></h5><p>InnoDB 使用 B+Tree 作为索引结构，并且 InnoDB 一定有索引</p><p>主键索引：</p><ul><li>在 InnoDB 中，表数据文件本身就是按 B+Tree 组织的一个索引结构，这个索引的 key 是数据表的主键，叶子节点 data 域保存了完整的数据记录</li><li>InnoDB 的表数据文件<strong>通过主键聚集数据</strong>，如果没有定义主键，会选择非空唯一索引代替，如果也没有这样的列，MySQL 会自动为 InnoDB 表生成一个<strong>隐含字段 row_id</strong> 作为主键，这个字段长度为 6 个字节，类型为长整形</li></ul><p>辅助索引：</p><ul><li>InnoDB 的所有辅助索引（二级索引）都引用主键作为 data 域</li><li>InnoDB 表是基于聚簇索引建立的，因此 InnoDB 的索引能提供一种非常快速的主键查找性能。不过辅助索引也会包含主键列，所以不建议使用过长的字段作为主键，<strong>过长的主索引会令辅助索引变得过大</strong></li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB聚簇和辅助索引结构.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="myisam" tabindex="-1"><a class="header-anchor" href="#myisam"><span>MyISAM</span></a></h4><h5 id="非聚簇" tabindex="-1"><a class="header-anchor" href="#非聚簇"><span>非聚簇</span></a></h5><p>MyISAM 的主键索引使用的是非聚簇索引，索引文件和数据文件是分离的，<strong>索引文件仅保存数据的地址</strong></p><ul><li>主键索引 B+ 树的节点存储了主键，辅助键索引 B+ 树存储了辅助键，表数据存储在独立的地方，这两颗 B+ 树的叶子节点都使用一个地址指向真正的表数据，对于表数据来说，这两个键没有任何差别</li><li>由于索引树是独立的，通过辅助索引检索<strong>无需回表查询</strong>访问主键的索引树</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-聚簇索引和辅助索引检锁数据图.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h5 id="索引实现-1" tabindex="-1"><a class="header-anchor" href="#索引实现-1"><span>索引实现</span></a></h5><p>MyISAM 的索引方式也叫做非聚集的，之所以这么称呼是为了与 InnoDB 的聚集索引区分</p><p>主键索引：MyISAM 引擎使用 B+Tree 作为索引结构，叶节点的 data 域存放的是数据记录的地址</p><p>辅助索引：MyISAM 中主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求 key 是唯一的，而辅助索引的 key 可以重复</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM主键和辅助索引结构.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>参考文章：https://blog.csdn.net/lm1060891265/article/details/81482136</p><hr><h3 id="索引结构" tabindex="-1"><a class="header-anchor" href="#索引结构"><span>索引结构</span></a></h3><h4 id="数据页" tabindex="-1"><a class="header-anchor" href="#数据页"><span>数据页</span></a></h4><p>文件系统的最小单元是块（block），一个块的大小是 4K，系统从磁盘读取数据到内存时是以磁盘块为基本单位的，位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么</p><p>InnoDB 存储引擎中有页（Page）的概念，页是 MySQL 磁盘管理的最小单位</p><ul><li><strong>InnoDB 存储引擎中默认每个页的大小为 16KB，索引中一个节点就是一个数据页</strong>，所以会一次性读取 16KB 的数据到内存</li><li>InnoDB 引擎将若干个地址连接磁盘块，以此来达到页的大小 16KB</li><li>在查询数据时如果一个页中的每条数据都能有助于定位数据记录的位置，这将会减少磁盘 I/O 次数，提高查询效率</li></ul><p>超过 16KB 的一条记录，主键索引页只会存储部分数据和指向<strong>溢出页</strong>的指针，剩余数据都会分散存储在溢出页中</p><p>数据页物理结构，从上到下：</p><ul><li>File Header：上一页和下一页的指针、该页的类型（索引页、数据页、日志页等）、<strong>校验和</strong>、LSN（最近一次修改当前页面时的系统 lsn 值，事务持久性部分详解）等信息</li><li>Page Header：记录状态信息</li><li>Infimum + Supremum：当前页的最小记录和最大记录（头尾指针），Infimum 所在分组只有一条记录，Supremum 所在分组可以有 1 ~ 8 条记录，剩余的分组可以有 4 ~ 8 条记录</li><li>User Records：存储数据的记录</li><li>Free Space：尚未使用的存储空间</li><li>Page Directory：分组的目录，可以通过目录快速定位（二分法）数据的分组</li><li>File Trailer：检验和字段，在刷脏过程中，页首和页尾的校验和一致才能说明页面刷新成功，二者不同说明刷新期间发生了错误；LSN 字段，也是用来校验页面的完整性</li></ul><p>数据页中包含数据行，数据的存储是基于数据行的，数据行有 next_record 属性指向下一个行数据，所以是可以遍历的，但是一组数据至多 8 个行，通过 Page Directory 先定位到组，然后遍历获取所需的数据行即可</p><p>数据行中有三个隐藏字段：trx_id、roll_pointer、row_id（在事务章节会详细介绍它们的作用）</p><hr><h4 id="btree" tabindex="-1"><a class="header-anchor" href="#btree"><span>BTree</span></a></h4><p>BTree 的索引类型是基于 B+Tree 树型数据结构的，B+Tree 又是 BTree 数据结构的变种，用在数据库和操作系统中的文件系统，特点是能够保持数据稳定有序</p><p>BTree 又叫多路平衡搜索树，一颗 m 叉的 BTree 特性如下：</p><ul><li>树中每个节点最多包含 m 个孩子</li><li>除根节点与叶子节点外，每个节点至少有 [ceil(m/2)] 个孩子</li><li>若根节点不是叶子节点，则至少有两个孩子</li><li>所有的叶子节点都在同一层</li><li>每个非叶子节点由 n 个 key 与 n+1 个指针组成，其中 [ceil(m/2)-1] &lt;= n &lt;= m-1</li></ul><p>5 叉，key 的数量 [ceil(m/2)-1] &lt;= n &lt;= m-1 为 2 &lt;= n &lt;=4 ，当 n&gt;4 时中间节点分裂到父节点，两边节点分裂</p><p>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据的工作流程：</p><ul><li><p>插入前 4 个字母 C N G A</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree工作流程1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>插入 H，n&gt;4，中间元素 G 字母向上分裂到新的节点</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree工作流程2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>插入 E、K、Q 不需要分裂</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree工作流程3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>插入 M，中间元素 M 字母向上分裂到父节点 G</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree工作流程4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>插入 F，W，L，T 不需要分裂</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree工作流程5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>插入 Z，中间元素 T 向上分裂到父节点中</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree工作流程6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>插入 D，中间元素 D 向上分裂到父节点中，然后插入 P，R，X，Y 不需要分裂</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree工作流程7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>最后插入 S，NPQR 节点 n&gt;5，中间节点 Q 向上分裂，但分裂后父节点 DGMT 的 n&gt;5，中间节点 M 向上分裂</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree工作流程8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><p>BTree 树就已经构建完成了，BTree 树和二叉树相比， 查询数据的效率更高， 因为对于相同的数据量来说，<strong>BTree 的层级结构比二叉树少</strong>，所以搜索速度快</p><p>BTree 结构的数据可以让系统高效的找到数据所在的磁盘块，定义一条记录为一个二元组 [key, data] ，key 为记录的键值，对应表中的主键值，data 为一行记录中除主键外的数据。对于不同的记录，key 值互不相同，BTree 中的每个节点根据实际情况可以包含大量的关键字信息和分支 <img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/索引的原理1.png" alt="" loading="lazy"></p><p>缺点：当进行范围查找时会出现回旋查找</p><hr><h4 id="b-tree" tabindex="-1"><a class="header-anchor" href="#b-tree"><span>B+Tree</span></a></h4><h5 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h5><p>BTree 数据结构中每个节点中不仅包含数据的 key 值，还有 data 值。磁盘中每一页的存储空间是有限的，如果 data 数据较大时将会导致每个节点（即一个页）能存储的 key 的数量很小，当存储的数据量很大时同样会导致 B-Tree 的深度较大，增大查询时的磁盘 I/O 次数，进而影响查询效率，所以引入 B+Tree</p><p>B+Tree 为 BTree 的变种，B+Tree 与 BTree 的区别为：</p><ul><li><p>n 叉 B+Tree 最多含有 n 个 key（哈希值），而 BTree 最多含有 n-1 个 key</p></li><li><p>所有<strong>非叶子节点只存储键值 key</strong> 信息，只进行数据索引，使每个非叶子节点所能保存的关键字大大增加</p></li><li><p>所有<strong>数据都存储在叶子节点</strong>，所以每次数据查询的次数都一样</p></li><li><p><strong>叶子节点按照 key 大小顺序排列，左边结尾数据都会保存右边节点开始数据的指针，形成一个链表</strong></p></li><li><p>所有节点中的 key 在叶子节点中也存在（比如 5)，<strong>key 允许重复</strong>，B 树不同节点不存在重复的 key</p></li></ul><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-B加Tree数据结构.png" style="zoom:67%;"><p>B* 树：是 B+ 树的变体，在 B+ 树的非根和非叶子结点再增加指向兄弟的指针</p><hr><h5 id="优化结构" tabindex="-1"><a class="header-anchor" href="#优化结构"><span>优化结构</span></a></h5><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化，在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，<strong>提高区间访问的性能，防止回旋查找</strong></p><p>区间访问的意思是访问索引为 5 - 15 的数据，可以直接根据相邻节点的指针遍历</p><p>B+ 树的<strong>叶子节点是数据页</strong>（page），一个页里面可以存多个数据行</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/索引的原理2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通常在 B+Tree 上有两个头指针，<strong>一个指向根节点，另一个指向关键字最小的叶子节点</strong>，而且所有叶子节点（即数据节点）之间是一种链式环结构。可以对 B+Tree 进行两种查找运算：</p><ul><li>有范围：对于主键的范围查找和分页查找</li><li>有顺序：从根节点开始，进行随机查找，顺序查找</li></ul><p>InnoDB 中每个数据页的大小默认是 16KB，</p><ul><li>索引行：一般表的主键类型为 INT（4 字节）或 BIGINT（8 字节），指针大小在 InnoDB 中设置为 6 字节节，也就是说一个页大概存储 16KB/(8B+6B)=1K 个键值（估值）。则一个深度为 3 的 B+Tree 索引可以维护 <code>10^3 * 10^3 * 10^3 = 10亿</code> 条记录</li><li>数据行：一行数据的大小可能是 1k，一个数据页可以存储 16 行</li></ul><p>实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree 的高度一般都在 2-4 层。MySQL 的 InnoDB 存储引擎在设计时是<strong>将根节点常驻内存的</strong>，也就是说查找某一键值的行记录时最多只需要 1~3 次磁盘 I/O 操作</p><p>B+Tree 优点：提高查询速度，减少磁盘的 IO 次数，树形结构较小</p><hr><h5 id="索引维护" tabindex="-1"><a class="header-anchor" href="#索引维护"><span>索引维护</span></a></h5><p>B+ 树为了保持索引的有序性，在插入新值的时候需要做相应的维护</p><p>每个索引中每个块存储在磁盘页中，可能会出现以下两种情况：</p><ul><li>如果所在的数据页已经满了，这时候需要申请一个新的数据页，然后挪动部分数据过去，这个过程称为<strong>页分裂</strong>，原本放在一个页的数据现在分到两个页中，降低了空间利用率</li><li>当相邻两个页由于删除了数据，利用率很低之后，会将数据页做<strong>页合并</strong>，合并的过程可以认为是分裂过程的逆过程</li><li>这两个情况都是由 B+ 树的结构决定的</li></ul><p>一般选用数据小的字段做索引，字段长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小</p><p>自增主键的插入数据模式，可以让主键索引尽量地保持递增顺序插入，不涉及到挪动其他记录，<strong>避免了页分裂</strong>，页分裂的目的就是保证后一个数据页中的所有行主键值比前一个数据页中主键值大</p><p>参考文章：https://developer.aliyun.com/article/919861</p><hr><h3 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则"><span>设计原则</span></a></h3><p>索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率</p><p>创建索引时的原则：</p><ul><li><p>对查询频次较高，且数据量比较大的表建立索引</p></li><li><p>使用唯一索引，区分度越高，使用索引的效率越高</p></li><li><p>索引字段的选择，最佳候选列应当从 where 子句的条件中提取，使用覆盖索引</p></li><li><p>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的 I/O 效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升 MySQL 访问索引的 I/O 效率</p></li><li><p>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价越高。对于插入、更新、删除等 DML 操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低 DML 操作的效率，增加相应操作的时间消耗；另外索引过多的话，MySQL 也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但提高了选择的代价</p></li><li><p>MySQL 建立联合索引时会遵守<strong>最左前缀匹配原则</strong>，即最左优先，在检索数据时从联合索引的最左边开始匹配</p><p>N 个列组合而成的组合索引，相当于创建了 N 个索引，如果查询时 where 句中使用了组成该索引的<strong>前</strong>几个字段，那么这条查询 SQL 可以利用组合索引来提升查询效率</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 对name、address、phone列建一个联合索引</span></span>
<span class="line"><span>ALTER TABLE user ADD INDEX index_three(name,address,phone);</span></span>
<span class="line"><span>-- 查询语句执行时会依照最左前缀匹配原则，检索时分别会使用索引进行数据匹配。</span></span>
<span class="line"><span>(name,address,phone)</span></span>
<span class="line"><span>(name,address)</span></span>
<span class="line"><span>(name,phone)	-- 只有name字段走了索引</span></span>
<span class="line"><span>(name)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 索引的字段可以是任意顺序的，优化器会帮助我们调整顺序，下面的SQL语句可以命中索引</span></span>
<span class="line"><span>SELECT * FROM user WHERE address = &#39;北京&#39; AND phone = &#39;12345&#39; AND name = &#39;张三&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 如果联合索引中最左边的列不包含在条件查询中，SQL语句就不会命中索引，比如：</span></span>
<span class="line"><span>SELECT * FROM user WHERE address = &#39;北京&#39; AND phone = &#39;12345&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>哪些情况不要建立索引：</p><ul><li>记录太少的表</li><li>经常增删改的表</li><li>频繁更新的字段不适合创建索引</li><li>where 条件里用不到的字段不创建索引</li></ul><hr><h3 id="索引优化" tabindex="-1"><a class="header-anchor" href="#索引优化"><span>索引优化</span></a></h3><h4 id="覆盖索引" tabindex="-1"><a class="header-anchor" href="#覆盖索引"><span>覆盖索引</span></a></h4><p>覆盖索引：包含所有满足查询需要的数据的索引（SELECT 后面的字段刚好是索引字段），可以利用该索引返回 SELECT 列表的字段，而不必根据索引去聚簇索引上读取数据文件</p><p>回表查询：要查找的字段不在非主键索引树上时，需要通过叶子节点的主键值去主键索引上获取对应的行数据</p><p>使用覆盖索引，防止回表查询：</p><ul><li><p>表 user 主键为 id，普通索引为 age，查询语句：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM user WHERE age = 30;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查询过程：先通过普通索引 age=30 定位到主键值 id=1，再通过聚集索引 id=1 定位到行记录数据，需要两次扫描 B+ 树</p></li><li><p>使用覆盖索引：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP INDEX idx_age ON user;</span></span>
<span class="line"><span>CREATE INDEX idx_age_name ON user(age,name);</span></span>
<span class="line"><span>SELECT id,age FROM user WHERE age = 30;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在一棵索引树上就能获取查询所需的数据，无需回表速度更快</p></li></ul><p>使用覆盖索引，要注意 SELECT 列表中只取出需要的列，不可用 SELECT *，所有字段一起做索引会导致索引文件过大，查询性能下降</p><hr><h4 id="索引下推" tabindex="-1"><a class="header-anchor" href="#索引下推"><span>索引下推</span></a></h4><p>索引条件下推优化（Index Condition Pushdown，ICP）是 MySQL5.6 添加，可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数</p><p>索引下推充分利用了索引中的数据，在查询出整行数据之前过滤掉无效的数据，再去主键索引树上查找</p><ul><li><p>不使用索引下推优化时存储引擎通过索引检索到数据，然后回表查询记录返回给 Server 层，<strong>服务器判断数据是否符合条件</strong></p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-不使用索引下推.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>使用索引下推优化时，如果<strong>存在某些被索引的列的判断条件</strong>时，由存储引擎在索引遍历的过程中判断数据是否符合传递的条件，将符合条件的数据进行回表，检索出来返回给服务器，由此减少 IO 次数</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-使用索引下推.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><p><strong>适用条件</strong>：</p><ul><li>需要存储引擎将索引中的数据与条件进行判断（所以<strong>条件列必须都在同一个索引中</strong>），所以优化是基于存储引擎的，只有特定引擎可以使用，适用于 InnoDB 和 MyISAM</li><li>存储引擎没有调用跨存储引擎的能力，跨存储引擎的功能有存储过程、触发器、视图，所以调用这些功能的不可以进行索引下推优化</li><li>对于 InnoDB 引擎只适用于二级索引，InnoDB 的聚簇索引会将整行数据读到缓冲区，不再需要去回表查询了</li></ul><p>工作过程：用户表 user，(name, age) 是联合索引</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM user WHERE name LIKE &#39;张%&#39; AND　age = 10;	-- 头部模糊匹配会造成索引失效</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>优化前：在非主键索引树上找到满足第一个条件的行，然后通过叶子节点记录的主键值再回到主键索引树上查找到对应的行数据，再对比 AND 后的条件是否符合，符合返回数据，需要 4 次回表</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-索引下推优化1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>优化后：检查索引中存储的列信息是否符合索引条件，然后交由存储引擎用剩余的判断条件判断此行数据是否符合要求，<strong>不满足条件的不去读取表中的数据</strong>，满足下推条件的就根据主键值进行回表查询，2 次回表 <img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-索引下推优化2.png" alt="" loading="lazy"></p></li></ul><p>当使用 EXPLAIN 进行分析时，如果使用了索引条件下推，Extra 会显示 Using index condition</p><p>参考文章：https://blog.csdn.net/sinat_29774479/article/details/103470244</p><p>参考文章：https://time.geekbang.org/column/article/69636</p><hr><h4 id="前缀索引" tabindex="-1"><a class="header-anchor" href="#前缀索引"><span>前缀索引</span></a></h4><p>当要索引的列字符很多时，索引会变大变慢，可以只索引列开始的部分字符串，节约索引空间，提高索引效率</p><p>注意：使用前缀索引就系统就忽略覆盖索引对查询性能的优化了</p><p>优化原则：<strong>降低重复的索引值</strong></p><p>比如地区表：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>area			gdp		code</span></span>
<span class="line"><span>chinaShanghai	100		aaa</span></span>
<span class="line"><span>chinaDalian		200		bbb</span></span>
<span class="line"><span>usaNewYork		300		ccc</span></span>
<span class="line"><span>chinaFuxin		400		ddd</span></span>
<span class="line"><span>chinaBeijing	500		eee</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现 area 字段很多都是以 china 开头的，那么如果以前 1-5 位字符做前缀索引就会出现大量索引值重复的情况，索引值重复性越低，查询效率也就越高，所以需要建立前 6 位字符的索引：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE INDEX idx_area ON table_name(area(7));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>场景：存储身份证</p><ul><li>直接创建完整索引，这样可能比较占用空间</li><li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引</li><li>倒序存储，再创建前缀索引，用于绕过字符串本身前缀的区分度不够的问题（前 6 位相同的很多）</li><li>创建 hash 字段索引，查询性能稳定，有额外的存储和计算消耗，跟第三种方式一样，都不支持范围扫描</li></ul><hr><h4 id="索引合并" tabindex="-1"><a class="header-anchor" href="#索引合并"><span>索引合并</span></a></h4><p>使用多个索引来完成一次查询的执行方法叫做索引合并 index merge</p><ul><li><p>Intersection 索引合并：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> table_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; # key1 和 key3 列都是单列索引、二级索引</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>从不同索引中扫描到的记录的 id 值取<strong>交集</strong>（相同 id），然后执行回表操作，要求从每个二级索引获取到的记录都是按照主键值排序</p></li><li><p>Union 索引合并：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> table_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> OR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>从不同索引中扫描到的记录的 id 值取<strong>并集</strong>，然后执行回表操作，要求从每个二级索引获取到的记录都是按照主键值排序</p></li><li><p>Sort-Union 索引合并</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> table_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> OR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>先将从不同索引中扫描到的记录的主键值进行排序，再按照 Union 索引合并的方式进行查询</p></li></ul><p>索引合并算法的效率并不好，通过将其中的一个索引改成联合索引会优化效率</p><hr><h2 id="系统优化" tabindex="-1"><a class="header-anchor" href="#系统优化"><span>系统优化</span></a></h2><h3 id="表优化" tabindex="-1"><a class="header-anchor" href="#表优化"><span>表优化</span></a></h3><h4 id="分区表" tabindex="-1"><a class="header-anchor" href="#分区表"><span>分区表</span></a></h4><h5 id="基本介绍-5" tabindex="-1"><a class="header-anchor" href="#基本介绍-5"><span>基本介绍</span></a></h5><p>分区表是将大表的数据按分区字段分成许多小的子集，建立一个以 ftime 年份为分区的表：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE \`t\` (</span></span>
<span class="line"><span>    \`ftime\` datetime NOT NULL,</span></span>
<span class="line"><span>    \`c\` int(11) DEFAULT NULL,</span></span>
<span class="line"><span>    KEY (\`ftime\`)</span></span>
<span class="line"><span>) ENGINE=InnoDB DEFAULT CHARSET=latin1</span></span>
<span class="line"><span>PARTITION BY RANGE (YEAR(ftime))</span></span>
<span class="line"><span>(PARTITION p_2017 VALUES LESS THAN (2017) ENGINE = InnoDB,</span></span>
<span class="line"><span> PARTITION p_2018 VALUES LESS THAN (2018) ENGINE = InnoDB,</span></span>
<span class="line"><span> PARTITION p_2019 VALUES LESS THAN (2019) ENGINE = InnoDB,</span></span>
<span class="line"><span> PARTITION p_others VALUES LESS THAN MAXVALUE ENGINE = InnoDB);</span></span>
<span class="line"><span>INSERT INTO t VALUES(&#39;2017-4-1&#39;,1),(&#39;2018-4-1&#39;,1);-- 这两行记录分别落在 p_2018 和 p_2019 这两个分区上</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个表包含了一个.frm 文件和 4 个.ibd 文件，每个分区对应一个.ibd 文件</p><ul><li>对于引擎层来说，这是 4 个表，针对每个分区表的操作不会相互影响</li><li>对于 Server 层来说，这是 1 个表</li></ul><hr><h5 id="分区策略" tabindex="-1"><a class="header-anchor" href="#分区策略"><span>分区策略</span></a></h5><p>打开表行为：第一次访问一个分区表时，MySQL 需要<strong>把所有的分区都访问一遍</strong>，如果分区表的数量很多，超过了 open_files_limit 参数（默认值 1024），那么就会在访问这个表时打开所有的文件，导致打开表文件的个数超过了上限而报错</p><p>通用分区策略：MyISAM 分区表使用的分区策略，每次访问分区都由 Server 层控制，在文件管理、表管理的实现上很粗糙，因此有比较严重的性能问题</p><p>本地分区策略：从 MySQL 5.7.9 开始，InnoDB 引擎内部自己管理打开分区的行为，InnoDB 引擎打开文件超过 innodb_open_files 时就会<strong>关掉一些之前打开的文件</strong>，所以即使分区个数大于 open_files_limit，也不会报错</p><p>从 MySQL 8.0 版本开始，就不允许创建 MyISAM 分区表，只允许创建已经实现了本地分区策略的引擎，目前只有 InnoDB 和 NDB 这两个引擎支持了本地分区策略</p><hr><h5 id="server-层" tabindex="-1"><a class="header-anchor" href="#server-层"><span>Server 层</span></a></h5><p>从 Server 层看一个分区表就只是一个表</p><ul><li><p>Session A：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM t WHERE ftime = &#39;2018-4-1&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Session B：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ALTER TABLE t TRUNCATE PARTITION p_2017; -- blocked</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>现象：Session B 只操作 p_2017 分区，但是由于 Session A 持有整个表 t 的 MDL 读锁，就导致 B 的 ALTER 语句获取 MDL 写锁阻塞</p><p>分区表的特点：</p><ul><li>第一次访问的时候需要访问所有分区</li><li>在 Server 层认为这是同一张表，因此<strong>所有分区共用同一个 MDL 锁</strong></li><li>在引擎层认为这是不同的表，因此 MDL 锁之后的执行过程，会根据分区表规则，只访问需要的分区</li></ul><hr><h5 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h5><p>分区表的优点：</p><ul><li>对业务透明，相对于用户分表来说，使用分区表的业务代码更简洁</li><li>分区表可以很方便的清理历史数据。按照时间分区的分区表，就可以直接通过 <code>alter table t drop partition</code> 这个语法直接删除分区文件，从而删掉过期的历史数据，与使用 drop 语句删除数据相比，优势是速度快、对系统影响小</li></ul><p>使用分区表，不建议创建太多的分区，注意事项：</p><ul><li>分区并不是越细越好，单表或者单分区的数据一千万行，只要没有特别大的索引，对于现在的硬件能力来说都已经是小表</li><li>分区不要提前预留太多，在使用之前预先创建即可。比如是按月分区，每年年底时再把下一年度的 12 个新分区创建上即可，并且对于没有数据的历史分区，要及时的 drop 掉</li></ul><p>参考文档：https://time.geekbang.org/column/article/82560</p><hr><h4 id="临时表" tabindex="-1"><a class="header-anchor" href="#临时表"><span>临时表</span></a></h4><h5 id="基本介绍-6" tabindex="-1"><a class="header-anchor" href="#基本介绍-6"><span>基本介绍</span></a></h5><p>临时表分为内部临时表和用户临时表</p><ul><li><p>内部临时表：系统执行 SQL 语句优化时产生的表，例如 Join 连接查询、去重查询等</p></li><li><p>用户临时表：用户主动创建的临时表</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TEMPORARY TABLE temp_t like table_1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>临时表可以是内存表，也可以是磁盘表（多表操作 → 嵌套查询章节提及）</p><ul><li>内存表指的是使用 Memory 引擎的表，建立哈希索引，建表语法是 <code>create table … engine=memory</code>，这种表的数据都保存在内存里，系统重启时会被清空，但是表结构还在</li><li>磁盘表是使用 InnoDB 引擎或者 MyISAM 引擎的临时表，建立 B+ 树索引，写数据的时候是写到磁盘上的</li></ul><p>临时表的特点：</p><ul><li>一个临时表只能被创建它的 session 访问，对其他线程不可见，所以不同 session 的临时表是<strong>可以重名</strong>的</li><li>临时表可以与普通表同名，会话内有同名的临时表和普通表时，执行 show create 语句以及增删改查语句访问的都是临时表</li><li>show tables 命令不显示临时表</li><li>数据库发生异常重启不需要担心数据删除问题，临时表会<strong>自动回收</strong></li></ul><hr><h5 id="重名原理" tabindex="-1"><a class="header-anchor" href="#重名原理"><span>重名原理</span></a></h5><p>执行创建临时表的 SQL：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>create temporary table temp_t(id int primary key)engine=innodb;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>MySQL 给 InnoDB 表创建一个 frm 文件保存表结构定义，在 ibd 保存表数据。frm 文件放在临时文件目录下，文件名的后缀是 .frm，<strong>前缀是</strong> <code>#sql{进程 id}_{线程 id}_ 序列号</code>，使用 <code>select @@tmpdir</code> 命令，来显示实例的临时文件目录</p><p>MySQL 维护数据表，除了物理磁盘上的文件外，内存里也有一套机制区别不同的表，每个表都对应一个 table_def_key</p><ul><li>一个普通表的 table_def_key 的值是由 <code>库名 + 表名</code> 得到的，所以如果在同一个库下创建两个同名的普通表，创建第二个表的过程中就会发现 table_def_key 已经存在了</li><li>对于临时表，table_def_key 在 <code>库名 + 表名</code> 基础上，又加入了 <code>server_id + thread_id</code>，所以不同线程之间，临时表可以重名</li></ul><p>实现原理：每个线程都维护了自己的临时表链表，每次 session 内操作表时，先遍历链表，检查是否有这个名字的临时表，如果有就<strong>优先操作临时表</strong>，如果没有再操作普通表；在 session 结束时对链表里的每个临时表，执行 <code>DROP TEMPORARY TABLE + 表名</code> 操作</p><p>执行 rename table 语句无法修改临时表，因为会按照 <code>库名 / 表名.frm</code> 的规则去磁盘找文件，但是临时表文件名的规则是 <code>#sql{进程 id}_{线程 id}_ 序列号.frm</code>，因此会报找不到文件名的错误</p><hr><h5 id="主备复制" tabindex="-1"><a class="header-anchor" href="#主备复制"><span>主备复制</span></a></h5><p>创建临时表的语句会传到备库执行，因此备库的同步线程就会创建这个临时表。主库在线程退出时会自动删除临时表，但备库同步线程是持续在运行的并不会退出，所以这时就需要在主库上再写一个 DROP TEMPORARY TABLE 传给备库执行</p><p>binlog 日志写入规则：</p><ul><li>binlog_format=row，跟临时表有关的语句就不会记录到 binlog</li><li>binlog_format=statment/mixed，binlog 中才会记录临时表的操作，也就会记录 <code>DROP TEMPORARY TABLE</code> 这条命令</li></ul><p>主库上不同的线程创建同名的临时表是不冲突的，但是备库只有一个执行线程，所以 MySQL 在记录 binlog 时会把主库执行这个语句的线程 id 写到 binlog 中，在备库的应用线程就可以获取执行每个语句的主库线程 id，并利用这个线程 id 来构造临时表的 table_def_key</p><ul><li>session A 的临时表 t1，在备库的 table_def_key 就是：<code>库名 + t1 +“M 的 serverid&quot; + &quot;session A 的 thread_id”</code></li><li>session B 的临时表 t1，在备库的 table_def_key 就是 ：<code>库名 + t1 +&quot;M 的 serverid&quot; + &quot;session B 的 thread_id&quot;</code></li></ul><p>MySQL 在记录 binlog 的时不论是 create table 还是 alter table 语句都是原样记录，但是如果执行 drop table，系统记录 binlog 就会被服务端改写</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP TABLE \`t_normal\` /* generated by server */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h5 id="跨库查询" tabindex="-1"><a class="header-anchor" href="#跨库查询"><span>跨库查询</span></a></h5><p>分库分表系统的跨库查询使用临时表不用担心线程之间的重名冲突，分库分表就是要把一个逻辑上的大表分散到不同的数据库实例上</p><p>比如将一个大表 ht，按照字段 f，拆分成 1024 个分表，分布到 32 个数据库实例上，一般情况下都有一个中间层 proxy 解析 SQL 语句，通过分库规则通过分表规则（比如 N%1024）确定将这条语句路由到哪个分表做查询</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>select v from ht where f=N;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果这个表上还有另外一个索引 k，并且查询语句：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>select v from ht where k &gt;= M order by t_modified desc limit 100;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查询条件里面没有用到分区字段 f，只能<strong>到所有的分区</strong>中去查找满足条件的所有行，然后统一做 order by 操作，两种方式：</p><ul><li>在 proxy 层的进程代码中实现排序，拿到分库的数据以后，直接在内存中参与计算，但是对 proxy 端的压力比较大，很容易出现内存不够用和 CPU 瓶颈问题</li><li>把各个分库拿到的数据，汇总到一个 MySQL 实例的一个表中，然后在这个汇总实例上做逻辑操作，执行流程： <ul><li>在汇总库上创建一个临时表 temp_ht，表里包含三个字段 v、k、t_modified</li><li>在各个分库执行：<code>select v,k,t_modified from ht_x where k &gt;= M order by t_modified desc limit 100</code></li><li>把分库执行的结果插入到 temp_ht 表中</li><li>在临时表上执行：<code>select v from temp_ht order by t_modified desc limit 100</code></li></ul></li></ul><hr><h3 id="优化步骤" tabindex="-1"><a class="header-anchor" href="#优化步骤"><span>优化步骤</span></a></h3><h4 id="执行频率" tabindex="-1"><a class="header-anchor" href="#执行频率"><span>执行频率</span></a></h4><p>MySQL 客户端连接成功后，查询服务器状态信息：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW [SESSION|GLOBAL] STATUS LIKE &#39;&#39;;</span></span>
<span class="line"><span>-- SESSION: 显示当前会话连接的统计结果，默认参数</span></span>
<span class="line"><span>-- GLOBAL: 显示自数据库上次启动至今的统计结果</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>查看 SQL 执行频率：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW STATUS LIKE &#39;Com_____&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Com_xxx 表示每种语句执行的次数</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SQL语句执行频率.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>查询 SQL 语句影响的行数：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW STATUS LIKE &#39;Innodb_rows_%&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SQL语句影响的行数.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><p>Com_xxxx：这些参数对于所有存储引擎的表操作都会进行累计</p><p>Innodb_xxxx：这几个参数只是针对 InnoDB 存储引擎的，累加的算法也略有不同</p><table><thead><tr><th style="text-align:left;">参数</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left;">Com_select</td><td>执行 SELECT 操作的次数，一次查询只累加 1</td></tr><tr><td style="text-align:left;">Com_insert</td><td>执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次</td></tr><tr><td style="text-align:left;">Com_update</td><td>执行 UPDATE 操作的次数</td></tr><tr><td style="text-align:left;">Com_delete</td><td>执行 DELETE 操作的次数</td></tr><tr><td style="text-align:left;">Innodb_rows_read</td><td>执行 SELECT 查询返回的行数</td></tr><tr><td style="text-align:left;">Innodb_rows_inserted</td><td>执行 INSERT 操作插入的行数</td></tr><tr><td style="text-align:left;">Innodb_rows_updated</td><td>执行 UPDATE 操作更新的行数</td></tr><tr><td style="text-align:left;">Innodb_rows_deleted</td><td>执行 DELETE 操作删除的行数</td></tr><tr><td style="text-align:left;">Connections</td><td>试图连接 MySQL 服务器的次数</td></tr><tr><td style="text-align:left;">Uptime</td><td>服务器工作时间</td></tr><tr><td style="text-align:left;">Slow_queries</td><td>慢查询的次数</td></tr></tbody></table><hr><h4 id="定位低效" tabindex="-1"><a class="header-anchor" href="#定位低效"><span>定位低效</span></a></h4><p>SQL 执行慢有两种情况：</p><ul><li>偶尔慢：DB 在刷新脏页（学完事务就懂了） <ul><li>redo log 写满了</li><li>内存不够用，要从 LRU 链表中淘汰</li><li>MySQL 认为系统空闲的时候</li><li>MySQL 关闭时</li></ul></li><li>一直慢的原因：索引没有设计好、SQL 语句没写好、MySQL 选错了索引</li></ul><p>通过以下两种方式定位执行效率较低的 SQL 语句</p><ul><li><p>慢日志查询： 慢查询日志在查询结束以后才记录，执行效率出现问题时查询日志并不能定位问题</p><p>配置文件修改：修改 .cnf 文件 <code>vim /etc/mysql/my.cnf</code>，重启 MySQL 服务器</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">slow_query_log</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">ON</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">slow_query_log_file</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/usr/local/mysql/var/localhost-slow.log</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">long_query_time</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	#记录超过long_query_time秒的SQL语句的日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log-queries-not-using-indexes</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用命令配置：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>mysql&gt; SET slow_query_log=ON;</span></span>
<span class="line"><span>mysql&gt; SET GLOBAL slow_query_log=ON;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看是否配置成功：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW VARIABLES LIKE &#39;%query%&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>SHOW PROCESSLIST：<strong>实时查看</strong>当前 MySQL 在进行的连接线程，包括线程的状态、是否锁表、SQL 的执行情况，同时对一些锁表操作进行优化</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SHOW_PROCESSLIST命令-1720750205638-6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><hr><h4 id="explain" tabindex="-1"><a class="header-anchor" href="#explain"><span>EXPLAIN</span></a></h4><h5 id="执行计划" tabindex="-1"><a class="header-anchor" href="#执行计划"><span>执行计划</span></a></h5><p>通过 EXPLAIN 命令获取执行 SQL 语句的信息，包括在 SELECT 语句执行过程中如何连接和连接的顺序，执行计划在优化器优化完成后、执行器之前生成，然后执行器会调用存储引擎检索数据</p><p>查询 SQL 语句的执行计划：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM table_1 WHERE id = 1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-explain查询SQL语句的执行计划.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>SELECT 的序列号</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型</td></tr><tr><td>table</td><td>访问数据库中表名称，有时可能是简称或者临时表名称（&lt;table_name&gt;）</td></tr><tr><td>type</td><td>表示表的连接类型</td></tr><tr><td>possible_keys</td><td>表示查询时，可能使用的索引</td></tr><tr><td>key</td><td>表示实际使用的索引</td></tr><tr><td>key_len</td><td>索引字段的长度</td></tr><tr><td>ref</td><td>表示与索引列进行等值匹配的对象，常数、某个列、函数等，type 必须在（range, const] 之间，左闭右开</td></tr><tr><td>rows</td><td>扫描出的行数，表示 MySQL 根据表统计信息及索引选用情况，<strong>估算</strong>的找到所需的记录扫描的行数</td></tr><tr><td>filtered</td><td>条件过滤的行百分比，单表查询没意义，用于连接查询中对驱动表的扇出进行过滤，查询优化器预测所有扇出值满足剩余查询条件的百分比，相乘以后表示多表查询中还要对被驱动执行查询的次数</td></tr><tr><td>extra</td><td>执行情况的说明和描述</td></tr></tbody></table><p>MySQL <strong>执行计划的局限</strong>：</p><ul><li>只是计划，不是执行 SQL 语句，可以随着底层优化器输入的更改而更改</li><li>EXPLAIN 不会告诉显示关于触发器、存储过程的信息对查询的影响情况， 不考虑各种 Cache</li><li>EXPLAIN 不能显示 MySQL 在执行查询时的动态，因为执行计划在执行<strong>查询之前生成</strong></li><li>EXPALIN 只能解释 SELECT 操作，其他操作要重写为 SELECT 后查看执行计划</li><li>EXPLAIN PLAN 显示的是在解释语句时数据库将如何运行 SQL 语句，由于执行环境和 EXPLAIN PLAN 环境的不同，此计划可能与 SQL 语句<strong>实际的执行计划不同</strong>，部分统计信息是估算的，并非精确值</li></ul><p>SHOW WARINGS：在使用 EXPALIN 命令后执行该语句，可以查询与执行计划相关的拓展信息，展示出 Level、Code、Message 三个字段，当 Code 为 1003 时，Message 字段展示的信息类似于将查询语句重写后的信息，但是不是等价，不能执行复制过来运行</p><p>环境准备：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-执行计划环境准备.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h5 id="id" tabindex="-1"><a class="header-anchor" href="#id"><span>id</span></a></h5><p>id 代表 SQL 执行的顺序的标识，每个 SELECT 关键字对应一个唯一 id，所以在同一个 SELECT 关键字中的表的 id 都是相同的。SELECT 后的 FROM 可以跟随多个表，每个表都会对应一条记录，这些记录的 id 都是相同的，</p><ul><li><p>id 相同时，执行顺序由上至下。连接查询的执行计划，记录的 id 值都是相同的，出现在前面的表为驱动表，后面为被驱动表</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM t_role r, t_user u, user_role ur WHERE r.id = ur.role_id AND u.id = ur.user_id ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-explain之id相同.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>id 不同时，id 值越大优先级越高，越先被执行</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM t_role WHERE id = (SELECT role_id FROM user_role WHERE user_id = (SELECT id FROM t_user WHERE username = &#39;stu1&#39;))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-explain之id不同.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>id 有相同也有不同时，id 相同的可以认为是一组，从上往下顺序执行；在所有的组中，id 的值越大的组，优先级越高，越先执行</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM t_role r , (SELECT * FROM user_role ur WHERE ur.\`user_id\` = &#39;2&#39;) a WHERE r.id = a.role_id ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-explain之id相同和不同.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>id 为 NULL 时代表的是临时表</p></li></ul><hr><h5 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>select</span></a></h5><p>表示查询中每个 select 子句的类型（简单 OR 复杂）</p><table><thead><tr><th>select_type</th><th>含义</th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单的 SELECT 查询，查询中不包含子查询或者 UNION</td></tr><tr><td>PRIMARY</td><td>查询中若包含任何复杂的子查询，最外层（也就是最左侧）查询标记为该标识</td></tr><tr><td>UNION</td><td>对于 UNION 或者 UNION ALL 的复杂查询，除了最左侧的查询，其余的小查询都是 UNION</td></tr><tr><td>UNION RESULT</td><td>UNION 需要使用临时表进行去重，临时表的是 UNION RESULT</td></tr><tr><td>DEPENDENT UNION</td><td>对于 UNION 或者 UNION ALL 的复杂查询，如果各个小查询都依赖外层查询，是相关子查询，除了最左侧的小查询为 DEPENDENT SUBQUERY，其余都是 DEPENDENT UNION</td></tr><tr><td>SUBQUERY</td><td>子查询不是相关子查询，该子查询第一个 SELECT 代表的查询就是这种类型，会进行物化（该子查询只需要执行一次）</td></tr><tr><td>DEPENDENT SUBQUERY</td><td>子查询是相关子查询，该子查询第一个 SELECT 代表的查询就是这种类型，不会物化（该子查询需要执行多次）</td></tr><tr><td>DERIVED</td><td>在 FROM 列表中包含的子查询，被标记为 DERIVED（衍生），也就是生成物化派生表的这个子查询</td></tr><tr><td>MATERIALIZED</td><td>将子查询物化后与与外层进行连接查询，生成物化表的子查询</td></tr></tbody></table><p>子查询为 DERIVED：<code>SELECT * FROM (SELECT key1 FROM t1) AS derived_1 WHERE key1 &gt; 10</code></p><p>子查询为 MATERIALIZED：<code>SELECT * FROM t1 WHERE key1 IN (SELECT key1 FROM t2)</code></p><hr><h5 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>type</span></a></h5><p>对表的访问方式，表示 MySQL 在表中找到所需行的方式，又称访问类型</p><table><thead><tr><th>type</th><th>含义</th></tr></thead><tbody><tr><td>ALL</td><td>全表扫描，如果是 InnoDB 引擎是扫描聚簇索引</td></tr><tr><td>index</td><td>可以使用覆盖索引，但需要扫描全部索引</td></tr><tr><td>range</td><td>索引范围扫描，常见于 between、&lt;、&gt; 等的查询</td></tr><tr><td>index_subquery</td><td>子查询可以普通索引，则子查询的 type 为 index_subquery</td></tr><tr><td>unique_subquery</td><td>子查询可以使用主键或唯一二级索引，则子查询的 type 为 index_subquery</td></tr><tr><td>index_merge</td><td>索引合并</td></tr><tr><td>ref_or_null</td><td>非唯一性索引（普通二级索引）并且可以存储 NULL，进行等值匹配</td></tr><tr><td>ref</td><td>非唯一性索引与常量等值匹配</td></tr><tr><td>eq_ref</td><td>唯一性索引（主键或不存储 NULL 的唯一二级索引）进行等值匹配，如果二级索引是联合索引，那么所有联合的列都要进行等值匹配</td></tr><tr><td>const</td><td>通过主键或者唯一二级索引与常量进行等值匹配</td></tr><tr><td>system</td><td>system 是 const 类型的特例，当查询的表只有一条记录的情况下，使用 system</td></tr><tr><td>NULL</td><td>MySQL 在优化过程中分解语句，执行时甚至不用访问表或索引</td></tr></tbody></table><p>从上到下，性能从差到好，一般来说需要保证查询至少达到 range 级别， 最好达到 ref</p><hr><h5 id="key" tabindex="-1"><a class="header-anchor" href="#key"><span>key</span></a></h5><p>possible_keys：</p><ul><li>指出 MySQL 能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用</li><li>如果该列是 NULL，则没有相关的索引</li></ul><p>key：</p><ul><li>显示 MySQL 在查询中实际使用的索引，若没有使用索引，显示为 NULL</li><li>查询中若使用了<strong>覆盖索引</strong>，则该索引可能出现在 key 列表，不出现在 possible_keys</li></ul><p>key_len：</p><ul><li>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度</li><li>key_len 显示的值为索引字段的最大可能长度，并非实际使用长度，即 key_len 是根据表定义计算而得，不是通过表内检索出的</li><li>在不损失精确性的前提下，长度越短越好</li></ul><hr><h5 id="extra" tabindex="-1"><a class="header-anchor" href="#extra"><span>Extra</span></a></h5><p>其他的额外的执行计划信息，在该列展示：</p><ul><li>No tables used：查询语句中使用 FROM dual 或者没有 FROM 语句</li><li>Impossible WHERE：查询语句中的 WHERE 子句条件永远为 FALSE，会导致没有符合条件的行</li><li>Using index：该值表示相应的 SELECT 操作中使用了<strong>覆盖索引</strong>（Covering Index）</li><li>Using index condition：第一种情况是搜索条件中虽然出现了索引列，但是部分条件无法形成扫描区间（<strong>索引失效</strong>），会根据可用索引的条件先搜索一遍再匹配无法使用索引的条件，回表查询数据；第二种是使用了<strong>索引条件下推</strong>优化</li><li>Using where：搜索的数据需要在 Server 层判断，无法使用索引下推</li><li>Using join buffer：连接查询被驱动表无法利用索引，需要连接缓冲区来存储中间结果</li><li>Using filesort：无法利用索引完成排序（优化方向），需要对数据使用外部排序算法，将取得的数据在内存或磁盘中进行排序</li><li>Using temporary：表示 MySQL 需要使用临时表来存储结果集，常见于<strong>排序、去重（UNION）、分组</strong>等场景</li><li>Select tables optimized away：说明仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</li><li>No tables used：Query 语句中使用 from dual 或不含任何 from 子句</li></ul><p>参考文章：https://www.cnblogs.com/ggjucheng/archive/2012/11/11/2765237.html</p><hr><h4 id="profiles" tabindex="-1"><a class="header-anchor" href="#profiles"><span>PROFILES</span></a></h4><p>SHOW PROFILES 能够在做 SQL 优化时分析当前会话中语句执行的<strong>资源消耗</strong>情况</p><ul><li><p>通过 have_profiling 参数，能够看到当前 MySQL 是否支持 profile： <img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-have_profiling.png" alt="" loading="lazy"></p></li><li><p>默认 profiling 是关闭的，可以通过 set 语句在 Session 级别开启 profiling：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-profiling.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET profiling=1; #开启profiling 开关；</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>执行 SHOW PROFILES 指令， 来查看 SQL 语句执行的耗时:</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW PROFILES;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-查看SQL语句执行耗时.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>查看到该 SQL 执行过程中每个线程的状态和消耗的时间：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW PROFILE FOR QUERY query_id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SQL执行每个状态消耗的时间.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>在获取到最消耗时间的线程状态后，MySQL 支持选择 all、cpu、block io 、context switch、page faults 等类型查看 MySQL 在使用什么资源上耗费了过高的时间。例如，选择查看 CPU 的耗费时间：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SQL执行每个状态消耗的CPU.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Status：SQL 语句执行的状态</li><li>Durationsql：执行过程中每一个步骤的耗时</li><li>CPU_user：当前用户占有的 CPU</li><li>CPU_system：系统占有的 CPU</li></ul></li></ul><hr><h4 id="trace" tabindex="-1"><a class="header-anchor" href="#trace"><span>TRACE</span></a></h4><p>MySQL 提供了对 SQL 的跟踪， 通过 trace 文件可以查看优化器<strong>生成执行计划的过程</strong></p><ul><li><p>打开 trace 功能，设置格式为 JSON，并设置 trace 的最大使用内存，避免解析过程中因默认内存过小而不能够完整展示</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET optimizer_trace=&quot;enabled=on&quot;,end_markers_in_json=ON;	-- 会话内有效</span></span>
<span class="line"><span>SET optimizer_trace_max_mem_size=1000000;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行 SQL 语句：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM tb_item WHERE id &lt; 4;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>检查 information_schema.optimizer_trace：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM information_schema.optimizer_trace \\G; -- \\G代表竖列展示</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行信息主要有三个阶段：prepare 阶段、optimize 阶段（成本分析）、execute 阶段（执行）</p></li></ul><hr><h3 id="索引优化-1" tabindex="-1"><a class="header-anchor" href="#索引优化-1"><span>索引优化</span></a></h3><h4 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引"><span>创建索引</span></a></h4><p>索引是数据库优化最重要的手段之一，通过索引通常可以帮助用户解决大多数的 MySQL 的性能优化问题</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE \`tb_seller\` (</span></span>
<span class="line"><span>	\`sellerid\` varchar (100),</span></span>
<span class="line"><span>	\`name\` varchar (100),</span></span>
<span class="line"><span>	\`nickname\` varchar (50),</span></span>
<span class="line"><span>	\`password\` varchar (60),</span></span>
<span class="line"><span>	\`status\` varchar (1),</span></span>
<span class="line"><span>	\`address\` varchar (100),</span></span>
<span class="line"><span>	\`createtime\` datetime,</span></span>
<span class="line"><span>    PRIMARY KEY(\`sellerid\`)</span></span>
<span class="line"><span>)ENGINE=INNODB DEFAULT CHARSET=utf8mb4;</span></span>
<span class="line"><span>INSERT INTO \`tb_seller\` (\`sellerid\`, \`name\`, \`nickname\`, \`password\`, \`status\`, \`address\`, \`createtime\`) values(&#39;xiaomi&#39;,&#39;小米科技&#39;,&#39;小米官方旗舰店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;西安市&#39;,&#39;2088-01-01 12:00:00&#39;);</span></span>
<span class="line"><span>CREATE INDEX idx_seller_name_sta_addr ON tb_seller(name, status, address); # 联合索引</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引环境准备.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="避免失效" tabindex="-1"><a class="header-anchor" href="#避免失效"><span>避免失效</span></a></h4><h5 id="语句错误" tabindex="-1"><a class="header-anchor" href="#语句错误"><span>语句错误</span></a></h5><ul><li><p>全值匹配：对索引中所有列都指定具体值，这种情况索引生效，执行效率高</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE name=&#39;小米科技&#39; AND status=&#39;1&#39; AND address=&#39;西安市&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>最左前缀法则</strong>：联合索引遵守最左前缀法则</p><p>匹配最左前缀法则，走索引：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE name=&#39;小米科技&#39;;</span></span>
<span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE name=&#39;小米科技&#39; AND status=&#39;1&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>违法最左前缀法则 ， 索引失效：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE status=&#39;1&#39;;</span></span>
<span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE status=&#39;1&#39; AND address=&#39;西安市&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE name=&#39;小米科技&#39; AND address=&#39;西安市&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>虽然索引列失效，但是系统会<strong>使用了索引下推进行了优化</strong></p></li><li><p><strong>范围查询</strong>右边的列，不能使用索引：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE name=&#39;小米科技&#39; AND status&gt;&#39;1&#39; AND address=&#39;西安市&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>根据前面的两个字段 name ， status 查询是走索引的， 但是最后一个条件 address 没有用到索引，使用了索引下推</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>在索引列上<strong>函数或者运算（+ - 数值）操作</strong>， 索引将失效：会破坏索引值的有序性</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE SUBSTRING(name,3,2) = &#39;科技&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>字符串不加单引号</strong>，造成索引失效：隐式类型转换，当字符串和数字比较时会<strong>把字符串转化为数字</strong></p><p>没有对字符串加单引号，查询优化器会调用 CAST 函数将 status 转换为 int 进行比较，造成索引失效</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE name=&#39;小米科技&#39; AND status = 1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果 status 是 int 类型，SQL 为 <code>SELECT * FROM tb_seller WHERE status = &#39;1&#39; </code> 并不会造成索引失效，因为会将 <code>&#39;1&#39;</code> 转换为 <code>1</code>，并<strong>不会对索引列产生操作</strong></p></li><li><p>多表连接查询时，如果两张表的<strong>字符集不同</strong>，会造成索引失效，因为会进行类型转换</p><p>解决方法：CONVERT 函数是加在输入参数上、修改表的字符集</p></li><li><p><strong>用 OR 分割条件，索引失效</strong>，导致全表查询：</p><p>OR 前的条件中的列有索引而后面的列中没有索引或 OR 前后两个列是同一个复合索引，都造成索引失效</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE name=&#39;阿里巴巴&#39; OR createtime = &#39;2088-01-01 12:00:00&#39;;</span></span>
<span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE name=&#39;小米科技&#39; OR status=&#39;1&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引10.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>AND 分割的条件不影响</strong>：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE name=&#39;阿里巴巴&#39; AND createtime = &#39;2088-01-01 12:00:00&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引11.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>以 % 开头的 LIKE 模糊查询</strong>，索引失效：</p><p>如果是尾部模糊匹配，索引不会失效；如果是头部模糊匹配，索引失效</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE name like &#39;%科技%&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引12.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>解决方案：通过覆盖索引来解决</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT sellerid,name,status FROM tb_seller WHERE name like &#39;%科技%&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引13.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>原因：在覆盖索引的这棵 B+ 数上只需要进行 like 的匹配，或者是基于覆盖索引查询再进行 WHERE 的判断就可以获得结果</p></li></ul><hr><h5 id="系统优化-1" tabindex="-1"><a class="header-anchor" href="#系统优化-1"><span>系统优化</span></a></h5><p>系统优化为全表扫描：</p><ul><li><p>如果 MySQL 评估使用索引比全表更慢，则不使用索引，索引失效：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE INDEX idx_address ON tb_seller(address);</span></span>
<span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE address=&#39;西安市&#39;;</span></span>
<span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE address=&#39;北京市&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>北京市的键值占 9/10（区分度低），所以优化为全表扫描，type = ALL</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引14.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>IS NULL、IS NOT NULL <strong>有时</strong>索引失效：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE name IS NULL;</span></span>
<span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE name IS NOT NULL;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>NOT NULL 失效的原因是 name 列全部不是 null，优化为全表扫描，当 NULL 过多时，IS NULL 失效</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引15.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>IN 肯定会走索引，但是当 IN 的取值范围较大时会导致索引失效，走全表扫描：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE sellerId IN (&#39;alibaba&#39;,&#39;huawei&#39;);-- 都走索引</span></span>
<span class="line"><span>EXPLAIN SELECT * FROM tb_seller WHERE sellerId NOT IN (&#39;alibaba&#39;,&#39;huawei&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><a href="https://time.geekbang.org/column/article/74687" target="_blank" rel="noopener noreferrer">MySQL 实战 45 讲</a>该章节最后提出了一种慢查询场景，获取到数据以后 Server 层还会做判断</p></li></ul><hr><h4 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理"><span>底层原理</span></a></h4><p>索引失效一般是针对联合索引，联合索引一般由几个字段组成，排序方式是先按照第一个字段进行排序，然后排序第二个，依此类推，图示（a, b）索引，<strong>a 相等的情况下 b 是有序的</strong></p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-索引失效底层原理1.png" style="zoom:67%;"><ul><li><p>最左前缀法则：当不匹配前面的字段的时候，后面的字段都是无序的。这种无序不仅体现在叶子节点，也会<strong>导致查询时扫描的非叶子节点也是无序的</strong>，因为索引树相当于忽略的第一个字段，就无法使用二分查找</p></li><li><p>范围查询右边的列，不能使用索引，比如语句： <code>WHERE a &gt; 1 AND b = 1 </code>，在 a 大于 1 的时候，b 是无序的，a &gt; 1 是扫描时有序的，但是找到以后进行寻找 b 时，索引树就不是有序的了</p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-索引失效底层原理2.png" style="zoom:67%;"></li><li><p>以 % 开头的 LIKE 模糊查询，索引失效，比如语句：<code>WHERE a LIKE &#39;%d&#39;</code>，前面的不确定，导致不符合最左匹配，直接去索引中搜索以 d 结尾的节点，所以没有顺序 <img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-索引失效底层原理3.png" alt="" loading="lazy"></p></li></ul><p>参考文章：https://mp.weixin.qq.com/s/B_M09dzLe9w7cT46rdGIeQ</p><hr><h4 id="查看索引" tabindex="-1"><a class="header-anchor" href="#查看索引"><span>查看索引</span></a></h4><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW STATUS LIKE &#39;Handler_read%&#39;;	</span></span>
<span class="line"><span>SHOW GLOBAL STATUS LIKE &#39;Handler_read%&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL查看索引使用情况.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Handler_read_first：索引中第一条被读的次数，如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）</li><li>Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，值越低表示索引不经常使用（这个值越高越好）</li><li>Handler_read_next：按照键顺序读下一行的请求数，如果范围约束或执行索引扫描来查询索引列，值增加</li><li>Handler_read_prev：按照键顺序读前一行的请求数，该读方法主要用于优化 ORDER BY ... DESC</li><li>Handler_read_rnd：根据固定位置读一行的请求数，如果执行大量查询并对结果进行排序则该值较高，可能是使用了大量需要 MySQL 扫描整个表的查询或连接，这个值较高意味着运行效率低，应该建立索引来解决</li><li>Handler_read_rnd_next：在数据文件中读下一行的请求数，如果正进行大量的表扫描，该值较高，说明表索引不正确或写入的查询没有利用索引</li></ul><hr><h3 id="sql-优化" tabindex="-1"><a class="header-anchor" href="#sql-优化"><span>SQL 优化</span></a></h3><h4 id="自增主键" tabindex="-1"><a class="header-anchor" href="#自增主键"><span>自增主键</span></a></h4><h5 id="自增机制" tabindex="-1"><a class="header-anchor" href="#自增机制"><span>自增机制</span></a></h5><p>自增主键可以让主键索引尽量地保持在数据页中递增顺序插入，不自增需要寻找其他页插入，导致随机 IO 和页分裂的情况</p><p>表的结构定义存放在后缀名为.frm 的文件中，但是并不会保存自增值，不同的引擎对于自增值的保存策略不同：</p><ul><li>MyISAM 引擎的自增值保存在数据文件中</li><li>InnoDB 引擎的自增值保存在了内存里，每次打开表都会去找自增值的最大值 max(id)，然后将 max(id)+1 作为当前的自增值；8.0 版本后，才有了自增值持久化的能力，将自增值的变更记录在了 redo log 中，重启的时候依靠 redo log 恢复重启之前的值</li></ul><p>在插入一行数据的时候，自增值的行为如下：</p><ul><li>如果插入数据时 id 字段指定为 0、null 或未指定值，那么就把这个表当前的 AUTO_INCREMENT 值填到自增字段</li><li>如果插入数据时 id 字段指定了具体的值，比如某次要插入的值是 X，当前的自增值是 Y <ul><li>如果 X&lt;Y，那么这个表的自增值不变</li><li>如果 X≥Y，就需要把当前自增值修改为新的自增值</li></ul></li></ul><p>参数说明：auto_increment_offset 和 auto_increment_increment 分别表示自增的初始值和步长，默认值都是 1</p><p>语句执行失败也不回退自增 id，所以保证了自增 id 是递增的，但不保证是连续的（不能回退，所以有些回滚事务的自增 id 就不会重新使用，导致出现不连续）</p><h6 id="页分裂" tabindex="-1"><a class="header-anchor" href="#页分裂"><span><strong>页分裂</strong></span></a></h6><p>页可以为空，也可以填充一半，也可以填充100%。每个页包含了2-N行数据(如果一行数据过大，会行 溢出)，根据主键排列。</p><p>主键顺序插入效果 ①. 从磁盘中申请页， 主键顺序插入</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053539419.png" alt="1687053539419" tabindex="0" loading="lazy"><figcaption>1687053539419</figcaption></figure><p>②. 第一个页没有满，继续往第一页插入</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053603265.png" alt="1687053603265" tabindex="0" loading="lazy"><figcaption>1687053603265</figcaption></figure><p>③. 当第一个也写满之后，再写入第二个页，页与页之间会通过指针连接</p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053617687.png" alt="1687053617687" loading="lazy">④. 当第二页写满了，再往第三页写入</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053680135.png" alt="1687053680135" tabindex="0" loading="lazy"><figcaption>1687053680135</figcaption></figure><p>主键乱序插入效果 ①. 加入1#,2#页都已经写满了，存放了如图所示的数据</p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053697186.png" alt="1687053697186" loading="lazy">②. 此时再插入id为50的记录，我们来看看会发生什么现象 会再次开启一个页，写入新的页中吗？</p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053720439.png" alt="1687053720439" loading="lazy">不会。因为，索引结构的叶子节点是有顺序的。按照顺序，应该存储在47之后。</p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053735874.png" alt="1687053735874" loading="lazy">但是47所在的1#页，已经写满了，存储不了50对应的数据了。 那么此时会开辟一个新的页 3#。</p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053753314.png" alt="1687053753314" loading="lazy">但是并不会直接将50存入3#页，而是会将1#页后一半的数据，移动到3#页，然后在3#页，插入50。</p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053766267.png" alt="1687053766267" loading="lazy">移动数据，并插入id为50的数据之后，那么此时，这三个页之间的数据顺序是有问题的。 1#的下一个 页，应该是3#， 3#的下一个页是2#。 所以，此时，需要重新设置链表指针。</p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053801878.png" alt="1687053801878" loading="lazy">上述的这种现象，称之为 &quot;页分裂&quot;，是比较耗费性能的操作。</p><h6 id="页合并" tabindex="-1"><a class="header-anchor" href="#页合并"><span>页合并</span></a></h6><p>页合并 目前表中已有数据的索引结构(叶子节点)如下：</p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053884009.png" alt="1687053884009" loading="lazy">当我们对已有数据进行删除时，具体的效果如下: 当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间 变得允许被其他记录声明使用。</p><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053897233.png" alt="1687053897233" loading="lazy">当我们继续删除2#的数据记录<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053911184.png" alt="1687053911184" loading="lazy"> 当页中删除的记录达到 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前 或后）看看是否可以将两个页合并以优化空间使用。<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053921836.png" alt="1687053921836" loading="lazy"> 删除数据，并将页合并之后，再次插入新的数据21，则直接插入3#页<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053930426.png" alt="1687053930426" loading="lazy"> 这个里面所发生的合并页的这个现象，就称之为 &quot;页合并&quot;。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>知识小贴士：</span></span>
<span class="line"><span>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或者创建索引时指定。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="自增-id" tabindex="-1"><a class="header-anchor" href="#自增-id"><span>自增 ID</span></a></h5><p>MySQL 不同的自增 id 在达到上限后的表现不同：</p><ul><li><p>表的自增 id 如果是 int 类型，达到上限 2^32-1 后，再申请时值就不会改变，进而导致继续插入数据时报主键冲突的错误</p></li><li><p>row_id 长度为 6 个字节，达到上限后则会归 0 再重新递增，如果出现相同的 row_id，后写的数据会覆盖之前的数据，造成旧数据丢失，影响的是数据可靠性，所以应该在 InnoDB 表中主动创建自增主键报主键冲突，插入失败影响的是可用性，而一般情况下，<strong>可靠性优先于可用性</strong></p></li><li><p>Xid 长度 8 字节，由 Server 层维护，只需要不在同一个 binlog 文件中出现重复值即可，虽然理论上会出现重复值，但是概率极小</p></li><li><p>InnoDB 的 max_trx_id 递增值每次 MySQL 重启都会被保存起来，重启也不会重置为 0，所以会导致一直增加到达上限，然后从 0 开始，这时原事务 0 修改的数据对当前事务就是可见的，产生脏读的现象</p><p>只读事务不分配 trx_id，所以 trx_id 的增加速度变慢了</p></li><li><p>thread_id 长度 4 个字节，到达上限后就会重置为 0，MySQL 设计了一个唯一数组的逻辑，给新线程分配 thread_id 时做判断，保证不会出现两个相同的 thread_id：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	new_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> thread_id_counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">thread_ids</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">insert_unique</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(new_id).</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">second</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>参考文章：https://time.geekbang.org/column/article/83183</p><hr><h4 id="覆盖索引-1" tabindex="-1"><a class="header-anchor" href="#覆盖索引-1"><span>覆盖索引</span></a></h4><p>复合索引叶子节点不仅保存了复合索引的值，还有主键索引，所以使用覆盖索引的时候，加上主键也会用到索引</p><p>尽量使用覆盖索引，避免 SELECT *：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT name,status,address FROM tb_seller WHERE name=&#39;小米科技&#39; AND status=&#39;1&#39; AND address=&#39;西安市&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引8.png" alt="" loading="lazy">如果查询列，超出索引列，也会降低性能：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT name,status,address,password FROM tb_seller WHERE name=&#39;小米科技&#39; AND status=&#39;1&#39; AND address=&#39;西安市&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用索引9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="减少访问" tabindex="-1"><a class="header-anchor" href="#减少访问"><span>减少访问</span></a></h4><p>避免对数据进行重复检索：能够一次连接就获取到结果的，就不用两次连接，这样可以大大减少对数据库无用的重复请求</p><ul><li><p>查询数据：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT id,name FROM tb_book;</span></span>
<span class="line"><span>SELECT id,status FROM tb_book; -- 向数据库提交两次请求，数据库就要做两次查询操作</span></span>
<span class="line"><span>-- &gt; 优化为:</span></span>
<span class="line"><span>SELECT id,name,statu FROM tb_book;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>插入数据：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>INSERT INTO tb_test VALUES(1,&#39;Tom&#39;);</span></span>
<span class="line"><span>INSERT INTO tb_test VALUES(2,&#39;Cat&#39;);</span></span>
<span class="line"><span>INSERT INTO tb_test VALUES(3,&#39;Jerry&#39;);	-- 连接三次数据库</span></span>
<span class="line"><span>-- &gt;优化为</span></span>
<span class="line"><span>INSERT INTO tb_test VALUES(1,&#39;Tom&#39;),(2,&#39;Cat&#39;)，(3,&#39;Jerry&#39;);	-- 连接一次</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在事务中进行数据插入：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>start transaction;</span></span>
<span class="line"><span>INSERT INTO tb_test VALUES(1,&#39;Tom&#39;);</span></span>
<span class="line"><span>INSERT INTO tb_test VALUES(2,&#39;Cat&#39;);</span></span>
<span class="line"><span>INSERT INTO tb_test VALUES(3,&#39;Jerry&#39;);</span></span>
<span class="line"><span>commit;	-- 手动提交，分段提交</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数据有序插入：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>INSERT INTO tb_test VALUES(1,&#39;Tom&#39;);</span></span>
<span class="line"><span>INSERT INTO tb_test VALUES(2,&#39;Cat&#39;);</span></span>
<span class="line"><span>INSERT INTO tb_test VALUES(3,&#39;Jerry&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>增加 cache 层：在应用中增加缓存层来达到减轻数据库负担的目的。可以部分数据从数据库中抽取出来放到应用端以文本方式存储，或者使用框架（Mybatis）提供的一级缓存 / 二级缓存，或者使用 Redis 数据库来缓存数据</p><hr><h4 id="数据插入" tabindex="-1"><a class="header-anchor" href="#数据插入"><span>数据插入</span></a></h4><p>当使用 load 命令导入数据的时候，适当的设置可以提高导入的效率：<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL load data.png" alt="" loading="lazy"></p><p>可以执行如下指令，将数据脚本文件中的数据加载到表结构中：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 客户端连接服务端时，加上参数  -–local-infile</span></span>
<span class="line"><span> mysql –-local-infile  -u  root  -p</span></span>
<span class="line"><span> </span></span>
<span class="line"><span> -- 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span></span>
<span class="line"><span>set  global  local_infile = 1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 执行load指令将准备好的数据，加载到表结构中</span></span>
<span class="line"><span>load  data  local  infile  &#39;/root/sql1.log&#39;  into  table  tb_user  fields  </span></span>
<span class="line"><span>terminated  by  &#39;,&#39;  lines  terminated  by  &#39;\\n&#39; ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率：</p><ol><li><p><strong>主键顺序插入</strong>：因为 InnoDB 类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率，如果 InnoDB 表没有主键，那么系统会自动默认创建一个内部列作为主键</p><p>主键是否连续对性能影响不大，只要是递增的就可以，比如雪花算法产生的 ID 不是连续的，但是是递增的，因为递增可以让主键索引尽量地保持顺序插入，<strong>避免了页分裂</strong>，因此索引更紧凑</p><ol><li><ul><li>插入 ID 顺序排列数据：</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL插入ID顺序排列数据.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>插入 ID 无序排列数据：</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL插入ID无序排列数据.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol></li><li><p><strong>关闭唯一性校验</strong>：在导入数据前执行 <code>SET UNIQUE_CHECKS=0</code>，关闭唯一性校验；导入结束后执行 <code>SET UNIQUE_ S=1</code>，恢复唯一性校验，可以提高导入的效率。<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL插入数据关闭唯一性校验.png" alt="" loading="lazy"></p></li><li><p><strong>手动提交事务</strong>：如果应用使用自动提交的方式，建议在导入前执行<code>SET AUTOCOMMIT=0</code>，关闭自动提交；导入结束后再打开自动提交，可以提高导入的效率。</p><p>事务需要控制大小，事务太大可能会影响执行的效率。MySQL 有 innodb_log_buffer_size 配置项，超过这个值的日志会写入磁盘数据，效率会下降，所以在事务大小达到配置项数据级前进行事务提交可以提高效率</p></li></ol><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL插入数据手动提交事务.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="分组排序" tabindex="-1"><a class="header-anchor" href="#分组排序"><span>分组排序</span></a></h4><h5 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by"><span>ORDER BY</span></a></h5><p>数据准备：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE \`emp\` (</span></span>
<span class="line"><span>  \`id\` INT(11) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span>  \`name\` VARCHAR(100) NOT NULL,</span></span>
<span class="line"><span>  \`age\` INT(3) NOT NULL,</span></span>
<span class="line"><span>  \`salary\` INT(11) DEFAULT NULL,</span></span>
<span class="line"><span>  PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span>) ENGINE=INNODB DEFAULT CHARSET=utf8mb4;</span></span>
<span class="line"><span>INSERT INTO \`emp\` (\`id\`, \`name\`, \`age\`, \`salary\`) VALUES(&#39;1&#39;,&#39;Tom&#39;,&#39;25&#39;,&#39;2300&#39;);-- ...</span></span>
<span class="line"><span>CREATE INDEX idx_emp_age_salary ON emp(age, salary);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>第一种是通过对返回数据进行排序，所有不通过索引直接返回结果的排序都叫 FileSort 排序，会在内存中重新排序</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM emp ORDER BY age DESC;	-- 年龄降序</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL ORDER BY排序1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>第二种通过有序索引顺序扫描直接返回<strong>有序数据</strong>，这种情况为 Using index，不需要额外排序，操作效率高</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT id, age, salary FROM emp ORDER BY age DESC;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL ORDER BY排序2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>多字段排序：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT id,age,salary FROM emp ORDER BY age DESC, salary DESC;</span></span>
<span class="line"><span>EXPLAIN SELECT id,age,salary FROM emp ORDER BY salary DESC, age DESC;</span></span>
<span class="line"><span>EXPLAIN SELECT id,age,salary FROM emp ORDER BY age DESC, salary ASC;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL ORDER BY排序3.png" alt="" loading="lazy">尽量减少额外的排序，通过索引直接返回有序数据。<strong>需要满足 Order by 使用相同的索引、Order By 的顺序和索引顺序相同、Order by 的字段都是升序或都是降序</strong>，否则需要额外的操作，就会出现 FileSort</p><p>解决办法：创建联合索引并指定排序方式</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>create index idx_user_age_phone_ad on tb_user(age asc ,phone desc);</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>- ORDER BY RAND() 命令用来进行随机排序，会使用了临时内存表，临时内存表排序的时使用 rowid 排序方法</span></span>
<span class="line"><span></span></span>
<span class="line"><span>优化方式：创建合适的索引能够减少 Filesort 的出现，但是某些情况下条件限制不能让 Filesort 消失，就要加快 Filesort 的排序操作</span></span>
<span class="line"><span></span></span>
<span class="line"><span>内存临时表，MySQL 有两种 Filesort 排序算法：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- rowid 排序：首先根据条件取出排序字段和信息，然后在**排序区 sort buffer（Server 层）**中排序，如果 sort buffer 不够，则在临时表 temporary table 中存储排序结果。完成排序后再根据行指针**回表读取记录**，该操作可能会导致大量随机 I/O 操作</span></span>
<span class="line"><span></span></span>
<span class="line"><span>说明：对于临时内存表，回表过程只是简单地根据数据行的位置，直接访问内存得到数据，不会导致多访问磁盘，优先选择该方式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 全字段排序：一次性取出满足条件的所有数据，需要回表，然后在排序区 sort  buffer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法高</span></span>
<span class="line"><span></span></span>
<span class="line"><span>具体的选择方式：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- MySQL 通过比较系统变量 max_length_for_sort_data 的大小和 Query 语句取出的字段的大小，来判定使用哪种排序算法。如果前者大，则说明 sort  buffer 空间足够，使用第二种优化之后的算法，否则使用第一种。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 可以适当提高 sort_buffer_size  和 max_length_for_sort_data 系统变量，来增大排序区的大小，提高排序的效率</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`mysql</span></span>
<span class="line"><span>SET @@max_length_for_sort_data = 10000; 		-- 设置全局变量</span></span>
<span class="line"><span>SET max_length_for_sort_data = 10240; 			-- 设置会话变量</span></span>
<span class="line"><span>SHOW VARIABLES LIKE &#39;max_length_for_sort_data&#39;;	-- 默认1024</span></span>
<span class="line"><span>SHOW VARIABLES LIKE &#39;sort_buffer_size&#39;;			-- 默认262114即256k</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>磁盘临时表：排序使用优先队列（堆）的方式</p><hr><h5 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by"><span>GROUP BY</span></a></h5><p>GROUP BY 也会进行排序操作，与 ORDER BY 相比，GROUP BY 主要只是多了排序之后的分组操作，所以在 GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引</p><ul><li><p>分组查询：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DROP INDEX idx_emp_age_salary ON emp;</span></span>
<span class="line"><span>EXPLAIN SELECT age,COUNT(*) FROM emp GROUP BY age;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL GROUP BY排序1.png" alt="" loading="lazy">Using temporary：表示 MySQL 需要使用临时表（不是 sort buffer）来存储结果集，常见于排序和分组查询</p></li><li><p>查询包含 GROUP BY 但是用户想要避免排序结果的消耗， 则可以执行 ORDER BY NULL 禁止排序：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT age,COUNT(*) FROM emp GROUP BY age ORDER BY NULL;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL GROUP BY排序2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>创建索引：索引本身有序，不需要临时表，也不需要再额外排序</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE INDEX idx_emp_age_salary ON emp(age, salary);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL GROUP BY排序3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>数据量很大时，使用 SQL_BIG_RESULT 提示优化器直接使用直接用磁盘临时表</p></li></ul><hr><h4 id="联合查询-1" tabindex="-1"><a class="header-anchor" href="#联合查询-1"><span>联合查询</span></a></h4><p>对于包含 OR 的查询子句，如果要利用索引，则 OR 之间的<strong>每个条件列都必须用到索引，而且不能使用到条件之间的复合索引</strong>，如果没有索引，则应该考虑增加索引</p><ul><li><p>执行查询语句：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM emp WHERE id = 1 OR age = 30;	-- 两个索引，并且不是复合索引</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Extra:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Using</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> sort_union</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">idx_emp_age_salary,PRIMARY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Using</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> where</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL OR条件查询1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>使用 UNION 替换 OR，求并集：</p><p>注意：该优化只针对多个索引列有效，如果有列没有被索引，查询效率可能会因为没有选择 OR 而降低</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM emp WHERE id = 1 UNION SELECT * FROM emp WHERE age = 30;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL OR条件查询2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>UNION 要优于 OR 的原因：</p><ul><li>UNION 语句的 type 值为 ref，OR 语句的 type 值为 range</li><li>UNION 语句的 ref 值为 const，OR 语句的 ref 值为 null，const 表示是常量值引用，非常快</li></ul></li></ul><hr><h4 id="嵌套查询-1" tabindex="-1"><a class="header-anchor" href="#嵌套查询-1"><span>嵌套查询</span></a></h4><p>MySQL 4.1 版本之后，开始支持 SQL 的子查询</p><ul><li>可以使用 SELECT 语句来创建一个单列的查询结果，然后把结果作为过滤条件用在另一个查询中</li><li>使用子查询可以一次性的完成逻辑上需要多个步骤才能完成的 SQL 操作，同时也可以避免事务或者表锁死</li><li>在有些情况下，<strong>子查询是可以被更高效的连接（JOIN）替代</strong></li></ul><p>例如查找有角色的所有的用户信息：</p><ul><li><p>执行计划：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM t_user WHERE id IN (SELECT user_id FROM user_role);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL嵌套查询1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>优化后：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM t_user u , user_role ur WHERE u.id = ur.user_id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL嵌套查询2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>连接查询之所以效率更高 ，是因为<strong>不需要在内存中创建临时表</strong>来完成逻辑上需要两个步骤的查询工作</p></li></ul><hr><h4 id="分页查询-1" tabindex="-1"><a class="header-anchor" href="#分页查询-1"><span>分页查询</span></a></h4><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能</p><p>一个常见的问题是 <code>LIMIT 200000,10</code>，此时需要 MySQL 扫描前 200010 记录，仅仅返回 200000 - 200010 之间的记录，其他记录丢弃，查询排序的代价非常大</p><ul><li><p>分页查询：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_user_1 LIMIT 200000,10;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL分页查询1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>优化方式一：内连接查询，在索引列 id 上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_user_1 t,(SELECT id FROM tb_user_1 ORDER BY id LIMIT 200000,10) a WHERE t.id = a.id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL分页查询2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>优化方式二：方案适用于主键自增的表，可以把 LIMIT 查询转换成某个位置的查询</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_user_1 WHERE id &gt; 200000 LIMIT 10;			-- 写法 1</span></span>
<span class="line"><span>EXPLAIN SELECT * FROM tb_user_1 WHERE id BETWEEN 200000 and 200010;	-- 写法 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL分页查询3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><hr><h4 id="使用提示" tabindex="-1"><a class="header-anchor" href="#使用提示"><span>使用提示</span></a></h4><p>SQL 提示，是优化数据库的一个重要手段，就是在 SQL 语句中加入一些提示来达到优化操作的目的</p><ul><li><p>USE INDEX：在查询语句中表名的后面添加 USE INDEX 来提供 MySQL 去参考的索引列表，可以让 MySQL 不再考虑其他可用的索引</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE INDEX idx_seller_name ON tb_seller(name);</span></span>
<span class="line"><span>EXPLAIN SELECT * FROM tb_seller USE INDEX(idx_seller_name) WHERE name=&#39;小米科技&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用提示1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>IGNORE INDEX：让 MySQL 忽略一个或者多个索引，则可以使用 IGNORE INDEX 作为提示</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller IGNORE INDEX(idx_seller_name) WHERE name = &#39;小米科技&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用提示2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>FORCE INDEX：强制 MySQL 使用一个特定的索引</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM tb_seller FORCE INDEX(idx_seller_name_sta_addr) WHERE NAME=&#39;小米科技&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-优化SQL使用提示3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><hr><h4 id="统计计数" tabindex="-1"><a class="header-anchor" href="#统计计数"><span>统计计数</span></a></h4><p>在不同的 MySQL 引擎中，count(*) 有不同的实现方式：</p><ul><li>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高，但不支持事务</li><li>show table status 命令通过采样估算可以快速获取，但是不准确</li><li>InnoDB 表执行 count(*) 会遍历全表，虽然结果准确，但会导致性能问题</li></ul><p>解决方案：</p><ul><li><p>计数保存在 Redis 中，但是更新 MySQL 和 Redis 的操作不是原子的，会存在数据一致性的问题</p></li><li><p>计数直接放到数据库里单独的一张计数表中，利用事务解决计数精确问题：</p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-计数count优化.png" style="zoom:50%;"><p>会话 B 的读操作在 T3 执行的，这时更新事务还没有提交，所以计数值加 1 这个操作对会话 B 还不可见，因此会话 B 查询的计数值和最近 100 条记录，返回的结果逻辑上就是一致的</p><p>并发系统性能的角度考虑，应该先插入操作记录再更新计数表，因为更新计数表涉及到行锁的竞争，<strong>先插入再更新能最大程度地减少事务之间的锁等待，提升并发度</strong></p></li></ul><p>count 函数的按照效率排序：<code>count(字段) &lt; count(主键id) &lt; count(1) ≈ count(*)</code>，所以建议尽量使用 count(*)</p><ul><li>count(主键 id)：InnoDB 引擎会遍历整张表，把每一行的 id 值都取出来返回给 Server 层，Server 判断 id 不为空就按行累加</li><li>count(1)：InnoDB 引擎遍历整张表但不取值，Server 层对于返回的每一行，放一个数字 1 进去，判断不为空就按行累加</li><li>count(字段)：如果这个字段是定义为 not null 的话，一行行地从记录里面读出这个字段，判断不能为 null，按行累加；如果这个字段定义允许为 null，那么执行的时候，判断到有可能是 null，还要把值取出来再判断一下，不是 null 才累加</li><li>count(*)：不取值，按行累加</li></ul><p>参考文章：https://time.geekbang.org/column/article/72775</p><h4 id="update-1" tabindex="-1"><a class="header-anchor" href="#update-1"><span>update</span></a></h4><p>我们主要需要注意一下update语句执行时的注意事项。</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>update  course  set  name = &#39;javaEE&#39;  where  id  =  1 ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当我们在执行删除的SQL语句时，会锁定id为1这一行的数据，然后事务提交之后，行锁释放。 但是当我们在执行如下SQL时。 当我们开启多个事务，在执行上述的SQL时，我们发现行锁升级为了表锁。 导致该update语句的性能 大大降低。</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>update course set name = &#39;SpringBoot&#39; where name = &#39;PHP&#39; ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁 ,并且该索引不能失效，否则会从行锁 升级为表锁 。</p><p><strong>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁 ,并且该索引不能失效，否则会从行锁</strong><strong>升级为表锁 。</strong></p><hr><h3 id="缓冲优化" tabindex="-1"><a class="header-anchor" href="#缓冲优化"><span>缓冲优化</span></a></h3><h4 id="优化原则" tabindex="-1"><a class="header-anchor" href="#优化原则"><span>优化原则</span></a></h4><p>三个原则：</p><ul><li>将尽量多的内存分配给 MySQL 做缓存，但也要给操作系统和其他程序预留足够内存</li><li>MyISAM 存储引擎的数据文件读取依赖于操作系统自身的 IO 缓存，如果有 MyISAM 表，就要预留更多的内存给操作系统做 IO 缓存</li><li>排序区、连接区等缓存是分配给每个数据库会话（Session）专用的，值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发数较高时会导致物理内存耗尽</li></ul><hr><h4 id="缓冲内存" tabindex="-1"><a class="header-anchor" href="#缓冲内存"><span>缓冲内存</span></a></h4><p>Buffer Pool 本质上是 InnoDB 向操作系统申请的一段连续的内存空间。InnoDB 的数据是按数据页为单位来读写，每个数据页的大小默认是 16KB。数据是存放在磁盘中，每次读写数据都需要进行磁盘 IO 将数据读入内存进行操作，效率会很低，所以提供了 Buffer Pool 来暂存这些数据页，缓存中的这些页又叫缓冲页</p><p>工作原理：</p><ul><li>从数据库读取数据时，会首先从缓存中读取，如果缓存中没有，则从磁盘读取后放入 Buffer Pool</li><li>向数据库写入数据时，会写入缓存，缓存中修改的数据会<strong>定期刷新</strong>到磁盘，这一过程称为刷脏</li></ul><p>Buffer Pool 中每个缓冲页都有对应的控制信息，包括表空间编号、页号、偏移量、链表信息等，控制信息存放在占用的内存称为控制块，控制块与缓冲页是一一对应的，但并不是物理上相连的，都在缓冲池中</p><p>MySQL 提供了缓冲页的快速查找方式：<strong>哈希表</strong>，使用表空间号和页号作为 Key，缓冲页控制块的地址作为 Value 创建一个哈希表，获取数据页时根据 Key 进行哈希寻址：</p><ul><li>如果不存在对应的缓存页，就从 free 链表中选一个空闲缓冲页，把磁盘中的对应页加载到该位置</li><li>如果存在对应的缓存页，直接获取使用，提高查询数据的效率</li></ul><p>当内存数据页跟磁盘数据页内容不一致时，称这个内存页为脏页；内存数据写入磁盘后，内存和磁盘上的数据页一致，称为干净页</p><hr><h4 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理"><span>内存管理</span></a></h4><h5 id="free-链表" tabindex="-1"><a class="header-anchor" href="#free-链表"><span>Free 链表</span></a></h5><p>MySQL 启动时完成对 Buffer Pool 的初始化，先向操作系统申请连续的内存空间，然后将内存划分为若干对控制块和缓冲页。为了区分空闲和已占用的数据页，将所有空闲缓冲页对应的<strong>控制块作为一个节点</strong>放入一个链表中，就是 Free 链表（<strong>空闲链表</strong>）</p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-空闲链表.png" style="zoom:50%;"><p>基节点：是一块单独申请的内存空间（占 40 字节），并不在 Buffer Pool 的那一大片连续内存空间里</p><p>磁盘加载页的流程：</p><ul><li>从 Free 链表中取出一个空闲的缓冲页</li><li>把缓冲页对应的控制块的信息填上（页所在的表空间、页号之类的信息）</li><li>把缓冲页对应的 Free 链表节点（控制块）从链表中移除，表示该缓冲页已经被使用</li></ul><p>参考文章：https://blog.csdn.net/li1325169021/article/details/121124440</p><hr><h5 id="flush-链表" tabindex="-1"><a class="header-anchor" href="#flush-链表"><span>Flush 链表</span></a></h5><p>Flush 链表是一个用来<strong>存储脏页</strong>的链表，对于已经修改过的缓冲脏页，第一次修改后加入到<strong>链表头部</strong>，以后每次修改都不会重新加入，只修改部分控制信息，出于性能考虑并不是直接更新到磁盘，而是在未来的某个时间进行刷脏</p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-脏页链表.png" style="zoom:50%;"><p><strong>后台有专门的线程每隔一段时间把脏页刷新到磁盘</strong>：</p><ul><li>从 Flush 链表中刷新一部分页面到磁盘： <ul><li><strong>后台线程定时</strong>从 Flush 链表刷脏，根据系统的繁忙程度来决定刷新速率，这种方式称为 BUF_FLUSH_LIST</li><li>线程刷脏的比较慢，导致用户线程加载一个新的数据页时发现没有空闲缓冲页，此时会尝试从 LRU 链表尾部寻找缓冲页直接释放，如果该页面是已经修改过的脏页就<strong>同步刷新</strong>到磁盘，速度较慢，这种方式称为 BUF_FLUSH_SINGLE_PAGE</li></ul></li><li>从 LRU 链表的冷数据中刷新一部分页面到磁盘，即：BUF_FLUSH_LRU <ul><li>后台线程会定时从 LRU 链表的尾部开始扫描一些页面，扫描的页面数量可以通过系统变量 <code>innodb_lru_scan_depth</code> 指定，如果在 LRU 链表中发现脏页，则把它们刷新到磁盘，这种方式称为 BUF_FLUSH_LRU</li><li>控制块里会存储该缓冲页是否被修改的信息，所以可以很容易的获取到某个缓冲页是否是脏页</li></ul></li></ul><p>参考文章：https://blog.csdn.net/li1325169021/article/details/121125765</p><hr><h5 id="lru-链表" tabindex="-1"><a class="header-anchor" href="#lru-链表"><span>LRU 链表</span></a></h5><p>Buffer Pool 需要保证缓存的命中率，所以 MySQL 创建了一个 LRU 链表，当访问某个页时：</p><ul><li>如果该页不在 Buffer Pool 中，把该页从磁盘加载进来后会将该缓冲页对应的控制块作为节点放入 <strong>LRU 链表的头部</strong>，保证热点数据在链表头</li><li>如果该页在 Buffer Pool 中，则直接把该页对应的控制块移动到 LRU 链表的头部，所以 LRU 链表尾部就是最近最少使用的缓冲页</li></ul><p>MySQL 基于局部性原理提供了预读功能：</p><ul><li>线性预读：系统变量 <code>innodb_read_ahead_threshold</code>，如果顺序访问某个区（extent：16 KB 的页，连续 64 个形成一个区，一个区默认 1MB 大小）的页面数超过了该系统变量值，就会触发一次<strong>异步读取</strong>下一个区中全部的页面到 Buffer Pool 中</li><li>随机预读：如果某个区 13 个连续的页面都被加载到 Buffer Pool，无论这些页面是否是顺序读取，都会触发一次<strong>异步读取</strong>本区所有的其他页面到 Buffer Pool 中</li></ul><p>预读会造成加载太多用不到的数据页，造成那些使用频率很高的数据页被挤到 LRU 链表尾部，所以 InnoDB 将 LRU 链表分成两段，<strong>冷热数据隔离</strong>：</p><ul><li>一部分存储使用频率很高的数据页，这部分链表也叫热数据，young 区，靠近链表头部的区域</li><li>一部分存储使用频率不高的冷数据，old 区，靠近链表尾部，默认占 37%，可以通过系统变量 <code>innodb_old_blocks_pct</code> 指定</li></ul><p>当磁盘上的某数据页被初次加载到 Buffer Pool 中会被放入 old 区，淘汰时优先淘汰 old 区</p><ul><li>当对 old 区的数据进行访问时，会在控制块记录下访问时间，等待后续的访问时间与第一次访问的时间是否在某个时间间隔内，通过系统变量 <code>innodb_old_blocks_time</code> 指定时间间隔，默认 1000ms，成立就<strong>移动到 young 区的链表头部</strong></li><li><code>innodb_old_blocks_time</code> 为 0 时，每次访问一个页面都会放入 young 区的头部</li></ul><hr><h4 id="参数优化" tabindex="-1"><a class="header-anchor" href="#参数优化"><span>参数优化</span></a></h4><p>InnoDB 用一块内存区做 IO 缓存池，该缓存池不仅用来缓存 InnoDB 的索引块，也用来缓存 InnoDB 的数据块，可以通过下面的指令查看 Buffer Pool 的状态信息：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW ENGINE INNODB STATUS\\G</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Buffer pool hit rate</code> 字段代表<strong>内存命中率</strong>，表示 Buffer Pool 对查询的加速效果</p><p>核心参数：</p><ul><li><p><code>innodb_buffer_pool_size</code>：该变量决定了 Innodb 存储引擎表数据和索引数据的最大缓存区大小，默认 128M</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW VARIABLES LIKE &#39;innodb_buffer_pool_size&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在保证操作系统及其他程序有足够内存可用的情况下，<code>innodb_buffer_pool_size</code> 的值越大，缓存命中率越高，建议设置成可用物理内存的 60%~80%</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">innodb_buffer_pool_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">512M</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><code>innodb_log_buffer_size</code>：该值决定了 Innodb 日志缓冲区的大小，保存要写入磁盘上的日志文件数据</p><p>对于可能产生大量更新记录的大事务，增加该值的大小，可以避免 Innodb 在事务提交前就执行不必要的日志写入磁盘操作，影响执行效率，通过配置文件修改：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">innodb_log_buffer_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">10M</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>在多线程下，访问 Buffer Pool 中的各种链表都需要加锁，所以将 Buffer Pool 拆成若干个小实例，<strong>每个线程对应一个实例</strong>，独立管理内存空间和各种链表（类似 ThreadLocal），多线程访问各自实例互不影响，提高了并发能力</p><p>MySQL 5.7.5 之前 <code>innodb_buffer_pool_size</code> 只支持在系统启动时修改，现在已经支持运行时修改 Buffer Pool 的大小，但是每次调整参数都会重新向操作系统申请一块连续的内存空间，<strong>将旧的缓冲池的内容拷贝到新空间</strong>非常耗时，所以 MySQL 开始以一个 chunk 为单位向操作系统申请内存，所以一个 Buffer Pool 实例可以由多个 chunk 组成</p><ul><li>在系统启动时设置系统变量 <code>innodb_buffer_pool_instance</code> 可以指定 Buffer Pool 实例的个数，但是当 Buffer Pool 小于 1GB 时，设置多个实例时无效的</li><li>指定系统变量 <code>innodb_buffer_pool_chunk_size</code> 来改变 chunk 的大小，只能在启动时修改，运行中不能修改，而且该变量并不包含缓冲页的控制块的内存大小</li><li><code>innodb_buffer_pool_size</code> 必须是 <code>innodb_buffer_pool_chunk_size × innodb_buffer_pool_instance</code> 的倍数，默认值是 <code>128M × 16 = 2G</code>，Buffer Pool 必须是 2G 的整数倍，如果指定 5G，会自动调整成 6G</li><li>如果启动时 <code>chunk × instances</code> &gt; <code>pool_size</code>，那么 chunk 的值会自动设置为 <code>pool_size ÷ instances</code></li></ul><hr><h3 id="内存优化" tabindex="-1"><a class="header-anchor" href="#内存优化"><span>内存优化</span></a></h3><h4 id="change" tabindex="-1"><a class="header-anchor" href="#change"><span>Change</span></a></h4><p>InnoDB 管理的 Buffer Pool 中有一块内存叫 Change Buffer 用来对<strong>增删改操作</strong>提供缓存，可以通过参数来动态设置，设置为 50 时表示 Change Buffer 的大小最多占用 Buffer Pool 的 50%</p><ul><li>唯一索引的更新不能使用 Change Buffer，需要将数据页读入内存，判断没有冲突在写入</li><li>普通索引可以使用 Change Buffer，<strong>直接写入 Buffer 就结束</strong>，不用校验唯一性</li></ul><p>Change Buffer 并不是数据页，只是对操作的缓存，所以需要将 Change Buffer 中的操作应用到旧数据页，得到新的数据页（脏页）的过程称为 Merge</p><ul><li>触发时机：访问数据页时会触发 Merge、后台有定时线程进行 Merge、在数据库正常关闭（shutdown）的过程中也会触发</li><li>工作流程：首先从磁盘读入数据页到内存（因为 Buffer Pool 中不一定存在对应的数据页），从 Change Buffer 中找到对应的操作应用到数据页，得到新的数据页即为脏页，然后写入 redo log，等待刷脏即可</li></ul><p>说明：Change Buffer 中的记录，在事务提交时也会写入 redo log，所以是可以保证不丢失的</p><p>业务场景：</p><ul><li>对于<strong>写多读少</strong>的业务来说，页面在写完以后马上被访问到的概率比较小，此时 Change Buffer 的使用效果最好，常见的就是账单类、日志类的系统</li><li>一个业务的更新模式是写入后马上做查询，那么即使满足了条件，将更新先记录在 Change Buffer，但之后由于马上要访问这个数据页，会立即触发 Merge 过程，这样随机访问 IO 的次数不会减少，并且增加了 Change Buffer 的维护代价</li></ul><p>补充：Change Buffer 的前身是 Insert Buffer，只能对 Insert 操作优化，后来增加了 Update/Delete 的支持，改为 Change Buffer</p><hr><h4 id="net" tabindex="-1"><a class="header-anchor" href="#net"><span>Net</span></a></h4><p>Server 层针对优化<strong>查询</strong>的内存为 Net Buffer，内存的大小是由参数 <code>net_buffer_length</code>定义，默认 16k，实现流程：</p><ul><li>获取一行数据写入 Net Buffer，重复获取直到 Net Buffer 写满，调用网络接口发出去</li><li>若发送成功就清空 Net Buffer，然后继续取下一行；若发送函数返回 EAGAIN 或 WSAEWOULDBLOCK，表示本地网络栈 <code>socket send buffer</code> 写满了，<strong>进入等待</strong>，直到网络栈重新可写再继续发送</li></ul><p>MySQL 采用的是边读边发的逻辑，因此对于数据量很大的查询来说，不会在 Server 端保存完整的结果集，如果客户端读结果不及时，会堵住 MySQL 的查询过程，但是<strong>不会把内存打爆导致 OOM</strong></p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-查询内存优化.png" style="zoom:50%;"><p>SHOW PROCESSLIST 获取线程信息后，处于 Sending to client 状态代表服务器端的网络栈写满，等待客户端接收数据</p><p>假设有一个业务的逻辑比较复杂，每读一行数据以后要处理很久的逻辑，就会导致客户端要过很久才会去取下一行数据，导致 MySQL 的阻塞，一直处于 Sending to client 的状态</p><p>解决方法：如果一个查询的返回结果很是很多，建议使用 mysql_store_result 这个接口，直接把查询结果保存到本地内存</p><p>参考文章：https://blog.csdn.net/qq_33589510/article/details/117673449</p><hr><h4 id="read" tabindex="-1"><a class="header-anchor" href="#read"><span>Read</span></a></h4><p>read_rnd_buffer 是 MySQL 的随机读缓冲区，当按任意顺序读取记录行时将分配一个随机读取缓冲区，进行排序查询时，MySQL 会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，大小是由 read_rnd_buffer_size 参数控制的</p><p>Multi-Range Read 优化，<strong>将随机 IO 转化为顺序 IO</strong> 以降低查询过程中 IO 开销，因为大多数的数据都是按照主键递增顺序插入得到，所以按照主键的递增顺序查询的话，对磁盘的读比较接近顺序读，能够提升读性能</p><p>二级索引为 a，聚簇索引为 id，优化回表流程：</p><ul><li>根据索引 a，定位到满足条件的记录，将 id 值放入 read_rnd_buffer 中</li><li>将 read_rnd_buffer 中的 id 进行<strong>递增排序</strong></li><li>排序后的 id 数组，依次回表到主键 id 索引中查记录，并作为结果返回</li></ul><p>说明：如果步骤 1 中 read_rnd_buffer 放满了，就会先执行步骤 2 和 3，然后清空 read_rnd_buffer，之后继续找索引 a 的下个记录</p><p>使用 MRR 优化需要设进行设置：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET optimizer_switch=&#39;mrr_cost_based=off&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="key-1" tabindex="-1"><a class="header-anchor" href="#key-1"><span>Key</span></a></h4><p>MyISAM 存储引擎使用 key_buffer 缓存索引块，加速 MyISAM 索引的读写速度。对于 MyISAM 表的数据块没有特别的缓存机制，完全依赖于操作系统的 IO 缓存</p><ul><li><p>key_buffer_size：该变量决定 MyISAM 索引块缓存区的大小，直接影响到 MyISAM 表的存取效率</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW VARIABLES LIKE &#39;key_buffer_size&#39;;	-- 单位是字节</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 MySQL 配置文件中设置该值，建议至少将1/4可用内存分配给 key_buffer_size：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/mysql/my.cnf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">key_buffer_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">1024M</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>read_buffer_size：如果需要经常顺序扫描 MyISAM 表，可以通过增大 read_buffer_size 的值来改善性能。但 read_buffer_size 是每个 Session 独占的，如果默认值设置太大，并发环境就会造成内存浪费</p></li><li><p>read_rnd_buffer_size：对于需要做排序的 MyISAM 表的查询，如带有 ORDER BY 子句的语句，适当增加该的值，可以改善此类的 SQL 的性能，但是 read_rnd_buffer_size 是每个 Session 独占的，如果默认值设置太大，就会造成内存浪费</p></li></ul><hr><h3 id="存储优化" tabindex="-1"><a class="header-anchor" href="#存储优化"><span>存储优化</span></a></h3><h4 id="数据存储" tabindex="-1"><a class="header-anchor" href="#数据存储"><span>数据存储</span></a></h4><p>系统表空间是用来放系统信息的，比如数据字典什么的，对应的磁盘文件是 ibdata，数据表空间是一个个的表数据文件，对应的磁盘文件就是表名.ibd</p><p>表数据既可以存在共享表空间里，也可以是单独的文件，这个行为是由参数 innodb_file_per_table 控制的：</p><ul><li>OFF：表示表的数据放在系统共享表空间，也就是跟数据字典放在一起</li><li>ON ：表示每个 InnoDB 表数据存储在一个以 .ibd 为后缀的文件中（默认）</li></ul><p>一个表单独存储为一个文件更容易管理，在不需要这个表时通过 drop table 命令，系统就会直接删除这个文件；如果是放在共享表空间中，即使表删掉了，空间也是不会回收的</p><hr><h4 id="数据删除" tabindex="-1"><a class="header-anchor" href="#数据删除"><span>数据删除</span></a></h4><p>MySQL 的数据删除就是移除掉某个记录后，该位置就被标记为<strong>可复用</strong>，如果有符合范围条件的数据可以插入到这里。符合范围条件的意思是假设删除记录 R4，之后要再插入一个 ID 在 300 和 600 之间的记录时，就会复用这个位置</p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-删除数据.png" style="zoom:50%;"><p>InnoDB 的数据是按页存储的如果删掉了一个数据页上的所有记录，整个数据页就可以被复用了，如果相邻的两个数据页利用率都很小，系统就会把这两个页上的数据合到其中一个页上，另外一个数据页就被标记为可复用</p><p>删除命令其实只是把记录的位置，或者<strong>数据页标记为了可复用，但磁盘文件的大小是不会变的</strong>，这些可以复用还没有被使用的空间，看起来就像是空洞，造成数据库的稀疏，因此需要进行紧凑处理</p><hr><h4 id="重建数据" tabindex="-1"><a class="header-anchor" href="#重建数据"><span>重建数据</span></a></h4><p>重建表就是按照主键 ID 递增的顺序，把数据一行一行地从旧表中读出来再插入到新表中，让数据更加紧凑。重建表时 MySQL 会自动完成转存数据、交换表名、删除旧表的操作，线上操作会阻塞大量的线程增删改查的操作</p><p>重建命令：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> A ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">InnoDB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>工作流程：新建临时表 tmp_table B（在 Server 层创建的），把表 A 中的数据导入到表 B 中，操作完成后用表 B 替换表 A，完成重建</p><p>重建表的步骤需要 DDL 不是 Online 的，因为在导入数据的过程有新的数据要写入到表 A 的话，就会造成数据丢失</p><p>MySQL 5.6 版本开始引入的 <strong>Online DDL</strong>，重建表的命令默认执行此步骤：</p><ul><li>建立一个临时文件 tmp_file（InnoDB 创建），扫描表 A 主键的所有数据页</li><li>用数据页中表 A 的记录生成 B+ 树，存储到临时文件中</li><li>生成临时文件的过程中，将所有对 A 的操作记录在一个日志文件（row log）中，对应的是图中 state2 的状态</li><li>临时文件生成后，将日志文件中的操作应用到临时文件，得到一个逻辑数据上与表 A 相同的数据文件，对应的就是图中 state3</li><li>用临时文件替换表 A 的数据文件</li></ul><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-重建表.png" style="zoom:67%;"><p>Online DDL 操作会先获取 MDL 写锁，再退化成 MDL 读锁。但 MDL 写锁持有时间比较短，所以可以称为 Online； 而 MDL 读锁，不阻止数据增删查改，但会阻止其它线程修改表结构（可以对比 <code>ANALYZE TABLE t</code> 命令）</p><p>问题：重建表可以收缩表空间，但是执行指令后整体占用空间增大</p><p>原因：在重建表后 InnoDB 不会把整张表占满，每个页留了 1/16 给后续的更新使用。表在未整理之前页已经占用 15/16 以上，收缩之后需要保持数据占用空间在 15/16，所以文件占用空间更大才能保持</p><p>注意：临时文件也要占用空间，如果空间不足会重建失败</p><hr><h4 id="原地置换" tabindex="-1"><a class="header-anchor" href="#原地置换"><span>原地置换</span></a></h4><p>DDL 中的临时表 tmp_table 是在 Server 层创建的，Online DDL 中的临时文件 tmp_file 是 InnoDB 在内部创建出来的，整个 DDL 过程都在 InnoDB 内部完成，对于 Server 层来说，没有把数据挪动到临时表，是一个原地操作，这就是 inplace</p><p>两者的关系：</p><ul><li>DDL 过程如果是 Online 的，就一定是 inplace 的</li><li>inplace 的 DDL，有可能不是 Online 的，截止到 MySQL 8.0，全文索引（FULLTEXT）和空间索引（SPATIAL）属于这种情况</li></ul><hr><h3 id="并发优化" tabindex="-1"><a class="header-anchor" href="#并发优化"><span>并发优化</span></a></h3><p>MySQL Server 是多线程结构，包括后台线程和客户服务线程。多线程可以有效利用服务器资源，提高数据库的并发性能。在 MySQL 中，控制并发连接和线程的主要参数：</p><ul><li><p>max_connections：控制允许连接到 MySQL 数据库的最大连接数，默认值是 151</p><p>如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这时可以考虑增大 max_connections 的值</p><p>MySQL 最大可支持的连接数取决于很多因素，包括操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度、期望的响应时间等。在 Linux 平台下，性能好的服务器，可以支持 500-1000 个连接，需要根据服务器性能进行评估设定</p></li><li><p>innodb_thread_concurrency：并发线程数，代表系统内同时运行的线程数量（已经被移除）</p></li><li><p>back_log：控制 MySQL 监听 TCP 端口时的积压请求栈的大小</p><p>如果 Mysql 的连接数达到 max_connections 时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即 back_log。如果等待连接的数量超过 back_log，将不被授予连接资源直接报错</p><p>5.6.6 版本之前默认值为 50，之后的版本默认为 <code>50 + (max_connections/5)</code>，但最大不超过900，如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大 back_log 的值</p></li><li><p>table_open_cache：控制所有 SQL 语句执行线程可打开表缓存的数量</p><p>在执行 SQL 语句时，每个执行线程至少要打开1个表缓存，该参数的值应该根据设置的最大连接数以及每个连接执行关联查询中涉及的表的最大数量来设定：<code>max_connections * N</code></p></li><li><p>thread_cache_size：可控制 MySQL 缓存客户服务线程的数量</p><p>为了加快连接数据库的速度，MySQL 会缓存一定数量的客户服务线程以备重用，池化思想</p></li><li><p>innodb_lock_wait_timeout：设置 InnoDB 事务等待行锁的时间，默认值是 50ms</p><p>对于需要快速反馈的业务系统，可以将行锁的等待时间调小，以避免事务被长时间挂起； 对于后台运行的批量处理程序来说，可以将行锁的等待时间调大，以避免发生大的回滚操作</p></li></ul><hr><h2 id="事务机制" tabindex="-1"><a class="header-anchor" href="#事务机制"><span>事务机制</span></a></h2><h3 id="基本介绍-7" tabindex="-1"><a class="header-anchor" href="#基本介绍-7"><span>基本介绍</span></a></h3><p>事务（Transaction）是访问和更新数据库的程序执行单元；事务中可能包含一个或多个 SQL 语句，这些语句要么都执行，要么都不执行，作为一个关系型数据库，MySQL 支持事务。</p><p>单元中的每条 SQL 语句都相互依赖，形成一个整体</p><ul><li>如果某条 SQL 语句执行失败或者出现错误，那么整个单元就会回滚，撤回到事务最初的状态</li><li>如果单元中所有的 SQL 语句都执行成功，则事务就顺利执行</li></ul><p>事务的四大特征：ACID</p><ul><li>原子性 (atomicity)</li><li>一致性 (consistency)</li><li>隔离性 (isolaction)</li><li>持久性 (durability)</li></ul><p>而对于这四大特性，实际上分为两个部分。 其中的原子性、一致性、持久化，实际上是由InnoDB中的两份日志来保证的，一份是redo log日志，一份是undo log日志。 而持久性是通过数据库的锁，加上MVCC来保证的。<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687226636543.png" alt="1687226636543" loading="lazy"></p><p>事务的几种状态：</p><ul><li>活动的（active）：事务对应的数据库操作正在执行中</li><li>部分提交的（partially committed）：事务的最后一个操作执行完，但是内存还没刷新至磁盘</li><li>失败的（failed）：当事务处于活动状态或部分提交状态时，如果数据库遇到了错误或刷脏失败，或者用户主动停止当前的事务</li><li>中止的（aborted）：失败状态的事务回滚完成后的状态</li><li>提交的（committed）：当处于部分提交状态的事务刷脏成功，就处于提交状态</li></ul><hr><h3 id="事务管理" tabindex="-1"><a class="header-anchor" href="#事务管理"><span>事务管理</span></a></h3><h4 id="基本操作-2" tabindex="-1"><a class="header-anchor" href="#基本操作-2"><span>基本操作</span></a></h4><p>事务管理的三个步骤</p><ol><li>开启事务：记录回滚点，并通知服务器，将要执行一组操作，要么同时成功、要么同时失败</li><li>执行 SQL 语句：执行具体的一条或多条 SQL 语句</li><li>结束事务（提交|回滚） <ul><li>提交：没出现问题，数据进行更新</li><li>回滚：出现问题，数据恢复到开启事务时的状态</li></ul></li></ol><p>事务操作：</p><ul><li><p>显式开启事务</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>START TRANSACTION [READ ONLY|READ WRITE|WITH CONSISTENT SNAPSHOT]; #可以跟一个或多个状态，最后的是一致性读</span></span>
<span class="line"><span>BEGIN [WORK];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>说明：不填状态默认是读写事务</p><ul><li><p>回滚事务，用来手动中止事务</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ROLLBACK;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>提交事务，显示执行是手动提交，MySQL 默认为自动提交</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>COMMIT;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>保存点：在事务的执行过程中设置的还原点，调用 ROLLBACK 时可以指定回滚到哪个点</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SAVEPOINT point_name;						#设置保存点</span></span>
<span class="line"><span>RELEASE point_name							#删除保存点</span></span>
<span class="line"><span>ROLLBACK [WORK] TO [SAVEPOINT] point_name	#回滚至某个保存点，不填默认回滚到事务执行之前的状态</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>操作演示</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 开启事务</span></span>
<span class="line"><span>START TRANSACTION;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 张三给李四转账500元</span></span>
<span class="line"><span>-- 1.张三账户-500</span></span>
<span class="line"><span>UPDATE account SET money=money-500 WHERE NAME=&#39;张三&#39;;</span></span>
<span class="line"><span>-- 2.李四账户+500</span></span>
<span class="line"><span>UPDATE account SET money=money+500 WHERE NAME=&#39;李四&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 回滚事务(出现问题)</span></span>
<span class="line"><span>ROLLBACK;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 提交事务(没出现问题)</span></span>
<span class="line"><span>COMMIT;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="提交方式" tabindex="-1"><a class="header-anchor" href="#提交方式"><span>提交方式</span></a></h4><p>提交方式的相关语法：</p><ul><li><p>查看事务提交方式</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT @@AUTOCOMMIT;  		-- 会话，1 代表自动提交    0 代表手动提交</span></span>
<span class="line"><span>SELECT @@GLOBAL.AUTOCOMMIT;	-- 系统</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改事务提交方式</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET @@AUTOCOMMIT=数字;	-- 系统</span></span>
<span class="line"><span>SET AUTOCOMMIT=数字;		-- 会话</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>工作原理：</p></li><li><p>自动提交：如果没有 START TRANSACTION 显式地开始一个事务，那么<strong>每条 SQL 语句都会被当做一个事务执行提交操作</strong>；显式开启事务后，会在本次事务结束（提交或回滚）前暂时关闭自动提交</p></li><li><p>手动提交：不需要显式的开启事务，所有的 SQL 语句都在一个事务中，直到执行了提交或回滚，然后进入下一个事务</p></li><li><p>隐式提交：存在一些特殊的命令，在事务中执行了这些命令会马上<strong>强制执行 COMMIT 提交事务</strong></p><ul><li><strong>DDL 语句</strong> (CREATE/DROP/ALTER)、LOCK TABLES 语句、LOAD DATA 导入数据语句、主从复制语句等</li><li>当一个事务还没提交或回滚，显式的开启一个事务会隐式的提交上一个事务</li></ul></li></ul><hr><h4 id="事务-id" tabindex="-1"><a class="header-anchor" href="#事务-id"><span>事务 ID</span></a></h4><p>事务在执行过程中对某个表执行了<strong>增删改操作或者创建表</strong>，就会为当前事务分配一个独一无二的事务 ID（对临时表并不会分配 ID），如果当前事务没有被分配 ID，默认是 0</p><p>说明：只读事务不能对普通的表进行增删改操作，但是可以对临时表增删改，读写事务可以对数据表执行增删改查操作</p><p>事务 ID 本质上就是一个数字，服务器在内存中维护一个全局变量：</p><ul><li>每当需要为某个事务分配 ID，就会把全局变量的值赋值给事务 ID，然后变量自增 1</li><li>每当变量值为 256 的倍数时，就将该变量的值刷新到系统表空间的 Max Trx ID 属性中，该属性占 8 字节</li><li>系统再次启动后，会读取表空间的 Max Trx ID 属性到内存，加上 256 后赋值给全局变量，因为关机时的事务 ID 可能并不是 256 的倍数，会比 Max Trx ID 大，所以需要加上 256 保持事务 ID 是一个<strong>递增的数字</strong></li></ul><p><strong>聚簇索引</strong>的行记录除了完整的数据，还会自动添加 trx_id、roll_pointer 隐藏列，如果表中没有主键并且没有非空唯一索引，也会添加一个 row_id 的隐藏列作为聚簇索引</p><hr><h3 id="隔离级别" tabindex="-1"><a class="header-anchor" href="#隔离级别"><span>隔离级别</span></a></h3><h4 id="四种级别" tabindex="-1"><a class="header-anchor" href="#四种级别"><span>四种级别</span></a></h4><p>事务的隔离级别：多个客户端操作时，各个客户端的事务之间应该是隔离的，<strong>不同的事务之间不该互相影响</strong>，而如果多个事务操作同一批数据时，则需要设置不同的隔离级别，否则就会产生问题。</p><p>隔离级别分类：</p><table><thead><tr><th>隔离级别</th><th>名称</th><th>会引发的问题</th><th>数据库默认隔离级别</th></tr></thead><tbody><tr><td>Read Uncommitted</td><td>读未提交</td><td>脏读、不可重复读、幻读</td><td></td></tr><tr><td>Read Committed</td><td>读已提交</td><td>不可重复读、幻读</td><td>Oracle / SQL Server</td></tr><tr><td>Repeatable Read</td><td>可重复读</td><td>幻读</td><td>MySQL</td></tr><tr><td>Serializable</td><td>可串行化</td><td>无</td><td></td></tr></tbody></table><p>一般来说，隔离级别越低，系统开销越低，可支持的并发越高，但隔离性也越差</p><ul><li><p>脏写 (Dirty Write)：当两个或多个事务选择同一行，最初的事务修改的值被后面事务修改的值覆盖，所有的隔离级别都可以避免脏写（又叫丢失更新），因为有行锁</p></li><li><p>脏读 (Dirty Reads)：在一个事务处理过程中读取了另一个<strong>未提交</strong>的事务中修改过的数据</p></li><li><p>不可重复读 (Non-Repeatable Reads)：在一个事务处理过程中读取了另一个事务中修改并<strong>已提交</strong>的数据</p><blockquote><p>可重复读的意思是不管读几次，结果都一样，可以重复的读，可以理解为快照读，要读的数据集不会发生变化</p></blockquote></li><li><p>幻读 (Phantom Reads)：在事务中按某个条件先后两次查询数据库，后一次查询查到了前一次查询没有查到的行，<strong>数据条目</strong>发生了变化。比如查询某数据不存在，准备插入此记录，但执行插入时发现此记录已存在，无法插入</p></li></ul><p>隔离级别操作语法：</p><ul><li><p>查看事务隔离级别</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT @@TRANSACTION_ISOLATION;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>设置事务隔离级别</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET  [ SESSION | GLOBAL ]  TRANSACTION  ISOLATION  LEVEL  { READ UNCOMMITTED | </span></span>
<span class="line"><span>READ COMMITTED | REPEATABLE READ | SERIALIZABLE }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询数据库隔离级别</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT @@TX_ISOLATION;			-- 会话</span></span>
<span class="line"><span>SELECT @@GLOBAL.TX_ISOLATION;	-- 系统</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改数据库隔离级别</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET GLOBAL TRANSACTION ISOLATION LEVEL 级别字符串;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h4 id="加锁分析" tabindex="-1"><a class="header-anchor" href="#加锁分析"><span>加锁分析</span></a></h4><p>InnoDB 存储引擎支持事务，所以加锁分析是基于该存储引擎</p><ul><li><p>Read Uncommitted 级别，任何操作都不会加锁</p></li><li><p>Read Committed 级别，增删改操作会加写锁（行锁），读操作不加锁</p><p>在 Server 层过滤条件时发现不满足的记录会调用 unlock_row 方法释放该记录的行锁，保证最后只有满足条件的记录加锁，但是扫表过程中每条记录的<strong>加锁操作不能省略</strong>。所以对数据量很大的表做批量修改时，如果无法使用相应的索引（全表扫描），在 Server 过滤数据时就会特别慢，出现虽然没有修改某些行的数据，但是还是被锁住了的现象（锁表），这种情况同样适用于 RR</p></li><li><p>Repeatable Read 级别，增删改操作会加写锁，读操作不加锁。因为读写锁不兼容，<strong>加了读锁后其他事务就无法修改数据</strong>，影响了并发性能，为了保证隔离性和并发性，MySQL 通过 MVCC 解决了读写冲突。RR 级别下的锁有很多种，锁机制章节详解</p></li><li><p>Serializable 级别，读加共享锁，写加排他锁，读写互斥，使用的悲观锁的理论，实现简单，数据更加安全，但是并发能力非常差</p><ul><li>串行化：让所有事务按顺序单独执行，写操作会加写锁，读操作会加读锁</li><li>可串行化：让所有操作相同数据的事务顺序执行，通过加锁实现</li></ul></li></ul><p>参考文章：https://tech.meituan.com/2014/08/20/innodb-lock.html</p><hr><h3 id="原子特性" tabindex="-1"><a class="header-anchor" href="#原子特性"><span>原子特性</span></a></h3><h4 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h4><p>原子性是指事务是一个不可分割的工作单位，事务的操作如果成功就必须要完全应用到数据库，失败则不能对数据库有任何影响。比如事务中一个 SQL 语句执行失败，则已执行的语句也必须回滚，数据库退回到事务前的状态</p><p>InnoDB 存储引擎提供了两种事务日志：redo log（重做日志）和 undo log（回滚日志）</p><ul><li>redo log 用于保证事务持久性</li><li>undo log 用于保证事务原子性和隔离性</li></ul><p>undo log 属于<strong>逻辑日志</strong>，根据每行操作进行记录，记录了 SQL 执行相关的信息，用来回滚行记录到某个版本</p><p>当事务对数据库进行修改时，InnoDB 会先记录对应的 undo log，如果事务执行失败或调用了 rollback 导致事务回滚，InnoDB 会根据 undo log 的内容<strong>做与之前相反的操作</strong>：</p><ul><li>对于每个 insert，回滚时会执行 delete</li><li>对于每个 delete，回滚时会执行 insert</li><li>对于每个 update，回滚时会执行一个相反的 update，把数据修改回去</li></ul><p>参考文章：https://www.cnblogs.com/kismetv/p/10331633.html</p><hr><h4 id="dml-解析" tabindex="-1"><a class="header-anchor" href="#dml-解析"><span>DML 解析</span></a></h4><h5 id="insert-1" tabindex="-1"><a class="header-anchor" href="#insert-1"><span>INSERT</span></a></h5><p>乐观插入：当前数据页的剩余空间充足，直接将数据进行插入</p><p>悲观插入：当前数据页的剩余空间不足，需要进行页分裂，申请一个新的页面来插入数据，会造成更多的 redo log，undo log 影响不大</p><p>当向某个表插入一条记录，实际上需要向聚簇索引和所有二级索引都插入一条记录，但是 undo log <strong>只针对聚簇索引记录</strong>，在回滚时会根据聚簇索引去所有的二级索引进行回滚操作</p><p>roll_pointer 是一个指针，<strong>指向记录对应的 undo log 日志</strong>，一条记录就是一个数据行，行格式中的 roll_pointer 就指向 undo log</p><hr><h5 id="delete-1" tabindex="-1"><a class="header-anchor" href="#delete-1"><span>DELETE</span></a></h5><p>插入到页面中的记录会根据 next_record 属性组成一个单向链表，这个链表称为正常链表，被删除的记录也会通过 next_record 组成一个垃圾链表，该链表中所占用的存储空间可以被重新利用，并不会直接清除数据</p><p>在页面 Page Header 中，PAGE_FREE 属性指向垃圾链表的头节点，删除的工作过程：</p><ul><li><p>将要删除的记录的 delete_flag 位置为 1，其他不做修改，这个过程叫 <strong>delete mark</strong></p></li><li><p>在事务提交前，delete_flag = 1 的记录一直都会处于中间状态</p></li><li><p>事务提交后，有专门的线程将 delete_flag = 1 的记录从正常链表移除并加入垃圾链表，这个过程叫 <strong>purge</strong></p><p>purge 线程在执行删除操作时会创建一个 ReadView，根据事务的可见性移除数据（隔离特性部分详解）</p></li></ul><p>当有新插入的记录时，首先判断 PAGE_FREE 指向的头节点是否足够容纳新纪录：</p><ul><li>如果可以容纳新纪录，就会直接重用已删除的记录的存储空间，然后让 PAGE_FREE 指向垃圾链表的下一个节点</li><li>如果不能容纳新纪录，就直接向页面申请新的空间存储，并不会遍历垃圾链表</li></ul><p>重用已删除的记录空间，可能会造成空间碎片，当数据页容纳不了一条记录时，会判断将碎片空间加起来是否可以容纳，判断为真就会重新组织页内的记录：</p><ul><li>开辟一个临时页面，将页内记录一次插入到临时页面，此时临时页面时没有碎片的</li><li>把临时页面的内容复制到本页，这样就解放出了内存碎片，但是会耗费很大的性能资源</li></ul><hr><h5 id="update-2" tabindex="-1"><a class="header-anchor" href="#update-2"><span>UPDATE</span></a></h5><p>执行 UPDATE 语句，对于更新主键和不更新主键有两种不同的处理方式</p><p>不更新主键的情况：</p><ul><li>就地更新（in-place update），如果更新后的列和更新前的列占用的存储空间一样大，就可以直接在原记录上修改</li><li>先删除旧纪录，再插入新纪录，这里的删除不是 delete mark，而是直接将记录加入垃圾链表，并且修改页面的相应的控制信息，执行删除的线程不是 purge，是执行更新的用户线程，插入新记录时可能造成页空间不足，从而导致页分裂</li></ul><p>更新主键的情况：</p><ul><li>将旧纪录进行 delete mark，在更新语句提交后由 purge 线程移入垃圾链表</li><li>根据更新的各列的值创建一条新纪录，插入到聚簇索引中</li></ul><p>在对一条记录修改前会<strong>将记录的隐藏列 trx_id 和 roll_pointer 的旧值记录到当前 undo log 对应的属性中</strong>，这样当前记录的 roll_pointer 指向当前 undo log 记录，当前 undo log 记录的 roll_pointer 指向旧的 undo log 记录，<strong>形成一个版本链</strong></p><p>UPDATE、DELETE 操作产生的 undo 日志会用于其他事务的 MVCC 操作，所以不能立即删除，INSERT 可以删除的原因是 MVCC 是对现有数据的快照</p><hr><h4 id="回滚日志" tabindex="-1"><a class="header-anchor" href="#回滚日志"><span>回滚日志</span></a></h4><p>undo log 是采用段的方式来记录，存放在Rollback Segement （回滚段）里，本质上就是一个类型是 Rollback Segement Header 的页面</p><p>每个回滚段中有 1024 个 undo slot，每个 slot 存放 undo 链表页面的头节点页号，每个链表对应一个叫 undo log segment 的段</p><ul><li>在以前老版本，只支持 1 个 Rollback Segement，只能记录 1024 个 undo log segment</li><li>MySQL5.5 开始支持 128 个 Rollback Segement，支持 128*1024 个 undo 操作</li><li>undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些日志可能还用于MVCC。</li></ul><p>工作流程：</p><ul><li><p>事务执行前需要到系统表空间第 5 号页面中分配一个回滚段（页），获取一个 Rollback Segement Header 页面的地址</p></li><li><p>回滚段页面有 1024 个 undo slot，首先去回滚段的两个 cached 链表获取缓存的 slot，缓存中没有就在回滚段页面中找一个可用的 undo slot 分配给当前事务</p></li><li><p>如果是缓存中获取的 slot，则该 slot 对应的 undo log segment 已经分配了，需要重新分配，然后从 undo log segment 中申请一个页面作为日志链表的头节点，并填入对应的 slot 中</p></li><li><p>每个事务 undo 日志在记录的时候<strong>占用两个 undo 页面的组成链表</strong>，分别为 insert undo 链表和 update undo 链表，链表的头节点页面为 first undo page 会包含一些管理信息，其他页面为 normal undo page</p><p>说明：事务执行过程的临时表也需要两个 undo 链表，不和普通表共用，这些链表并不是事务开始就分配，而是按需分配</p></li></ul><hr><h3 id="隔离特性" tabindex="-1"><a class="header-anchor" href="#隔离特性"><span>隔离特性</span></a></h3><h4 id="实现方式-1" tabindex="-1"><a class="header-anchor" href="#实现方式-1"><span>实现方式</span></a></h4><p>隔离性是指，事务内部的操作与其他事务是隔离的，多个并发事务之间要相互隔离，不能互相干扰</p><ul><li>严格的隔离性，对应了事务隔离级别中的 serializable，实际应用中对性能考虑很少使用可串行化</li><li>与原子性、持久性侧重于研究事务本身不同，隔离性研究的是<strong>不同事务</strong>之间的相互影响</li></ul><p>隔离性让并发情形下的事务之间互不干扰：</p><ul><li>一个事务的写操作对另一个事务的写操作（写写）：锁机制保证隔离性</li><li>一个事务的写操作对另一个事务的读操作（读写）：MVCC 保证隔离性</li></ul><p>锁机制：事务在修改数据之前，需要先获得相应的锁，获得锁之后，事务便可以修改数据；该事务操作期间，这部分数据是锁定的，其他事务如果需要修改数据，需要等待当前事务提交或回滚后释放锁（详解见锁机制）</p><hr><h4 id="mvcc并发控制" tabindex="-1"><a class="header-anchor" href="#mvcc并发控制"><span>MVCC并发控制</span></a></h4><p>MVCC 全称 Multi-Version Concurrency Control，即多版本并发控制，用来<strong>解决读写冲突的无锁并发控制</strong>，可以在发生读写请求冲突时不用加锁解决，这个读是指的快照读（也叫一致性读或一致性无锁读），而不是当前读。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、readView。</p><ul><li>快照读：实现基于 MVCC，因为是多版本并发，所以快照读读到的数据不一定是当前最新的数据，有可能是历史版本的数据，简单的select（不加锁）就是快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。 • Read Committed：每次select，都生成一个快照读。 • Repeatable Read：开启事务后第一个select语句才是快照读的地方。 • Serializable：快照读会退化为当前读。</li><li>当前读：又叫加锁读，读取数据库记录是当前<strong>最新的版本</strong>（产生幻读、不可重复读），可以对读取的数据进行加锁，防止其他事务修改数据，是悲观锁的一种操作，读写操作加共享锁或者排他锁和串行化事务的隔离级别都是当前读。</li></ul><p>数据库并发场景：</p><ul><li>读-读：不存在任何问题，也不需要并发控制</li><li>读-写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读，幻读，不可重复读</li><li>写-写：有线程安全问题，可能会存在脏写（丢失更新）问题</li></ul><p>MVCC 的优点：</p><ul><li>在并发读写数据库时，做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了并发读写的性能</li><li>可以解决脏读，不可重复读等事务隔离问题（加锁也能解决），但不能解决更新丢失问题（写锁会解决）</li></ul><p>提高读写和写写的并发性能：</p><ul><li>MVCC + 悲观锁：MVCC 解决读写冲突，悲观锁解决写写冲突</li><li>MVCC + 乐观锁：MVCC 解决读写冲突，乐观锁解决写写冲突</li></ul><p>参考文章：https://www.jianshu.com/p/8845ddca3b23</p><hr><h4 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理"><span>实现原理</span></a></h4><h5 id="隐藏字段" tabindex="-1"><a class="header-anchor" href="#隐藏字段"><span>隐藏字段</span></a></h5><p>实现原理主要是隐藏字段，undo日志，Read View 来实现的</p><p>InnoDB 存储引擎，数据库中的<strong>聚簇索引</strong>每行数据，除了自定义的字段，还有数据库隐式定义的字段：</p><ul><li>DB_TRX_ID：最近修改事务 ID，记录创建该数据或最后一次修改该数据的事务 ID</li><li>DB_ROLL_PTR：回滚指针，<strong>指向记录对应的 undo log 日志</strong>，undo log 中又指向上一个旧版本的 undo log</li><li>DB_ROW_ID：隐含的自增 ID（<strong>隐藏主键</strong>），如果数据表没有主键，InnoDB 会自动以 DB_ROW_ID 作为聚簇索引</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MVCC版本链隐藏字段.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>测试</p><p>1). 查看有主键的表 stu 进入服务器中的 /var/lib/mysql/itcast/ , 查看stu的表结构信息, 通过如下指令:</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ibd2sdi stu.ibd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看到的表结构信息中，有一栏 columns，在其中我们会看到处理我们建表时指定的字段以外，还有额外的两个字段 分别是：DB_TRX_ID 、 DB_ROLL_PTR ，因为该表有主键，所以没有DB_ROW_ID隐藏字段。</p><hr><h5 id="版本链" tabindex="-1"><a class="header-anchor" href="#版本链"><span>版本链</span></a></h5><p>undo log 是逻辑日志，记录的是每个事务对数据执行的操作，而不是记录的全部数据，要<strong>根据 undo log 逆推出以往事务的数据</strong></p><p>undo log 的作用：</p><ul><li>保证事务进行 rollback 时的原子性和一致性，当事务进行回滚的时候可以用 undo log 的数据进行恢复</li><li>用于 MVCC 快照读，通过读取 undo log 的历史版本数据可以实现不同事务版本号都拥有自己独立的快照数据</li></ul><p>undo log 主要分为两种：</p><ul><li>insert undo log：事务在 insert 新记录时产生的 undo log，只在事务回滚时需要，并且在事务提交后可以被立即丢弃</li><li>update undo log：事务在进行 update 或 delete 时产生的 undo log，在事务回滚时需要，在快照读时也需要。不能随意删除，只有在当前读或事务回滚不涉及该日志时，对应的日志才会被 purge 线程统一清除</li></ul><p>每次对数据库记录进行改动，都会产生的新版本的 undo log，随着更新次数的增多，所有的版本都会被 roll_pointer 属性连接成一个链表，把这个链表称之为<strong>版本链</strong>，版本链的头节点就是当前的最新的 undo log，链尾就是最早的旧 undo log</p><p>说明：因为 DELETE 删除记录，都是移动到垃圾链表中，不是真正的删除，所以才可以通过版本链访问原始数据</p><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MVCC版本链.png" style="zoom:80%;"><p>注意：undo 是逻辑日志，这里只是直观的展示出来</p><p>工作流程：</p><ul><li>有个事务插入 persion 表一条新记录，name 为 Jerry，age 为 24</li><li>事务 1 修改该行数据时，数据库会先对该行加排他锁，然后先记录 undo log，然后修改该行 name 为 Tom，并且修改隐藏字段的事务 ID 为当前事务 1 的 ID（默认为 1 之后递增），回滚指针指向拷贝到 undo log 的副本记录，事务提交后，释放锁</li><li>以此类推</li></ul><hr><h5 id="读视图" tabindex="-1"><a class="header-anchor" href="#读视图"><span>读视图</span></a></h5><p>Read View 是事务进行读数据操作时产生的读视图，该事务执行快照读的那一刻会生成数据库系统当前的一个快照，记录并维护系统当前活跃事务的 ID，用来做可见性判断，根据视图判断当前事务能够看到哪个版本的数据</p><p>注意：这里的快照并不是把所有的数据拷贝一份副本，而是由 undo log 记录的逻辑日志，根据库中的数据进行计算出历史数据</p><p>工作流程：将版本链的头节点的事务 ID（最新数据事务 ID，大概率不是当前线程）DB_TRX_ID 取出来，与系统当前活跃事务的 ID 对比进行可见性分析，不可见就通过 DB_ROLL_PTR 回滚指针去取出 undo log 中的下一个 DB_TRX_ID 比较，直到找到最近的满足可见性的 DB_TRX_ID，该事务 ID 所在的旧记录就是当前事务能看见的最新的记录</p><p>Read View 几个属性：</p><ul><li>m_ids：生成 Read View 时当前系统中活跃的事务 id 列表（未提交的事务集合，当前事务也在其中）</li><li>min_trx_id：生成 Read View 时当前系统中活跃的最小的事务 id，也就是 m_ids 中的最小值（已提交的事务集合）</li><li>max_trx_id：生成 Read View 时当前系统应该分配给下一个事务的 id 值，m_ids 中的最大值加 1（未开始事务）</li><li>creator_trx_id：生成该 Read View 的事务的事务 id，就是判断该 id 的事务能读到什么数据</li></ul><p>creator 创建一个 Read View，进行可见性算法分析：（解决了读未提交）</p><ul><li>db_trx_id == creator_trx_id：表示这个数据就是当前事务自己生成的，自己生成的数据自己肯定能看见，所以此数据对 creator 是可见的</li><li>db_trx_id &lt; min_trx_id：该版本对应的事务 ID 小于 Read view 中的最小活跃事务 ID，则这个事务在当前事务之前就已经被提交了，对 creator 可见（因为比已提交的最大事务 ID 小的并不一定已经提交，所以应该判断是否在活跃事务列表）</li><li>db_trx_id &gt;= max_trx_id：该版本对应的事务 ID 大于 Read view 中当前系统的最大事务 ID，则说明该数据是在当前 Read view 创建之后才产生的，对 creator 不可见</li><li>min_trx_id&lt;= db_trx_id &lt; max_trx_id：判断 db_trx_id 是否在活跃事务列表 m_ids 中 <ul><li>在列表中，说明该版本对应的事务正在运行，数据不能显示（<strong>不能读到未提交的数据</strong>）</li><li>不在列表中，说明该版本对应的事务已经被提交，数据可以显示（<strong>可以读到已经提交的数据</strong>）</li></ul></li></ul><hr><h5 id="工作流程-1" tabindex="-1"><a class="header-anchor" href="#工作流程-1"><span>工作流程</span></a></h5><p>表 user 数据</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">id</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">		name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">		age</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">		张三</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">		   18</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Transaction 20：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>START TRANSACTION;	-- 开启事务</span></span>
<span class="line"><span>UPDATE user SET name = &#39;李四&#39; WHERE id = 1;</span></span>
<span class="line"><span>UPDATE user SET name = &#39;王五&#39; WHERE id = 1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Transaction 60：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>START TRANSACTION;	-- 开启事务</span></span>
<span class="line"><span>-- 操作表的其他数据</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MVCC工作流程1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>ID 为 0 的事务创建 Read View：</p><ul><li>m_ids：20、60</li><li>min_trx_id：20</li><li>max_trx_id：61</li><li>creator_trx_id：0</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MVCC工作流程2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>只有红框部分才复合条件，所以只有张三对应的版本的数据可以被看到</p><p>参考视频：https://www.bilibili.com/video/BV1t5411u7Fg</p><hr><h5 id="二级索引" tabindex="-1"><a class="header-anchor" href="#二级索引"><span>二级索引</span></a></h5><p>只有在聚簇索引中才有 trx_id 和 roll_pointer 的隐藏列，对于二级索引判断可见性的方式：</p><ul><li>二级索引页面的 Page Header 中有一个 PAGE_MAX_TRX_ID 属性，代表修改当前页面的最大的事务 ID，SELECT 语句访问某个二级索引时会判断 ReadView 的 min_trx_id 是否大于该属性，大于说明该页面的所有属性对 ReadView 可见</li><li>如果属性判断不可见，就需要利用二级索引获取主键值进行<strong>回表操作</strong>，得到聚簇索引后按照聚簇索引的可见性判断的方法操作</li></ul><hr><h4 id="rc-rr" tabindex="-1"><a class="header-anchor" href="#rc-rr"><span>RC RR</span></a></h4><p>Read View 用于支持 RC（Read Committed，读已提交）和 RR（Repeatable Read，可重复读）隔离级别的实现，所以 <strong>SELECT 在 RC 和 RR 隔离级别使用 MVCC 读取记录</strong></p><p>RR、RC 生成时机：</p><ul><li>RC 隔离级别下，每次读取数据前都会生成最新的 Read View（当前读）</li><li>RR 隔离级别下，在第一次数据读取时才会创建 Read View（快照读）</li></ul><p>RC、RR 级别下的 InnoDB 快照读区别</p><ul><li><p>RC 级别下，事务中每次快照读都会新生成一个 Read View，这就是在 RC 级别下的事务中可以看到别的事务提交的更新的原因</p></li><li><p>RR 级别下，某个事务的对某条记录的<strong>第一次快照读</strong>会创建一个 Read View， 将当前系统活跃的其他事务记录起来，此后在调用快照读的时候，使用的是同一个 Read View，所以一个事务的查询结果每次都是相同的</p><p>RR 级别下，通过 <code>START TRANSACTION WITH CONSISTENT SNAPSHOT</code> 开启事务，会在执行该语句后立刻生成一个 Read View，不是在执行第一条 SELECT 语句时生成（所以说 <code>START TRANSACTION</code> 并不是事务的起点，执行第一条语句才算起点）</p></li></ul><p>解决幻读问题：</p><ul><li><p>快照读：通过 MVCC 来进行控制的，在可重复读隔离级别下，普通查询是快照读，是不会看到别的事务插入的数据的，但是<strong>并不能完全避免幻读</strong></p><p>场景：RR 级别，T1 事务开启，创建 Read View，此时 T2 去 INSERT 新的一行然后提交，然后 T1 去 UPDATE 该行会发现更新成功，并且把这条新记录的 trx_id 变为当前的事务 id，所以对当前事务就是可见的。因为 <strong>Read View 并不能阻止事务去更新数据，更新数据都是先读后写并且是当前读</strong>，读取到的是最新版本的数据</p></li><li><p>当前读：通过 next-key 锁（行锁 + 间隙锁）来解决问题</p></li></ul><hr><h3 id="持久特性" tabindex="-1"><a class="header-anchor" href="#持久特性"><span>持久特性</span></a></h3><h4 id="实现方式-2" tabindex="-1"><a class="header-anchor" href="#实现方式-2"><span>实现方式</span></a></h4><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687227607521.png" alt="1687227607521" tabindex="0" loading="lazy"><figcaption>1687227607521</figcaption></figure><p>持久性是指一个事务一旦被提交了，那么对数据库中数据的改变就是永久性的，接下来的其他操作或故障不应该对其有任何影响。Buffer Pool 的使用提高了读写数据的效率，但是如果 MySQL 宕机，此时 Buffer Pool 中修改的数据还没有刷新到磁盘，就会导致数据的丢失，事务的持久性无法保证，所以引入了 redo log （重做日志），该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file）,前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中, 用于在刷新脏页到磁盘,发生错误时, 进行数据恢复使用。</p><ul><li>redo log <strong>记录数据页的物理修改</strong>，而不是某一行或某几行的修改，用来恢复提交后的数据页，只能<strong>恢复到最后一次提交</strong>的位置</li><li>redo log 采用的是 WAL（Write-ahead logging，<strong>预写式日志</strong>），所有修改要先写入日志，再更新到磁盘，保证了数据不会因 MySQL 宕机而丢失，从而满足了持久性要求</li><li>简单的 redo log 是纯粹的物理日志，复杂的 redo log 会存在物理日志和逻辑日志</li></ul><p>工作过程：MySQL 发生了宕机，InnoDB 会判断一个数据页在崩溃恢复时丢失了更新，就会将它读到内存，然后根据 redo log 内容更新内存，更新完成后，内存页变成脏页，然后进行刷脏</p><p>缓冲池的<strong>刷脏策略</strong>：</p><ul><li>redo log 文件是固定大小的，如果写满了就要擦除以前的记录，在擦除之前需要把对应的更新持久化到磁盘中</li><li>Buffer Pool 内存不足，需要淘汰部分数据页（LRU 链表尾部），如果淘汰的是脏页，就要先将脏页写到磁盘（要避免大事务）</li><li>系统空闲时，后台线程会自动进行刷脏（Flush 链表部分已经详解）</li><li>MySQL 正常关闭时，会把内存的脏页都刷新到磁盘上</li></ul><hr><h4 id="重做日志" tabindex="-1"><a class="header-anchor" href="#重做日志"><span>重做日志</span></a></h4><h5 id="日志缓冲" tabindex="-1"><a class="header-anchor" href="#日志缓冲"><span>日志缓冲</span></a></h5><p>服务器启动时会向操作系统申请一片连续内存空间作为 redo log buffer（重做日志缓冲区），可以通过 <code>innodb_log_buffer_size</code> 系统变量指定 redo log buffer 的大小，默认是 16MB</p><p>log buffer 被划分为若干 redo log block（块，类似数据页的概念），每个默认大小 512 字节，每个 block 由 12 字节的 log block head、496 字节的 log block body、4 字节的 log block trailer 组成</p><ul><li>当数据修改时，先修改 Change Buffer 中的数据，然后在 redo log buffer 记录这次操作，写入 log buffer 的过程是<strong>顺序写入</strong>的（先写入前面的 block，写满后继续写下一个）</li><li>log buffer 中有一个指针 buf_free，来标识该位置之前都是填满的 block，该位置之后都是空闲区域</li></ul><p>MySQL 规定对底层页面的一次原子访问称为一个 Mini-Transaction（MTR），比如在 B+ 树上插入一条数据就算一个 MTR</p><ul><li>一个事务包含若干个 MTR，一个 MTR 对应一组若干条 redo log，一组 redo log 是不可分割的，在进行数据恢复时也把一组 redo log 当作一个不可分割的整体处理</li><li>不是每生成一条 redo 日志就将其插入到 log buffer 中，而是一个 MTR 结束后<strong>将一组 redo 日志写入</strong></li></ul><p>InnoDB 的 redo log 是<strong>固定大小</strong>的，redo 日志在磁盘中以文件组的形式存储，同一组中的每个文件大小一样格式一样</p><ul><li><code>innodb_log_group_home_dir</code> 代表磁盘存储 redo log 的文件目录，默认是当前数据目录</li><li><code>innodb_log_file_size</code> 代表文件大小，默认 48M，<code>innodb_log_files_in_group</code> 代表文件个数，默认 2 最大 100，所以日志的文件大小为 <code>innodb_log_file_size * innodb_log_files_in_group</code></li></ul><p>redo 日志文件也是由若干个 512 字节的 block 组成，日志文件的前 2048 个字节（前 4 个 block）用来存储一些管理信息，以后的用来存储 log buffer 中的 block 镜像</p><p>注意：block 并不代表一组 redo log，一组日志可能占用不到一个 block 或者几个 block，依赖于 MTR 的大小</p><hr><h5 id="日志刷盘" tabindex="-1"><a class="header-anchor" href="#日志刷盘"><span>日志刷盘</span></a></h5><p>redo log 需要在事务提交时将日志写入磁盘，但是比 Buffer Pool 修改的数据写入磁盘的速度快，原因：</p><ul><li>刷脏是随机 IO，因为每次修改的数据位置随机；redo log 和 binlog 都是<strong>顺序写</strong>，磁盘的顺序 IO 比随机 IO 速度要快</li><li>刷脏是以数据页（Page）为单位的，一个页上的一个小修改都要整页写入；redo log 中只包含真正需要写入的部分，好几页的数据修改可能只记录在一个 redo log 页中，减少无效 IO</li><li><strong>组提交机制</strong>，可以大幅度降低磁盘的 IO 消耗</li></ul><p>InnoDB 引擎会在适当的时候，把内存中 redo log buffer 持久化（fsync）到磁盘，具体的<strong>刷盘策略</strong>：</p><ul><li>在事务提交时需要进行刷盘，通过修改参数 <code>innodb_flush_log_at_trx_commit</code> 设置： <ul><li>0：表示当提交事务时，并不将缓冲区的 redo 日志写入磁盘，而是等待<strong>后台线程每秒刷新一次</strong></li><li>1：在事务提交时将缓冲区的 redo 日志<strong>同步写入</strong>到磁盘，保证一定会写入成功（默认值）</li><li>2：在事务提交时将缓冲区的 redo 日志异步写入到磁盘，不能保证提交时肯定会写入，只是有这个动作。日志已经在操作系统的缓存，如果操作系统没有宕机而 MySQL 宕机，也是可以恢复数据的</li></ul></li><li>写入 redo log buffer 的日志超过了总容量的一半，就会将日志刷入到磁盘文件，这会影响执行效率，所以开发中应<strong>避免大事务</strong></li><li>服务器关闭时</li><li>并行的事务提交（组提交）时，会将将其他事务的 redo log 持久化到磁盘。假设事务 A 已经写入 redo log buffer 中，这时另外一个线程的事务 B 提交，如果 innodb_flush_log_at_trx_commit 设置的是 1，那么事务 B 要把 redo log buffer 里的日志全部持久化到磁盘，<strong>因为多个事务共用一个 redo log buffer</strong>，所以一次 fsync 可以刷盘多个事务的 redo log，提升了并发量</li></ul><p>服务器启动后 redo 磁盘空间不变，所以 redo 磁盘中的日志文件是被<strong>循环使用</strong>的，采用循环写数据的方式，写完尾部重新写头部，所以要确保头部 log 对应的修改已经持久化到磁盘</p><hr><h5 id="日志序号" tabindex="-1"><a class="header-anchor" href="#日志序号"><span>日志序号</span></a></h5><p>lsn (log sequence number) 代表已经写入的 redo 日志量、flushed_to_disk_lsn 指刷新到磁盘中的 redo 日志量，两者都是<strong>全局变量</strong>，如果两者的值相同，说明 log buffer 中所有的 redo 日志都已经持久化到磁盘</p><p>工作过程：写入 log buffer 数据时，buf_free 会进行偏移，偏移量就会加到 lsn 上</p><p>MTR 的执行过程中修改过的页对应的控制块会加到 Buffer Pool 的 flush 链表中，链表中脏页是按照第一次修改的时间进行排序的（头插），控制块中有两个指针用来记录脏页被修改的时间：</p><ul><li>oldest_modification：第一次修改 Buffer Pool 中某个缓冲页时，将修改该页的 MTR <strong>开始时</strong>对应的 lsn 值写入这个属性</li><li>newest_modification：每次修改页面，都将 MTR 结束时全局的 lsn 值写入这个属性，所以该值是该页面最后一次修改后的 lsn 值</li></ul><p>全局变量 checkpoint_lsn 表示<strong>当前系统可以被覆盖的 redo 日志总量</strong>，当 redo 日志对应的脏页已经被刷新到磁盘后，该文件空间就可以被覆盖重用，此时执行一次 checkpoint 来更新 checkpoint_lsn 的值存入管理信息（刷脏和执行一次 checkpoint 并不是同一个线程），该值的增量就代表磁盘文件中当前位置向后可以被覆盖的文件的量，所以该值是一直增大的</p><p><strong>checkpoint</strong>：从 flush 链表尾部中找出还未刷脏的页面，该页面是当前系统中最早被修改的脏页，该页面之前产生的脏页都已经刷脏，然后将该页 oldest_modification 值赋值给 checkpoint_lsn，因为 lsn 小于该值时产生的 redo 日志都可以被覆盖了</p><p>但是在系统忙碌时，后台线程的刷脏操作不能将脏页快速刷出，导致系统无法及时执行 checkpoint ，这时需要用户线程从 flush 链表中把最早修改的脏页刷新到磁盘中，然后执行 checkpoint</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">write pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">------</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> checkpoint_lsn </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 两值之间的部分表示可以写入的日志量，当 pos 追赶上 lsn 时必须执行 checkpoint</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用命令可以查看当前 InnoDB 存储引擎各种 lsn 的值：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW ENGINE INNODB STATUS\\G</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h5 id="崩溃恢复" tabindex="-1"><a class="header-anchor" href="#崩溃恢复"><span>崩溃恢复</span></a></h5><p>恢复的起点：在从 redo 日志文件组的管理信息中获取最近发生 checkpoint 的信息，<strong>从 checkpoint_lsn 对应的日志文件开始恢复</strong></p><p>恢复的终点：扫描日志文件的 block，block 的头部记录着当前 block 使用了多少字节，填满的 block 总是 512 字节， 如果某个 block 不是 512 字节，说明该 block 就是需要恢复的最后一个 block</p><p>恢复的过程：按照 redo log 依次执行恢复数据，优化方式</p><ul><li>使用哈希表：根据 redo log 的 space id 和 page number 属性计算出哈希值，将对同一页面的修改放入同一个槽里，可以一次性完成对某页的恢复，<strong>避免了随机 IO</strong></li><li>跳过已经刷新到磁盘中的页面：数据页的 File Header 中的 FILE_PAGE_LSN 属性（类似 newest_modification）表示最近一次修改页面时的 lsn 值，数据页被刷新到磁盘中，那么该页 lsn 属性肯定大于 checkpoint_lsn</li></ul><p>参考书籍：https://book.douban.com/subject/35231266/</p><hr><h4 id="工作流程-2" tabindex="-1"><a class="header-anchor" href="#工作流程-2"><span>工作流程</span></a></h4><h5 id="日志对比" tabindex="-1"><a class="header-anchor" href="#日志对比"><span>日志对比</span></a></h5><p>MySQL 中还存在 binlog（二进制日志）也可以记录写操作并用于数据的恢复，<strong>保证数据不丢失</strong>，二者的区别是：</p><ul><li>作用不同：redo log 是用于 crash recovery （故障恢复），保证 MySQL 宕机也不会影响持久性；binlog 是用于 point-in-time recovery 的，保证服务器可以基于时间点恢复数据，此外 binlog 还用于主从复制</li><li>层次不同：redo log 是 InnoDB 存储引擎实现的，而 binlog 是MySQL的 Server 层实现的，同时支持 InnoDB 和其他存储引擎</li><li>内容不同：redo log 是物理日志，内容基于磁盘的 Page；binlog 的内容是二进制的，根据 binlog_format 参数的不同，可能基于SQL 语句、基于数据本身或者二者的混合（日志部分详解）</li><li>写入时机不同：binlog 在事务提交时一次写入；redo log 的写入时机相对多元</li></ul><p>binlog 为什么不支持崩溃恢复？</p><ul><li>binlog 记录的是语句，并不记录数据页级的数据（哪个页改了哪些地方），所以没有能力恢复数据页</li><li>binlog 是追加写，保存全量的日志，没有标志确定从哪个点开始的数据是已经刷盘了，而 redo log 只要在 checkpoint_lsn 后面的就是没有刷盘的</li></ul><hr><h5 id="更新记录" tabindex="-1"><a class="header-anchor" href="#更新记录"><span>更新记录</span></a></h5><p>更新一条记录的过程：写之前一定先读</p><ul><li><p>在 B+ 树中定位到该记录，如果该记录所在的页面不在 Buffer Pool 里，先将其加载进内存</p></li><li><p>首先更新该记录对应的聚簇索引，更新聚簇索引记录时：</p><ul><li><p>更新记录前向 undo 页面写 undo 日志，由于这是更改页面，所以需要记录一下相应的 redo 日志</p><p>注意：修改 undo 页面也是在<strong>修改页面</strong>，事务只要修改页面就需要先记录相应的 redo 日志</p></li><li><p>然后<strong>记录对应的 redo 日志</strong>（等待 MTR 提交后写入 redo log buffer），<strong>最后进行真正的更新记录</strong></p></li></ul></li><li><p>更新其他的二级索引记录，不会再记录 undo log，只记录 redo log 到 buffer 中</p></li><li><p>在一条更新语句执行完成后（也就是将所有待更新记录都更新完了），就会开始记录该语句对应的 binlog 日志，此时记录的 binlog 并没有刷新到硬盘上，还在内存中，在事务提交时才会统一将该事务运行过程中的所有 binlog 日志刷新到硬盘</p></li></ul><p>假设表中有字段 id 和 a，存在一条 <code>id = 1, a = 2</code> 的记录，此时执行更新语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>InnoDB 会真正的去执行把值修改成 (1,2) 这个操作，先加行锁，在去更新，并不会提前判断相同就不修改了</p><p>参考文章：https://mp.weixin.qq.com/s/wcJ2KisSaMnfP4nH5NYaQA</p><hr><h5 id="两段提交" tabindex="-1"><a class="header-anchor" href="#两段提交"><span>两段提交</span></a></h5><p>当客户端执行 COMMIT 语句或者在自动提交的情况下，MySQL 内部开启一个 XA 事务，分两阶段来完成 XA 事务的提交：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-update的执行流程.png" style="zoom:33%;"><p>流程说明：执行引擎将这行新数据读入到内存中（Buffer Pool）后，先将此次更新操作记录到 redo log buffer 里，然后更新记录。最后将 redo log 刷盘后事务处于 prepare 状态，执行器会生成这个操作的 binlog，并<strong>把 binlog 写入磁盘</strong>，完成提交</p><p>两阶段：</p><ul><li>Prepare 阶段：存储引擎将该事务的 <strong>redo 日志刷盘</strong>，并且将本事务的状态设置为 PREPARE，代表执行完成随时可以提交事务</li><li>Commit 阶段：先将事务执行过程中产生的 binlog 刷新到硬盘，再执行存储引擎的提交工作，引擎把 redo log 改成提交状态</li></ul><p>存储引擎层的 redo log 和 server 层的 binlog 可以认为是一个分布式事务， 都可以用于表示事务的提交状态，而<strong>两阶段提交就是让这两个状态保持逻辑上的一致</strong>，也有利于主从复制，更好的保持主从数据的一致性</p><hr><h5 id="数据恢复" tabindex="-1"><a class="header-anchor" href="#数据恢复"><span>数据恢复</span></a></h5><p>系统崩溃前没有提交的事务的 redo log 可能已经刷盘（定时线程或者 checkpoint），怎么处理崩溃恢复？</p><p>工作流程：获取 undo 链表首节点页面的 undo segement header 中的 TRX_UNDO_STATE 属性，表示当前链表的事务属性，<strong>事务状态是活跃（未提交）的就全部回滚</strong>，如果是 PREPARE 状态，就需要根据 binlog 的状态进行判断：</p><ul><li>如果在时刻 A 发生了崩溃（crash），由于此时 binlog 还没完成，所以需要进行回滚</li><li>如果在时刻 B 发生了崩溃，redo log 和 binlog 有一个共<strong>同的数据字段叫 XID</strong>，崩溃恢复的时候，会按顺序扫描 redo log： <ul><li>如果 redo log 里面的事务是完整的，也就是已经有了 commit 标识，说明 binlog 也已经记录完整，直接从 redo log 恢复数据</li><li>如果 redo log 里面的事务只有 prepare，就根据 XID 去 binlog 中判断对应的事务是否存在并完整，如果完整可以恢复数据</li></ul></li></ul><p>判断一个事务的 binlog 是否完整的方法：</p><ul><li>statement 格式的 binlog，最后会有 COMMIT</li><li>row 格式的 binlog，最后会有一个 XID event</li><li>MySQL 5.6.2 版本以后，引入了 binlog-checksum 参数用来验证 binlog 内容的正确性（可能日志中间出错）</li></ul><p>参考文章：https://time.geekbang.org/column/article/73161</p><hr><h4 id="刷脏优化" tabindex="-1"><a class="header-anchor" href="#刷脏优化"><span>刷脏优化</span></a></h4><p>系统在进行刷脏时会占用一部分系统资源，会影响系统的性能，<strong>产生系统抖动</strong></p><ul><li>一个查询要淘汰的脏页个数太多，会导致查询的响应时间明显变长</li><li>日志写满，更新全部堵住，写性能跌为 0，这种情况对敏感业务来说，是不能接受的</li></ul><p>InnoDB 刷脏页的控制策略：</p><ul><li><code>innodb_io_capacity</code> 参数代表磁盘的读写能力，建议设置成磁盘的 IOPS（每秒的 IO 次数）</li><li>刷脏速度参考两个因素：脏页比例和 redo log 写盘速度 <ul><li>参数 <code>innodb_max_dirty_pages_pct</code> 是脏页比例上限，默认值是 75%，InnoDB 会根据当前的脏页比例，算出一个范围在 0 到 100 之间的数字</li><li>InnoDB 每次写入的日志都有一个序号，当前写入的序号跟 checkpoint 对应的序号之间的差值，InnoDB 根据差值算出一个范围在 0 到 100 之间的数字</li><li>两者较大的值记为 R，执行引擎按照 innodb_io_capacity 定义的能力乘以 R% 来控制刷脏页的速度</li></ul></li><li><code>innodb_flush_neighbors</code> 参数置为 1 代表控制刷脏时检查相邻的数据页，如果也是脏页就一起刷脏，并检查邻居的邻居，这个行为会一直蔓延直到不是脏页，在 MySQL 8.0 中该值的默认值是 0，不建议开启此功能</li></ul><hr><h3 id="一致特性" tabindex="-1"><a class="header-anchor" href="#一致特性"><span>一致特性</span></a></h3><p>一致性是指事务执行前后，数据库的完整性约束没有被破坏，事务执行的前后都是合法的数据状态。</p><p>数据库的完整性约束包括但不限于：实体完整性（如行的主键存在且唯一）、列完整性（如字段的类型、大小、长度要符合要求）、外键约束、用户自定义完整性（如转账前后，两个账户余额的和应该不变）</p><p>实现一致性的措施：</p><ul><li>保证原子性、持久性和隔离性，如果这些特性无法保证，事务的一致性也无法保证</li><li>数据库本身提供保障，例如不允许向整形列插入字符串值、字符串长度不能超过列的限制等</li><li>应用层面进行保障，例如如果转账操作只扣除转账者的余额，而没有增加接收者的余额，无论数据库实现的多么完美，也无法保证状态的一致</li></ul><hr><h2 id="锁机制" tabindex="-1"><a class="header-anchor" href="#锁机制"><span>锁机制</span></a></h2><h3 id="基本介绍-8" tabindex="-1"><a class="header-anchor" href="#基本介绍-8"><span>基本介绍</span></a></h3><p>锁机制：数据库为了保证数据的一致性，在共享的资源被并发访问时变得安全有序所设计的一种规则</p><p>利用 MVCC 性质进行读取的操作叫<strong>一致性读</strong>，读取数据前加锁的操作叫<strong>锁定读</strong></p><p>锁的分类：</p><ul><li><p>按操作分类：</p><ul><li>共享锁：也叫读锁。对同一份数据，多个事务读操作可以同时加锁而不互相影响 ，但不能修改数据</li><li>排他锁：也叫写锁。当前的操作没有完成前，会阻断其他操作的读取和写入</li></ul></li><li><p>按粒度分类：</p><ul><li>表级锁：会锁定整个表，开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低，偏向 MyISAM</li><li>行级锁：会锁定当前操作行，开销大，加锁慢；会出现死锁；锁定力度小，发生锁冲突概率低，并发度高，偏向 InnoDB</li><li>页级锁：锁的力度、发生冲突的概率和加锁开销介于表锁和行锁之间，会出现死锁，并发性能一般</li></ul></li><li><p>按使用方式分类：</p><ul><li>悲观锁：每次查询数据时都认为别人会修改，很悲观，所以查询时加锁</li><li>乐观锁：每次查询数据时都认为别人不会修改，很乐观，但是更新时会判断一下在此期间别人有没有去更新这个数据</li></ul></li><li><p>不同存储引擎支持的锁</p><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页级锁</th></tr></thead><tbody><tr><td>MyISAM</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td><strong>支持</strong></td><td><strong>支持</strong></td><td>不支持</td></tr><tr><td>MEMORY</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>BDB</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table></li></ul><p>从锁的角度来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如 Web 应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理系统</p><h3 id="全局锁" tabindex="-1"><a class="header-anchor" href="#全局锁"><span>全局锁</span></a></h3><p>​ 全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语 句，已经更新操作的事务提交语句都将被阻塞。 ​ 其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整 性。</p><p>语法</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>flush tables with read lock ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>数据备份</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>mysqldump  -uroot –p123456  itcast &gt; itcast.sql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>释放锁</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>unlock tables ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>数据库中加全局锁，是一个比较重的操作，存在以下问题： 如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。 如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导 致主从延迟。 在InnoDB引擎中，我们可以在备份时加上参数 --single-transaction 参数来完成不加锁的一致 性数据备份。</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>mysqldump  --single-transaction  -uroot –p123456  itcast &gt; itcast.sql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="内存结构" tabindex="-1"><a class="header-anchor" href="#内存结构"><span>内存结构</span></a></h3><p>对一条记录加锁的本质就是<strong>在内存中</strong>创建一个锁结构与之关联，结构包括</p><ul><li>事务信息：锁对应的事务信息，一个锁属于一个事务</li><li>索引信息：对于行级锁，需要记录加锁的记录属于哪个索引</li><li>表锁和行锁信息：表锁记录着锁定的表，行锁记录了 Space ID 所在表空间、Page Number 所在的页号、n_bits 使用了多少比特</li><li>type_mode：一个 32 比特的数，被分成 lock_mode、lock_type、rec_lock_type 三个部分 <ul><li>lock_mode：锁模式，记录是共享锁、排他锁、意向锁之类</li><li>lock_type：代表表级锁还是行级锁</li><li>rec_lock_type：代表行锁的具体类型和 is_waiting 属性，is_waiting = true 时表示当前事务尚未获取到锁，处于等待状态。事务获取锁后的锁结构是 is_waiting 为 false，释放锁时会检查是否与当前记录关联的锁结构，如果有就唤醒对应事务的线程</li></ul></li></ul><p>一个事务可能操作多条记录，为了节省内存，满足下面条件的锁使用同一个锁结构：</p><ul><li>在同一个事务中的加锁操作</li><li>被加锁的记录在同一个页面中</li><li>加锁的类型是一样的</li><li>加锁的状态是一样的</li></ul><hr><h3 id="server" tabindex="-1"><a class="header-anchor" href="#server"><span>Server</span></a></h3><p>MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)</p><p>MDL 叫元数据锁，主要用来保护 MySQL 内部对象的元数据，保证数据读写的正确性，<strong>当对一个表做增删改查的时候，加 MDL 读锁；当要对表做结构变更操作 DDL 的时候，加 MDL 写锁</strong>，两种锁不相互兼容，所以可以保证 DDL、DML、DQL 操作的安全</p><p>说明：DDL 操作执行前会隐式提交当前会话的事务，因为 DDL 一般会在若干个特殊事务中完成，开启特殊事务前需要提交到其他事务</p><p>MDL 锁的特性：</p><ul><li>MDL 锁不需要显式使用，在访问一个表的时候会被自动加上，在事务开始时申请，整个事务提交后释放（执行完单条语句不释放）</li><li>MDL 锁是在 Server 中实现，不是 InnoDB 存储引擎层能直接实现的锁</li><li>MDL 锁还能实现其他粒度级别的锁，比如全局锁、库级别的锁、表空间级别的锁</li></ul><p>FLUSH TABLES WITH READ LOCK 简称（FTWRL），全局读锁，让整个库处于只读状态，DDL DML 都被阻塞，工作流程：</p><ol><li>上全局读锁（lock_global_read_lock）</li><li>清理表缓存（close_cached_tables）</li><li>上全局 COMMIT 锁（make_global_read_lock_block_commit）</li></ol><p>该命令主要用于备份工具做<strong>一致性备份</strong>，由于 FTWRL 需要持有两把全局的 MDL 锁，并且还要关闭所有表对象，因此杀伤性很大</p><hr><h3 id="myisam-1" tabindex="-1"><a class="header-anchor" href="#myisam-1"><span>MyISAM</span></a></h3><h4 id="表级锁" tabindex="-1"><a class="header-anchor" href="#表级锁"><span>表级锁</span></a></h4><p>MyISAM 存储引擎只支持表锁，这也是 MySQL 开始几个版本中唯一支持的锁类型</p><p><strong>元数据锁</strong></p><p>meta data lock , 元数据锁，简写MDL。 MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。MDL锁主要作用是维 护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。为了避免DML与 DDL冲突，保证读写的正确性。 这里的元数据，大家可以简单理解为就是一张表的表结构。 也就是说，某一张表涉及到<strong>未提交的事务</strong> 时，是不能够修改这张表的表结构的。 在MySQL5.5中引入了MDL，当对一张表进行增删改查的时候，加MDL读锁(共享)；当对表结构进行变 更操作的时候，加MDL写锁(排他)。</p><p>MyISAM 引擎在执行查询语句之前，会<strong>自动</strong>给涉及到的所有表加读锁，在执行增删改之前，会<strong>自动</strong>给涉及的表加写锁，这个过程并不需要用户干预，所以用户一般不需要直接用 LOCK TABLE 命令给 MyISAM 表显式加锁</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687097771548.png" alt="1687097771548" tabindex="0" loading="lazy"><figcaption>1687097771548</figcaption></figure><p>查看数据库中的元数据锁的情况：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>select object_type,object_schema,object_name,lock_type,lock_duration from </span></span>
<span class="line"><span>performance_schema.metadata_locks ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>加锁命令：（对 InnoDB 存储引擎也适用）</p><p>读锁：所有连接只能读取数据，不能修改</p><p>写锁：其他连接不能查询和修改数据</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 读锁</span></span>
<span class="line"><span>LOCK TABLE table_name READ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 写锁</span></span>
<span class="line"><span>LOCK TABLE table_name WRITE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>解锁命令：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 将当前会话所有的表进行解锁</span></span>
<span class="line"><span>UNLOCK TABLES;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>锁的兼容性：</p><ul><li>对 MyISAM 表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求</li><li>对 MyISAM 表的写操作，则会阻塞其他用户对同一表的读和写操作</li></ul><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM 锁的兼容性.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>锁调度：<strong>MyISAM 的读写锁调度是写优先</strong>，因为写锁后其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞，所以 MyISAM 不适合做写为主的表的存储引擎</p><hr><h4 id="锁操作" tabindex="-1"><a class="header-anchor" href="#锁操作"><span>锁操作</span></a></h4><h5 id="读锁" tabindex="-1"><a class="header-anchor" href="#读锁"><span>读锁</span></a></h5><p>两个客户端操作 Client 1和 Client 2，简化为 C1、C2</p><ul><li><p>数据准备：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE \`tb_book\` (</span></span>
<span class="line"><span>  \`id\` INT(11) AUTO_INCREMENT,</span></span>
<span class="line"><span>  \`name\` VARCHAR(50) DEFAULT NULL,</span></span>
<span class="line"><span>  \`publish_time\` DATE DEFAULT NULL,</span></span>
<span class="line"><span>  \`status\` CHAR(1) DEFAULT NULL,</span></span>
<span class="line"><span>  PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span>) ENGINE=MYISAM DEFAULT CHARSET=utf8 ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>INSERT INTO tb_book (id, NAME, publish_time, STATUS) VALUES(NULL,&#39;java编程思想&#39;,&#39;2088-08-01&#39;,&#39;1&#39;);</span></span>
<span class="line"><span>INSERT INTO tb_book (id, NAME, publish_time, STATUS) VALUES(NULL,&#39;mysql编程思想&#39;,&#39;2088-08-08&#39;,&#39;0&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>C1、C2 加读锁，同时查询可以正常查询出数据</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>LOCK TABLE tb_book READ;	-- C1、C2</span></span>
<span class="line"><span>SELECT * FROM tb_book;		-- C1、C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM 读锁1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>C1 加读锁，C1、C2 查询未锁定的表，C1 报错，C2 正常查询</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>LOCK TABLE tb_book READ;	-- C1</span></span>
<span class="line"><span>SELECT * FROM tb_user;		-- C1、C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM 读锁2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>C1、C2 执行插入操作，C1 报错，C2 等待获取</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>INSERT INTO tb_book VALUES(NULL,&#39;Spring高级&#39;,&#39;2088-01-01&#39;,&#39;1&#39;);	-- C1、C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM 读锁3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当在 C1 中释放锁指令 UNLOCK TABLES，C2 中的 INSERT 语句立即执行</p></li></ul><hr><h5 id="写锁" tabindex="-1"><a class="header-anchor" href="#写锁"><span>写锁</span></a></h5><p>两个客户端操作 Client 1和 Client 2，简化为 C1、C2</p><ul><li><p>C1 加写锁，C1、C2查询表，C1 正常查询，C2 需要等待</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>LOCK TABLE tb_book WRITE;	-- C1</span></span>
<span class="line"><span>SELECT * FROM tb_book;		-- C1、C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM 写锁1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当在 C1 中释放锁指令 UNLOCK TABLES，C2 中的 SELECT 语句立即执行</p></li><li><p>C1、C2 同时加写锁</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>LOCK TABLE tb_book WRITE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM 写锁2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>C1 加写锁，C1、C2查询未锁定的表，C1 报错，C2 正常查询</p></li></ul><hr><h4 id="锁状态" tabindex="-1"><a class="header-anchor" href="#锁状态"><span>锁状态</span></a></h4><ul><li><p>查看锁竞争：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW OPEN TABLES;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-锁争用情况查看1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>In_user：表当前被查询使用的次数，如果该数为零，则表是打开的，但是当前没有被使用</p><p>Name_locked：表名称是否被锁定，名称锁定用于取消表或对表进行重命名等操作</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>LOCK TABLE tb_book READ;	-- 执行命令</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-锁争用情况查看2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>查看锁状态：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW STATUS LIKE &#39;Table_locks%&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM 锁状态.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Table_locks_immediate：指的是能立即获得表级锁的次数，每立即获取锁，值加 1</p><p>Table_locks_waited：指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加 1，此值高说明存在着较为严重的表级锁争用情况</p></li></ul><hr><h3 id="innodb-1" tabindex="-1"><a class="header-anchor" href="#innodb-1"><span>InnoDB</span></a></h3><h4 id="行级锁" tabindex="-1"><a class="header-anchor" href="#行级锁"><span>行级锁</span></a></h4><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在 InnoDB存储引擎中。 InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的 锁。对于行级锁，主要分为以下三类： 行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete。在 RC、RR隔离级别下都支持。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687173958031.png" alt="1687173958031" tabindex="0" loading="lazy"><figcaption>1687173958031</figcaption></figure><p>间隙锁（Gap Lock）：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事 务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持。<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687173976336.png" alt="1687173976336" loading="lazy"></p><p>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。 在RR隔离级别下支持。<img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687173999332.png" alt="1687173999332" loading="lazy"></p><h5 id="记录锁" tabindex="-1"><a class="header-anchor" href="#记录锁"><span>记录锁</span></a></h5><p>InnoDB 与 MyISAM 的最大不同有两点：一是支持事务；二是采用了行级锁，<strong>InnoDB 同时支持表锁和行锁</strong></p><p>行级锁，也称为记录锁（Record Lock），InnoDB 实现了以下两种类型的行锁：</p><ul><li>共享锁 (S)：又称为读锁，简称 S 锁，多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改</li><li>排他锁 (X)：又称为写锁，简称 X 锁，不能与其他锁并存，获取排他锁的事务是可以对数据读取和修改</li></ul><p>RR 隔离界别下，对于 UPDATE、DELETE 和 INSERT 语句，InnoDB 会<strong>自动给涉及数据集加排他锁</strong>（行锁），在 commit 时自动释放；对于普通 SELECT 语句，不会加任何锁（只是针对 InnoDB 层来说的，因为在 Server 层会<strong>加 MDL 读锁</strong>），通过 MVCC 防止并发冲突</p><p>在事务中加的锁，并不是不需要了就释放，而是在事务中止或提交时自动释放，这个就是<strong>两阶段锁协议</strong>。所以一般将更新共享资源（并发高）的 SQL 放到事务的最后执行，可以让其他线程尽量的减少等待时间</p><p>锁的兼容性：</p><ul><li><p>共享锁和共享锁 兼容</p></li><li><p>共享锁和排他锁 冲突</p></li><li><p>排他锁和排他锁 冲突</p></li><li><p>排他锁和共享锁 冲突</p><p>常见的SQL语句，在执行时，所加的行锁如下：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687174241521.png" alt="1687174241521" tabindex="0" loading="lazy"><figcaption>1687174241521</figcaption></figure></li></ul><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜 索和索引扫描，以防止幻读。 针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。 InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记 录加锁，此时 就会<strong>升级为表锁</strong>。</p><p>显式给数据集加共享锁或排他锁：<strong>加锁读就是当前读，读取的是最新数据</strong></p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE	-- 共享锁</span></span>
<span class="line"><span>SELECT * FROM table_name WHERE ... FOR UPDATE			-- 排他锁</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<strong>锁默认会锁聚簇索引（锁就是加在索引上）</strong>，但是当使用覆盖索引时，加共享锁只锁二级索引，不锁聚簇索引</p><hr><h5 id="锁操作-1" tabindex="-1"><a class="header-anchor" href="#锁操作-1"><span>锁操作</span></a></h5><p>两个客户端操作 Client 1和 Client 2，简化为 C1、C2</p><ul><li><p>环境准备</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE test_innodb_lock(</span></span>
<span class="line"><span>	id INT(11),</span></span>
<span class="line"><span>	name VARCHAR(16),</span></span>
<span class="line"><span>	sex VARCHAR(1)</span></span>
<span class="line"><span>)ENGINE = INNODB DEFAULT CHARSET=utf8;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>INSERT INTO test_innodb_lock VALUES(1,&#39;100&#39;,&#39;1&#39;);</span></span>
<span class="line"><span>-- ..........</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE INDEX idx_test_innodb_lock_id ON test_innodb_lock(id);</span></span>
<span class="line"><span>CREATE INDEX idx_test_innodb_lock_name ON test_innodb_lock(name);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>关闭自动提交功能：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET AUTOCOMMIT=0;	-- C1、C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>正常查询数据：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM test_innodb_lock;	-- C1、C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查询 id 为 3 的数据，正常查询：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM test_innodb_lock WHERE id=3;	-- C1、C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB 锁操作1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>C1 更新 id 为 3 的数据，但不提交：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>UPDATE test_innodb_lock SET name=&#39;300&#39; WHERE id=3;	-- C1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB 锁操作2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>C2 查询不到 C1 修改的数据，因为隔离界别为 REPEATABLE READ，C1 提交事务，C2 查询：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>COMMIT;	-- C1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB 锁操作3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>提交后仍然查询不到 C1 修改的数据，因为隔离级别可以防止脏读、不可重复读，所以 C2 需要提交才可以查询到其他事务对数据的修改：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>COMMIT;	-- C2</span></span>
<span class="line"><span>SELECT * FROM test_innodb_lock WHERE id=3;	-- C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB 锁操作4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>C1 更新 id 为 3 的数据，但不提交，C2 也更新 id 为 3 的数据：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>UPDATE test_innodb_lock SET name=&#39;3&#39; WHERE id=3;	-- C1</span></span>
<span class="line"><span>UPDATE test_innodb_lock SET name=&#39;30&#39; WHERE id=3;	-- C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB 锁操作5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当 C1 提交，C2 直接解除阻塞，直接更新</p></li><li><p>操作不同行的数据：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>UPDATE test_innodb_lock SET name=&#39;10&#39; WHERE id=1;	-- C1</span></span>
<span class="line"><span>UPDATE test_innodb_lock SET name=&#39;30&#39; WHERE id=3;	-- C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB 锁操作6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于 C1、C2 操作的不同行，获取不同的行锁，所以都可以正常获取行锁</p></li></ul><hr><h4 id="锁分类" tabindex="-1"><a class="header-anchor" href="#锁分类"><span>锁分类</span></a></h4><h5 id="间隙锁" tabindex="-1"><a class="header-anchor" href="#间隙锁"><span>间隙锁</span></a></h5><p>InnoDB 会对间隙（GAP）进行加锁，就是间隙锁 （RR 隔离级别下才有该锁）。间隙锁之间不存在冲突关系，<strong>多个事务可以同时对一个间隙加锁</strong>，但是间隙锁会阻止往这个间隙中插入一个记录的操作</p><p>InnoDB 加锁的基本单位是 next-key lock，该锁是行锁和 gap lock 的组合（X or S 锁），但是加锁过程是分为间隙锁和行锁两段执行</p><ul><li>可以<strong>保护当前记录和前面的间隙</strong>，遵循左开右闭原则，单纯的间隙锁是左开右开</li><li>假设有 10、11、13，那么可能的间隙锁包括：(负无穷,10]、(10,11]、(11,13]、(13,正无穷)</li></ul><p>几种索引的加锁情况：</p><ul><li>唯一索引加锁在值存在时是行锁，next-key lock 会退化为行锁，值不存在会变成间隙锁</li><li>普通索引加锁会继续向右遍历到不满足条件的值为止，next-key lock 退化为间隙锁</li><li>范围查询无论是否是唯一索引，都需要访问到不满足条件的第一个值为止</li><li>对于联合索引且是唯一索引，如果 where 条件只包括联合索引的一部分，那么会加间隙锁</li></ul><p>间隙锁优点：RR 级别下间隙锁可以<strong>解决事务的一部分的幻读问题</strong>，通过对间隙加锁，可以防止读取过程中数据条目发生变化。一部分的意思是不会对全部间隙加锁，只能加锁一部分的间隙</p><p>间隙锁危害：</p><ul><li>当锁定一个范围的键值后，即使某些不存在的键值也会被无辜的锁定，造成在锁定的时候无法插入锁定键值范围内的任何数据，在某些场景下这可能会对性能造成很大的危害，影响并发度</li><li>事务 A B 同时锁住一个间隙后，A 往当前间隙插入数据时会被 B 的间隙锁阻塞，B 也执行插入间隙数据的操作时就会<strong>产生死锁</strong></li></ul><p>现场演示：</p><ul><li><p>关闭自动提交功能：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET AUTOCOMMIT=0;	-- C1、C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查询数据表：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM test_innodb_lock;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB 间隙锁1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>C1 根据 id 范围更新数据，C2 插入数据：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>UPDATE test_innodb_lock SET name=&#39;8888&#39; WHERE id &lt; 4;	-- C1</span></span>
<span class="line"><span>INSERT INTO test_innodb_lock VALUES(2,&#39;200&#39;,&#39;2&#39;);		-- C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB 间隙锁2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>出现间隙锁，C2 被阻塞，等待 C1 提交事务后才能更新</p></li></ul><hr><h5 id="意向锁" tabindex="-1"><a class="header-anchor" href="#意向锁"><span>意向锁</span></a></h5><p>InnoDB 为了支持多粒度的加锁，允许行锁和表锁同时存在，支持在不同粒度上的加锁操作，InnoDB 增加了意向锁（Intention Lock）</p><p>意向锁是将锁定的对象分为多个层次，意向锁意味着事务希望在更细粒度上进行加锁，意向锁分为两种：</p><ul><li>意向共享锁（IS）：事务有意向对表加共享锁，与表锁共享锁（read）兼容，与表锁排他锁（write）互斥。</li><li>意向排他锁（IX）：事务有意向对表加排他锁，与表锁共享锁（read）及排他锁（write）都互斥。意向锁之间不会相互排斥。</li></ul><p><strong>IX，IS 是表级锁</strong>，不会和行级的 X，S 锁发生冲突，意向锁是在加表级锁之前添加，为了在加表级锁时可以快速判断表中是否有记录被上锁，比如向一个表添加表级 X 锁的时：</p><ul><li>没有意向锁，则需要遍历整个表判断是否有锁定的记录</li><li>有了意向锁，首先判断是否存在意向锁，然后判断该意向锁与即将添加的表级锁是否兼容即可，因为意向锁的存在代表有表级锁的存在或者即将有表级锁的存在</li></ul><p>兼容性如下所示：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-意向锁兼容性.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>插入意向锁</strong> Insert Intention Lock 是在插入一行记录操作之前设置的一种间隙锁，是行级锁</p><p>插入意向锁释放了一种插入信号，即多个事务在相同的索引间隙插入时如果不是插入相同的间隙位置就不需要互相等待。假设某列有索引，只要两个事务插入位置不同，如事务 A 插入 3，事务 B 插入 4，那么就可以同时插入</p><hr><h5 id="自增锁" tabindex="-1"><a class="header-anchor" href="#自增锁"><span>自增锁</span></a></h5><p>系统会自动给 AUTO_INCREMENT 修饰的列进行递增赋值，实现方式：</p><ul><li>AUTO_INC 锁：表级锁，执行插入语句时会自动添加，在该语句执行完成后释放，并不是事务结束</li><li>轻量级锁：为插入语句生成 AUTO_INCREMENT 修饰的列时获取该锁，生成以后释放掉，不需要等到插入语句执行完后释放</li></ul><p>系统变量 <code>innodb_autoinc_lock_mode</code> 控制采取哪种方式：</p><ul><li>0：全部采用 AUTO_INC 锁</li><li>1：全部采用轻量级锁</li><li>2：混合使用，在插入记录的数量确定时采用轻量级锁，不确定时采用 AUTO_INC 锁</li></ul><hr><h5 id="隐式锁" tabindex="-1"><a class="header-anchor" href="#隐式锁"><span>隐式锁</span></a></h5><p>一般情况下 INSERT 语句是不需要在内存中生成锁结构的，会进行隐式的加锁，保护的是插入后的安全</p><p>注意：如果插入的间隙被其他事务加了间隙锁，此次插入会被阻塞，并在该间隙插入一个插入意向锁</p><ul><li>聚簇索引：索引记录有 trx_id 隐藏列，表示最后改动该记录的事务 id，插入数据后事务 id 就是当前事务。其他事务想获取该记录的锁时会判断当前记录的事务 id 是否是活跃的，如果不是就可以正常加锁；如果是就创建一个 X 的锁结构，该锁的 is_waiting 是 false，为自己的事务创建一个锁结构，is_waiting 是 true（类似 Java 中的锁升级）</li><li>二级索引：获取数据页 Page Header 中的 PAGE_MAX_TRX_ID 属性，代表修改当前页面的最大的事务 ID，如果小于当前活跃的最小事务 id，就证明插入该数据的事务已经提交，否则就需要获取到主键值进行回表操作</li></ul><p>隐式锁起到了延迟生成锁的效果，如果其他事务与隐式锁没有冲突，就可以避免锁结构的生成，节省了内存资源</p><p>INSERT 在两种情况下会生成锁结构：</p><ul><li>重复键：在插入主键或唯一二级索引时遇到重复的键值会报错，在报错前需要对对应的聚簇索引进行加锁 <ul><li>隔离级别 &lt;= Read Uncommitted，加 S 型 Record Lock</li><li>隔离级别 &gt;= Repeatable Read，加 S 型 next_key 锁</li></ul></li><li>外键检查：如果待插入的记录在父表中可以找到，会对父表的记录加 S 型 Record Lock。如果待插入的记录在父表中找不到 <ul><li>隔离级别 &lt;= Read Committed，不加锁</li><li>隔离级别 &gt;= Repeatable Read，加间隙锁</li></ul></li></ul><hr><h4 id="锁优化" tabindex="-1"><a class="header-anchor" href="#锁优化"><span>锁优化</span></a></h4><h5 id="优化锁" tabindex="-1"><a class="header-anchor" href="#优化锁"><span>优化锁</span></a></h5><p>InnoDB 存储引擎实现了行级锁定，虽然在锁定机制的实现方面带来了性能损耗可能比表锁会更高，但是在整体并发处理能力方面要远远优于 MyISAM 的表锁，当系统并发量较高的时候，InnoDB 的整体性能远远好于 MyISAM</p><p>但是使用不当可能会让 InnoDB 的整体性能表现不仅不能比 MyISAM 高，甚至可能会更差</p><p>优化建议：</p><ul><li>尽可能让所有数据检索都能通过索引来完成，避免无索引行锁升级为表锁</li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能减少索引条件及索引范围，避免间隙锁</li><li>尽量控制事务大小，减少锁定资源量和时间长度</li><li>尽可使用低级别事务隔离（需要业务层面满足需求）</li></ul><hr><h5 id="锁升级" tabindex="-1"><a class="header-anchor" href="#锁升级"><span>锁升级</span></a></h5><p>索引失效造成<strong>行锁升级为表锁</strong>，不通过索引检索数据，全局扫描的过程中 InnoDB 会将对表中的所有记录加锁，实际效果和<strong>表锁</strong>一样，实际开发过程应避免出现索引失效的状况</p><ul><li><p>查看当前表的索引：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW INDEX FROM test_innodb_lock;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>关闭自动提交功能：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET AUTOCOMMIT=0;	-- C1、C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>执行更新语句：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>UPDATE test_innodb_lock SET sex=&#39;2&#39; WHERE name=10;	-- C1</span></span>
<span class="line"><span>UPDATE test_innodb_lock SET sex=&#39;2&#39; WHERE id=3;		-- C2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB 锁升级.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>索引失效：执行更新时 name 字段为 varchar 类型，造成索引失效，最终行锁变为表锁</p></li></ul><hr><h5 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h5><p>不同事务由于互相持有对方需要的锁而导致事务都无法继续执行的情况称为死锁</p><p>死锁情况：线程 A 修改了 id = 1 的数据，请求修改 id = 2 的数据，线程 B 修改了 id = 2 的数据，请求修改 id = 1 的数据，产生死锁</p><p>解决策略：</p><ul><li><p>直接进入等待直到超时，超时时间可以通过参数 innodb_lock_wait_timeout 来设置，默认 50 秒，但是时间的设置不好控制，超时可能不是因为死锁，而是因为事务处理比较慢，所以一般不采取该方式</p></li><li><p>主动死锁检测，发现死锁后<strong>主动回滚死锁链条中较小的一个事务</strong>，让其他事务得以继续执行，将参数 <code>innodb_deadlock_detect</code> 设置为 on，表示开启该功能（事务较小的意思就是事务执行过程中插入、删除、更新的记录条数）</p><p>死锁检测并不是每个语句都要检测，只有在加锁访问的行上已经有锁时，当前事务被阻塞了才会检测，也是从当前事务开始进行检测</p></li></ul><p>通过执行 <code>SHOW ENGINE INNODB STATUS</code> 可以查看最近发生的一次死循环，全局系统变量 <code>innodb_print_all_deadlocks</code> 设置为 on，就可以将每个死锁信息都记录在 MySQL 错误日志中</p><p>死锁一般是行级锁，当表锁发生死锁时，会在事务中访问其他表时<strong>直接报错</strong>，破坏了持有并等待的死锁条件</p><hr><h4 id="锁状态-1" tabindex="-1"><a class="header-anchor" href="#锁状态-1"><span>锁状态</span></a></h4><p>查看锁信息</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW STATUS LIKE &#39;innodb_row_lock%&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB 锁争用.png" style="zoom:80%;"><p>参数说明：</p><ul><li>Innodb_row_lock_current_waits：当前正在等待锁定的数量</li><li>Innodb_row_lock_time：从系统启动到现在锁定总时间长度</li><li>Innodb_row_lock_time_avg：每次等待所花平均时长</li><li>Innodb_row_lock_time_max：从系统启动到现在等待最长的一次所花的时间</li><li>Innodb_row_lock_waits：系统启动后到现在总共等待的次数</li></ul><p>当等待的次数很高，而且每次等待的时长也不短的时候，就需要分析系统中为什么会有如此多的等待，然后根据分析结果制定优化计划</p><p>查看锁状态：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM information_schema.innodb_locks;	#锁的概况</span></span>
<span class="line"><span>SHOW ENGINE INNODB STATUS\\G; #InnoDB整体状态，其中包括锁的情况</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB查看锁状态.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>lock_id 是锁 id；lock_trx_id 为事务 id；lock_mode 为 X 代表排它锁（写锁）；lock_type 为 RECORD 代表锁为行锁（记录锁）</p><hr><h3 id="乐观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁"><span>乐观锁</span></a></h3><p>悲观锁：在整个数据处理过程中，将数据处于锁定状态，为了保证事务的隔离性，就需要一致性锁定读。读取数据时给加锁，其它事务无法修改这些数据，修改删除数据时也加锁，其它事务同样无法读取这些数据</p><p>悲观锁和乐观锁使用前提：</p><ul><li>对于读的操作远多于写的操作的时候，一个更新操作加锁会阻塞所有的读取操作，降低了吞吐量，最后需要释放锁，锁是需要一些开销的，这时候可以选择乐观锁</li><li>如果是读写比例差距不是非常大或者系统没有响应不及时，吞吐量瓶颈的问题，那就不要去使用乐观锁，它增加了复杂度，也带来了业务额外的风险，这时候可以选择悲观锁</li></ul><p>乐观锁的实现方式：就是 CAS，比较并交换</p><ul><li><p>版本号</p><ol><li><p>给数据表中添加一个 version 列，每次更新后都将这个列的值加 1</p></li><li><p>读取数据时，将版本号读取出来，在执行更新的时候，比较版本号</p></li><li><p>如果相同则执行更新，如果不相同，说明此条数据已经发生了变化</p></li><li><p>用户自行根据这个通知来决定怎么处理，比如重新开始一遍，或者放弃本次更新</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建city表</span></span>
<span class="line"><span>CREATE TABLE city(</span></span>
<span class="line"><span>	id INT PRIMARY KEY AUTO_INCREMENT,  -- 城市id</span></span>
<span class="line"><span>	NAME VARCHAR(20),                   -- 城市名称</span></span>
<span class="line"><span>	VERSION INT                         -- 版本号</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 添加数据</span></span>
<span class="line"><span>INSERT INTO city VALUES (NULL,&#39;北京&#39;,1),(NULL,&#39;上海&#39;,1),(NULL,&#39;广州&#39;,1),(NULL,&#39;深圳&#39;,1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 修改北京为北京市</span></span>
<span class="line"><span>-- 1.查询北京的version</span></span>
<span class="line"><span>SELECT VERSION FROM city WHERE NAME=&#39;北京&#39;;</span></span>
<span class="line"><span>-- 2.修改北京为北京市，版本号+1。并对比版本号</span></span>
<span class="line"><span>UPDATE city SET NAME=&#39;北京市&#39;,VERSION=VERSION+1 WHERE NAME=&#39;北京&#39; AND VERSION=1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>时间戳</p><ul><li>和版本号方式基本一样，给数据表中添加一个列，名称无所谓，数据类型需要是 <strong>timestamp</strong></li><li>每次更新后都将最新时间插入到此列</li><li>读取数据时，将时间读取出来，在执行更新的时候，比较时间</li><li>如果相同则执行更新，如果不相同，说明此条数据已经发生了变化</li></ul></li></ul><p>乐观锁的异常情况：如果 version 被其他事务抢先更新，则在当前事务中更新失败，trx_id 没有变成当前事务的 ID，当前事务再次查询还是旧值，就会出现<strong>值没变但是更新不了</strong>的现象（anomaly）</p><p>解决方案：每次 CAS 更新不管成功失败，就结束当前事务；如果失败则重新起一个事务进行查询更新</p><hr><h2 id="主从" tabindex="-1"><a class="header-anchor" href="#主从"><span>主从</span></a></h2><h3 id="基本介绍-9" tabindex="-1"><a class="header-anchor" href="#基本介绍-9"><span>基本介绍</span></a></h3><p>主从复制是指将主数据库的 DDL 和 DML 操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步</p><p>MySQL 支持一台主库同时向多台从库进行复制，从库同时也可以作为其他从服务器的主库，实现链状复制</p><p>MySQL 复制的优点主要包含以下三个方面：</p><ul><li>主库出现问题，可以快速切换到从库提供服务</li><li>可以在从库上执行查询操作，从主库中更新，实现读写分离</li><li>可以在从库中执行备份，以避免备份期间影响主库的服务（备份时会加全局读锁）</li></ul><hr><h3 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制"><span>主从复制</span></a></h3><h4 id="主从结构" tabindex="-1"><a class="header-anchor" href="#主从结构"><span>主从结构</span></a></h4><p>MySQL 的主从之间维持了一个<strong>长连接</strong>。主库内部有一个线程，专门用于服务从库的长连接，连接过程：</p><ul><li>从库执行 change master 命令，设置主库的 IP、端口、用户名、密码以及要从哪个位置开始请求 binlog，这个位置包含文件名和日志偏移量</li><li>从库执行 start slave 命令，这时从库会启动两个线程，就是图中的 io_thread 和 sql_thread，其中 io_thread 负责与主库建立连接</li><li>主库校验完用户名、密码后，开始按照从传过来的位置，从本地读取 binlog 发给从库，开始主从复制</li></ul><p>主从复制原理图：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-主从复制原理图.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>主从复制主要依赖的是 binlog，MySQL 默认是异步复制，需要三个线程：</p><ul><li>binlog thread：在主库事务提交时，把数据变更记录在日志文件 binlog 中，并通知 slave 有数据更新</li><li>I/O thread：负责从主服务器上<strong>拉取二进制日志</strong>，并将 binlog 日志内容依次写到 relay log 中转日志的最末端，并将新的 binlog 文件名和 offset 记录到 master-info 文件中，以便下一次读取日志时从指定 binlog 日志文件及位置开始读取新的 binlog 日志内容</li><li>SQL thread：监测本地 relay log 中新增了日志内容，读取中继日志并重做其中的 SQL 语句，从库在 relay-log.info 中记录当前应用中继日志的文件名和位点以便下一次执行</li></ul><p>同步与异步：</p><ul><li>异步复制有数据丢失风险，例如数据还未同步到从库，主库就给客户端响应，然后主库挂了，此时从库晋升为主库的话数据是缺失的</li><li>同步复制，主库需要将 binlog 复制到所有从库，等所有从库响应了之后主库才进行其他逻辑，这样的话性能很差，一般不会选择</li><li>MySQL 5.7 之后出现了半同步复制，有参数可以选择成功同步几个从库就返回响应</li></ul><hr><h4 id="主主结构" tabindex="-1"><a class="header-anchor" href="#主主结构"><span>主主结构</span></a></h4><p>主主结构就是两个数据库之间总是互为主从关系，这样在切换的时候就不用再修改主从关系</p><p>循环复制：在库 A 上更新了一条语句，然后把生成的 binlog 发给库 B，库 B 执行完这条更新语句后也会生成 binlog，会再发给 A</p><p>解决方法：</p><ul><li>两个库的 server id 必须不同，如果相同则它们之间不能设定为主主关系</li><li>一个库接到 binlog 并在重放的过程中，生成与原 binlog 的 server id 相同的新的 binlog</li><li>每个库在收到从主库发过来的日志后，先判断 server id，如果跟自己的相同，表示这个日志是自己生成的，就直接丢弃这个日志</li></ul><hr><h3 id="主从延迟" tabindex="-1"><a class="header-anchor" href="#主从延迟"><span>主从延迟</span></a></h3><h4 id="延迟原因" tabindex="-1"><a class="header-anchor" href="#延迟原因"><span>延迟原因</span></a></h4><p>正常情况主库执行更新生成的所有 binlog，都可以传到从库并被正确地执行，从库就能达到跟主库一致的状态，这就是最终一致性</p><p>主从延迟是主从之间是存在一定时间的数据不一致，就是同一个事务在从库执行完成的时间和主库执行完成的时间的差值，即 T2-T1</p><ul><li>主库 A 执行完成一个事务，写入 binlog，该时刻记为 T1</li><li>日志传给从库 B，从库 B 执行完这个事务，该时刻记为 T2</li></ul><p>通过在从库执行 <code>show slave status</code> 命令，返回结果会显示 seconds_behind_master 表示当前从库延迟了多少秒</p><ul><li>每一个事务的 binlog 都有一个时间字段，用于记录主库上写入的时间</li><li>从库取出当前正在执行的事务的时间字段，跟系统的时间进行相减，得到的就是 seconds_behind_master</li></ul><p>主从延迟的原因：</p><ul><li>从库的机器性能比主库的差，导致从库的复制能力弱</li><li>从库的查询压力大，建立一主多从的结构</li><li>大事务的执行，主库必须要等到事务完成之后才会写入 binlog，导致从节点出现应用 binlog 延迟</li><li>主库的 DDL，从库与主库的 DDL 同步是串行进行，DDL 在主库执行时间很长，那么从库也会消耗同样的时间</li><li>锁冲突问题也可能导致从节点的 SQL 线程执行慢</li></ul><p>主从同步问题永远都是<strong>一致性和性能的权衡</strong>，需要根据实际的应用场景，可以采取下面的办法：</p><ul><li>优化 SQL，避免慢 SQL，减少批量操作</li><li>降低多线程大事务并发的概率，优化业务逻辑</li><li>业务中大多数情况查询操作要比更新操作更多，搭建<strong>一主多从</strong>结构，让这些从库来分担读的压力</li><li>尽量采用短的链路，主库和从库服务器的距离尽量要短，提升端口带宽，减少 binlog 传输的网络延时</li><li>实时性要求高的业务读强制走主库，从库只做备份</li></ul><hr><h4 id="并行复制" tabindex="-1"><a class="header-anchor" href="#并行复制"><span>并行复制</span></a></h4><h5 id="mysql5-6" tabindex="-1"><a class="header-anchor" href="#mysql5-6"><span>MySQL5.6</span></a></h5><p>高并发情况下，主库的会产生大量的 binlog，在从库中有两个线程 IO Thread 和 SQL Thread 单线程执行，会导致主库延迟变大。为了改善复制延迟问题，MySQL 5.6 版本增加了并行复制功能，以采用多线程机制来促进执行</p><p>coordinator 就是原来的 SQL Thread，并行复制中它不再直接更新数据，<strong>只负责读取中转日志和分发事务</strong>：</p><ul><li>线程分配完成并不是立即执行，为了防止造成更新覆盖，更新同一 DB 的两个事务必须被分发到同一个工作线程</li><li>同一个事务不能被拆开，必须放到同一个工作线程</li></ul><p>MySQL 5.6 版本的策略：每个线程对应一个 hash 表，用于保存当前这个线程的执行队列里的事务所涉及的表，hash 表的 key 是数据库名，value 是一个数字，表示队列中有多少个事务修改这个库，适用于主库上有多个 DB 的情况</p><p>每个事务在分发的时候，跟线程的<strong>冲突</strong>（事务操作的是同一个库）关系包括以下三种情况：</p><ul><li>如果跟所有线程都不冲突，coordinator 线程就会把这个事务分配给最空闲的线程</li><li>如果只跟一个线程冲突，coordinator 线程就会把这个事务分配给这个存在冲突关系的线程</li><li>如果跟多于一个线程冲突，coordinator 线程就进入等待状态，直到和这个事务存在冲突关系的线程只剩下 1 个</li></ul><p>优缺点：</p><ul><li>构造 hash 值的时候很快，只需要库名，而且一个实例上 DB 数也不会很多，不会出现需要构造很多项的情况</li><li>不要求 binlog 的格式，statement 格式的 binlog 也可以很容易拿到库名（日志章节详解了 binlog）</li><li>主库上的表都放在同一个 DB 里面，这个策略就没有效果了；或者不同 DB 的热点不同，比如一个是业务逻辑库，一个是系统配置库，那也起不到并行的效果，需要<strong>把相同热度的表均匀分到这些不同的 DB 中</strong>，才可以使用这个策略</li></ul><hr><h5 id="mysql5-7" tabindex="-1"><a class="header-anchor" href="#mysql5-7"><span>MySQL5.7</span></a></h5><p>MySQL 5.7 由参数 slave-parallel-type 来控制并行复制策略：</p><ul><li>配置为 DATABASE，表示使用 MySQL 5.6 版本的<strong>按库（DB）并行策略</strong></li><li>配置为 LOGICAL_CLOCK，表示的<strong>按提交状态并行</strong>执行</li></ul><p>按提交状态并行复制策略的思想是：</p><ul><li>所有处于 commit 状态的事务可以并行执行；同时处于 prepare 状态的事务，在从库执行时是可以并行的</li><li>处于 prepare 状态的事务，与处于 commit 状态的事务之间，在从库执行时也是可以并行的</li></ul><p>MySQL 5.7.22 版本里，MySQL 增加了一个新的并行复制策略，基于 WRITESET 的并行复制，新增了一个参数 binlog-transaction-dependency-tracking，用来控制是否启用这个新策略：</p><ul><li><p>COMMIT_ORDER：表示根据同时进入 prepare 和 commit 来判断是否可以并行的策略</p></li><li><p>WRITESET：表示的是对于每个事务涉及更新的每一行，计算出这一行的 hash 值，组成该事务的 writeset 集合，如果两个事务没有操作相同的行，也就是说它们的 writeset 没有交集，就可以并行（<strong>按行并行</strong>）</p><p>为了唯一标识，这个 hash 表的值是通过 <code>库名 + 表名 + 索引名 + 值</code>（表示的是某一行）计算出来的</p></li><li><p>WRITESET_SESSION：是在 WRITESET 的基础上多了一个约束，即在主库上同一个线程先后执行的两个事务，在备库执行的时候，要保证相同的先后顺序</p></li></ul><p>MySQL 5.7.22 按行并发的优势：</p><ul><li>writeset 是在主库生成后直接写入到 binlog 里面的，这样在备库执行的时候，不需要解析 binlog 内容，节省了计算量</li><li>不需要把整个事务的 binlog 都扫一遍才能决定分发到哪个线程，更省内存</li><li>从库的分发策略不依赖于 binlog 内容，所以 binlog 是 statement 格式也可以，更节约内存（因为 row 才记录更改的行）</li></ul><p>MySQL 5.7.22 的并行复制策略在通用性上是有保证的，但是对于表上没主键、唯一和外键约束的场景，WRITESET 策略也是没法并行的，也会暂时退化为单线程模型</p><p>参考文章：https://time.geekbang.org/column/article/77083</p><hr><h3 id="读写分离" tabindex="-1"><a class="header-anchor" href="#读写分离"><span>读写分离</span></a></h3><h4 id="读写延迟" tabindex="-1"><a class="header-anchor" href="#读写延迟"><span>读写延迟</span></a></h4><p>读写分离：可以降低主库的访问压力，提高系统的并发能力</p><ul><li>主库不建查询的索引，从库建查询的索引。因为索引需要维护的，比如插入一条数据，不仅要在聚簇索引上面插入，对应的二级索引也得插入</li><li>将读操作分到从库了之后，可以在主库把查询要用的索引删了，减少写操作对主库的影响</li></ul><p>读写分离产生了读写延迟，造成数据的不一致性。假如客户端执行完一个更新事务后马上发起查询，如果查询选择的是从库的话，可能读到的还是以前的数据，叫过期读</p><p>解决方案：</p><ul><li>强制将写之后<strong>立刻读的操作转移到主库</strong>，比如刚注册的用户，直接登录从库查询可能查询不到，先走主库登录</li><li><strong>二次查询</strong>，如果从库查不到数据，则再去主库查一遍，由 API 封装，比较简单，但导致主库压力大</li><li>更新主库后，读从库之前先 sleep 一下，类似于执行一条 <code>select sleep(1)</code> 命令，大多数情况下主备延迟在 1 秒之内</li></ul><hr><h4 id="确保机制" tabindex="-1"><a class="header-anchor" href="#确保机制"><span>确保机制</span></a></h4><h5 id="无延迟" tabindex="-1"><a class="header-anchor" href="#无延迟"><span>无延迟</span></a></h5><p>确保主备无延迟的方法：</p><ul><li>每次从库执行查询请求前，先判断 seconds_behind_master 是否已经等于 0，如果不等于那就等到参数变为 0 执行查询请求</li><li>对比位点，Master_Log_File 和 Read_Master_Log_Pos 表示的是读到的主库的最新位点，Relay_Master_Log_File 和 Exec_Master_Log_Pos 表示的是备库执行的最新位点，这两组值完全相同就说明接收到的日志已经同步完成</li><li>对比 GTID 集合，Retrieved_Gtid_Set 是备库收到的所有日志的 GTID 集合，Executed_Gtid_Set 是备库所有已经执行完成的 GTID 集合，如果这两个集合相同也表示备库接收到的日志都已经同步完成</li></ul><hr><h5 id="半同步" tabindex="-1"><a class="header-anchor" href="#半同步"><span>半同步</span></a></h5><p>半同步复制就是 semi-sync replication，适用于一主一备的场景，工作流程：</p><ul><li>事务提交的时候，主库把 binlog 发给从库</li><li>从库收到 binlog 以后，发回给主库一个 ack，表示收到了</li><li>主库收到这个 ack 以后，才能给客户端返回事务完成的确认</li></ul><p>在一主多从场景中，主库只要等到一个从库的 ack，就开始给客户端返回确认，这时在从库上执行查询请求，有两种情况：</p><ul><li>如果查询是落在这个响应了 ack 的从库上，是能够确保读到最新数据</li><li>如果查询落到其他从库上，它们可能还没有收到最新的日志，就会产生过期读的问题</li></ul><p>在业务更新的高峰期，主库的位点或者 GTID 集合更新很快，导致从库来不及处理，那么两个位点等值判断就会一直不成立，很可能出现从库上迟迟无法响应查询请求的情况</p><hr><h5 id="等位点" tabindex="-1"><a class="header-anchor" href="#等位点"><span>等位点</span></a></h5><p>在<strong>从库执行判断位点</strong>的命令，参数 file 和 pos 指的是主库上的文件名和位置，timeout 可选，设置为正整数 N 表示最多等待 N 秒</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT master_pos_wait(file, pos[, timeout]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令正常返回的结果是一个正整数 M，表示从命令开始执行，到应用完 file 和 pos 表示的 binlog 位置，执行了多少事务</p><ul><li>如果执行期间，备库同步线程发生异常，则返回 NULL</li><li>如果等待超过 N 秒，就返回 -1</li><li>如果刚开始执行的时候，就发现已经执行过这个位置了，则返回 0</li></ul><p>工作流程：先执行 trx1，再执行一个查询请求的逻辑，要<strong>保证能够查到正确的数据</strong></p><ul><li>trx1 事务更新完成后，马上执行 <code>show master status</code> 得到当前主库执行到的 File 和 Position</li><li>选定一个从库执行判断位点语句，如果返回值是 &gt;=0 的正整数，说明从库已经同步完事务，可以在这个从库执行查询语句</li><li>如果出现其他情况，需要到主库执行查询语句</li></ul><p>注意：如果所有的从库都延迟超过 timeout 秒，查询压力就都跑到主库上，所以需要进行权衡</p><hr><h5 id="等gtid" tabindex="-1"><a class="header-anchor" href="#等gtid"><span>等GTID</span></a></h5><p>数据库开启了 GTID 模式，MySQL 提供了判断 GTID 的命令</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT wait_for_executed_gtid_set(gtid_set [, timeout])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>等待直到这个库执行的事务中包含传入的 gtid_set，返回 0</li><li>超时返回 1</li></ul><p>工作流程：先执行 trx1，再执行一个查询请求的逻辑，要保证能够查到正确的数据</p><ul><li>trx1 事务更新完成后，从返回包直接获取这个事务的 GTID，记为 gtid</li><li>选定一个从库执行查询语句，如果返回值是 0，则在这个从库执行查询语句，否则到主库执行查询语句</li></ul><p>对比等待位点方法，减少了一次 <code>show master status</code> 的方法，将参数 session_track_gtids 设置为 OWN_GTID，然后通过 API 接口 mysql_session_track_get_first 从返回包解析出 GTID 的值即可</p><p>总结：所有的等待无延迟的方法，都需要根据具体的业务场景去判断实施</p><p>参考文章：https://time.geekbang.org/column/article/77636</p><hr><h4 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h4><p>负载均衡是应用中使用非常普遍的一种优化方法，机制就是利用某种均衡算法，将固定的负载量分布到不同的服务器上，以此来降低单台服务器的负载，达到优化的效果</p><ul><li><p>分流查询：通过 MySQL 的主从复制，实现读写分离，使增删改操作走主节点，查询操作走从节点，从而可以降低单台服务器的读写压力</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-负载均衡主从复制.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>分布式数据库架构：适合大数据量、负载高的情况，具有良好的拓展性和高可用性。通过在多台服务器之间分布数据，可以实现在多台服务器之间的负载均衡，提高访问效率</p></li></ul><hr><h3 id="主从搭建" tabindex="-1"><a class="header-anchor" href="#主从搭建"><span>主从搭建</span></a></h3><h4 id="master" tabindex="-1"><a class="header-anchor" href="#master"><span>master</span></a></h4><ol><li><p>在master 的配置文件（/etc/mysql/my.cnf）中，配置如下内容：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#mysql 服务ID,保证整个集群环境中唯一</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">server-id</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#mysql binlog 日志的存储路径和文件名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">log-bin</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/var/lib/mysql/mysqlbin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#错误日志,默认已经开启</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#log-err</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#mysql的安装目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#basedir</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#mysql的临时目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#tmpdir</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#mysql的数据存放目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#datadir</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#是否只读,1 代表只读, 0 代表读写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">read-only</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#忽略的数据, 指不需要同步的数据库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">binlog-ignore-db</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">mysql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#指定同步的数据库</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#binlog-do-db=db01</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行完毕之后，需要重启 MySQL</p></li><li><p>创建同步数据的账户，并且进行授权操作：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>GRANT REPLICATION SLAVE ON *.* TO &#39;seazean&#39;@&#39;192.168.0.137&#39; IDENTIFIED BY &#39;123456&#39;;</span></span>
<span class="line"><span>FLUSH PRIVILEGES;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看 master 状态：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW MASTER STATUS;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-查看master状态.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>File：从哪个日志文件开始推送日志文件</li><li>Position：从哪个位置开始推送日志</li><li>Binlog_Ignore_DB：指定不需要同步的数据库</li></ul></li></ol><hr><h4 id="slave" tabindex="-1"><a class="header-anchor" href="#slave"><span>slave</span></a></h4><ol><li><p>在 slave 端配置文件中，配置如下内容：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#mysql服务端ID,唯一</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">server-id</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#指定binlog日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">log-bin</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/var/lib/mysql/mysqlbin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行完毕之后，需要重启 MySQL</p></li><li><p>指定当前从库对应的主库的IP地址、用户名、密码，从哪个日志文件开始的那个位置开始同步推送日志</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CHANGE MASTER TO MASTER_HOST= &#39;192.168.0.138&#39;, MASTER_USER=&#39;seazean&#39;, MASTER_PASSWORD=&#39;seazean&#39;, MASTER_LOG_FILE=&#39;mysqlbin.000001&#39;, MASTER_LOG_POS=413;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>开启同步操作：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>START SLAVE;</span></span>
<span class="line"><span>SHOW SLAVE STATUS;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>停止同步操作：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>STOP SLAVE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><hr><h4 id="验证" tabindex="-1"><a class="header-anchor" href="#验证"><span>验证</span></a></h4><ol><li><p>在主库中创建数据库，创建表并插入数据：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>CREATE DATABASE db01;</span></span>
<span class="line"><span>USE db01;</span></span>
<span class="line"><span>CREATE TABLE user(</span></span>
<span class="line"><span>	id INT(11) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span>	name VARCHAR(50) NOT NULL,</span></span>
<span class="line"><span>	sex VARCHAR(1),</span></span>
<span class="line"><span>	PRIMARY KEY (id)</span></span>
<span class="line"><span>)ENGINE=INNODB DEFAULT CHARSET=utf8;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>INSERT INTO user(id,NAME,sex) VALUES(NULL,&#39;Tom&#39;,&#39;1&#39;);</span></span>
<span class="line"><span>INSERT INTO user(id,NAME,sex) VALUES(NULL,&#39;Trigger&#39;,&#39;0&#39;);</span></span>
<span class="line"><span>INSERT INTO user(id,NAME,sex) VALUES(NULL,&#39;Dawn&#39;,&#39;1&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在从库中查询数据，进行验证：</p><p>在从库中，可以查看到刚才创建的数据库：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-主从复制验证1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在该数据库中，查询表中的数据：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-主从复制验证2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><hr><h3 id="主从切换" tabindex="-1"><a class="header-anchor" href="#主从切换"><span>主从切换</span></a></h3><h4 id="正常切换" tabindex="-1"><a class="header-anchor" href="#正常切换"><span>正常切换</span></a></h4><p>正常切换步骤：</p><ul><li><p>在开始切换之前先对主库进行锁表 <code>flush tables with read lock</code>，然后等待所有语句执行完成，切换完成后可以释放锁</p></li><li><p>检查 slave 同步状态，在 slave 执行 <code>show processlist</code></p></li><li><p>停止 slave io 线程，执行命令 <code>STOP SLAVE IO_THREAD</code></p></li><li><p>提升 slave 为 master</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">Stop</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> slave;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">Reset</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> master</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">Reset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> slave all;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> global</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> read_only</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">off</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;	</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-- 设置为可更新状态</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将原来 master 变为 slave（参考搭建流程中的 slave 方法）</p></li></ul><p><strong>可靠性优先策略</strong>：</p><ul><li>判断备库 B 现在的 seconds_behind_master，如果小于某个值（比如 5 秒）继续下一步，否则持续重试这一步</li><li>把主库 A 改成只读状态，即把 readonly 设置为 true</li><li>判断备库 B 的 seconds_behind_master 的值，直到这个值变成 0 为止（该步骤比较耗时，所以步骤 1 中要尽量等待该值变小）</li><li>把备库 B 改成可读写状态，也就是把 readonly 设置为 false</li><li>把业务请求切到备库 B</li></ul><p>可用性优先策略：先做最后两步，会造成主备数据不一致的问题</p><p>参考文章：https://time.geekbang.org/column/article/76795</p><hr><h4 id="健康检测" tabindex="-1"><a class="header-anchor" href="#健康检测"><span>健康检测</span></a></h4><p>主库发生故障后从库会上位，<strong>其他从库指向新的主库</strong>，所以需要一个健康检测的机制来判断主库是否宕机</p><ul><li><p>select 1 判断，但是高并发下检测不出线程的锁等待的阻塞问题</p></li><li><p>查表判断，在系统库（mysql 库）里创建一个表，比如命名为 health_check，里面只放一行数据，然后定期执行。但是当 binlog 所在磁盘的空间占用率达到 100%，所有的更新和事务提交语句都被阻塞，查询语句可以继续运行</p></li><li><p>更新判断，在健康检测表中放一个 timestamp 字段，用来表示最后一次执行检测的时间</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>UPDATE mysql.health_check SET t_modified=now();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>节点可用性的检测都应该包含主库和备库，为了让主备之间的更新不产生冲突，可以在 mysql.health_check 表上存入多行数据，并用主备的 server_id 做主键，保证主、备库各自的检测命令不会发生冲突</p></li></ul><hr><h4 id="基于位点" tabindex="-1"><a class="header-anchor" href="#基于位点"><span>基于位点</span></a></h4><p>主库上位后，从库 B 执行 CHANGE MASTER TO 命令，指定 MASTER_LOG_FILE、MASTER_LOG_POS 表示从新主库 A 的哪个文件的哪个位点开始同步，这个位置就是<strong>同步位点</strong>，对应主库的文件名和日志偏移量</p><p>寻找位点需要找一个稍微往前的，然后再通过判断跳过那些在从库 B 上已经执行过的事务，获取位点方法：</p><ul><li>等待新主库 A 把中转日志（relay log）全部同步完成</li><li>在 A 上执行 show master status 命令，得到当前 A 上最新的 File 和 Position</li><li>取原主库故障的时刻 T，用 mysqlbinlog 工具解析新主库 A 的 File，得到 T 时刻的位点</li></ul><p>通常情况下该值并不准确，在切换的过程中会发生错误，所以要先主动跳过这些错误：</p><ul><li><p>切换过程中，可能会重复执行一个事务，所以需要主动跳过所有重复的事务</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET GLOBAL sql_slave_skip_counter=1;</span></span>
<span class="line"><span>START SLAVE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置 slave_skip_errors 参数，直接设置跳过指定的错误，保证主从切换的正常进行</p><ul><li>1062 错误是插入数据时唯一键冲突</li><li>1032 错误是删除数据时找不到行</li></ul><p>该方法针对的是主备切换时，由于找不到精确的同步位点，只能采用这种方法来创建从库和新主库的主备关系。等到主备间的同步关系建立完成并稳定执行一段时间后，还需要把这个参数设置为空，以免真的出现了主从数据不一致也跳过了</p></li></ul><hr><h4 id="基于gtid" tabindex="-1"><a class="header-anchor" href="#基于gtid"><span>基于GTID</span></a></h4><h5 id="gtid" tabindex="-1"><a class="header-anchor" href="#gtid"><span>GTID</span></a></h5><p>GTID 的全称是 Global Transaction Identifier，全局事务 ID，是一个事务<strong>在提交时生成</strong>的，是这个事务的唯一标识，组成：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>GTID=source_id:transaction_id</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>source_id：是一个实例第一次启动时自动生成的，是一个全局唯一的值</li><li>transaction_id：初始值是 1，每次提交事务的时候分配给这个事务，并加 1，是连续的（区分事务 ID，事务 ID 是在执行时生成）</li></ul><p>启动 MySQL 实例时，加上参数 <code>gtid_mode=on</code> 和 <code>enforce_gtid_consistency=on</code> 就可以启动 GTID 模式，每个事务都会和一个 GTID 一一对应，每个 MySQL 实例都维护了一个 GTID 集合，用来存储当前实例<strong>执行过的所有事务</strong></p><p>GTID 有两种生成方式，使用哪种方式取决于 session 变量 gtid_next：</p><ul><li><p><code>gtid_next=automatic</code>：使用默认值，把 source_id:transaction_id （递增）分配给这个事务，然后加入本实例的 GTID 集合</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>@@SESSION.GTID_NEXT = &#39;source_id:transaction_id&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><code>gtid_next=GTID</code>：指定的 GTID 的值，如果该值已经存在于实例的 GTID 集合中，接下来执行的事务会直接被系统忽略；反之就将该值分配给接下来要执行的事务，系统不需要给这个事务生成新的 GTID，也不用加 1</p><p>注意：一个 GTID 只能给一个事务使用，所以执行下一个事务，要把 gtid_next 设置成另外一个 GTID 或者 automatic</p></li></ul><p>业务场景：</p><ul><li><p>主库 X 和从库 Y 执行一条相同的指令后进行事务同步</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>INSERT INTO t VALUES(1,1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>当 Y 同步 X 时，会出现主键冲突，导致实例 X 的同步线程停止，解决方法：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SET gtid_next=&#39;(这里是主库 X 的 GTID 值)&#39;;</span></span>
<span class="line"><span>BEGIN;</span></span>
<span class="line"><span>COMMIT;</span></span>
<span class="line"><span>SET gtid_next=automatic;</span></span>
<span class="line"><span>START SLAVE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前三条语句通过<strong>提交一个空事务</strong>，把 X 的 GTID 加到实例 Y 的 GTID 集合中，实例 Y 就会直接跳过这个事务</p></li></ul><hr><h5 id="切换" tabindex="-1"><a class="header-anchor" href="#切换"><span>切换</span></a></h5><p>在 GTID 模式下，CHANGE MASTER TO 不需要指定日志名和日志偏移量，指定 <code>master_auto_position=1</code> 代表使用 GTID 模式</p><p>新主库实例 A 的 GTID 集合记为 set_a，从库实例 B 的 GTID 集合记为 set_b，主备切换逻辑：</p><ul><li>实例 B 指定主库 A，基于主备协议建立连接，实例 B 并把 set_b 发给主库 A</li><li>实例 A 算出 set_a 与 set_b 的差集，就是所有存在于 set_a 但不存在于 set_b 的 GTID 的集合，判断 A 本地是否包含了这个<strong>差集</strong>需要的所有 binlog 事务 <ul><li>如果不包含，表示 A 已经把实例 B 需要的 binlog 给删掉了，直接返回错误</li><li>如果确认全部包含，A 从自己的 binlog 文件里面，找出第一个不在 set_b 的事务，发给 B</li></ul></li><li>实例 A 之后就从这个事务开始，往后读文件，按顺序取 binlog 发给 B 去执行</li></ul><p>参考文章：https://time.geekbang.org/column/article/77427</p><hr><h2 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h2><h3 id="日志分类" tabindex="-1"><a class="header-anchor" href="#日志分类"><span>日志分类</span></a></h3><p>在任何一种数据库中，都会有各种各样的日志，记录着数据库工作的过程，可以帮助数据库管理员追踪数据库曾经发生过的各种事件</p><p>MySQL日志主要包括六种：</p><ol><li>重做日志（redo log）</li><li>回滚日志（undo log）</li><li>归档日志（binlog）（二进制日志）</li><li>错误日志（errorlog）</li><li>慢查询日志（slow query log）</li><li>一般查询日志（general log）</li><li>中继日志（relay log）</li></ol><hr><h3 id="错误日志" tabindex="-1"><a class="header-anchor" href="#错误日志"><span>错误日志</span></a></h3><p>错误日志是 MySQL 中最重要的日志之一，记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，可以首先查看此日志</p><p>该日志是默认开启的，默认位置是：<code>/var/log/mysql/error.log</code></p><p>查看指令：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SHOW VARIABLES LIKE &#39;log_error%&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看日志内容：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /var/log/mysql/error.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="归档日志" tabindex="-1"><a class="header-anchor" href="#归档日志"><span>归档日志</span></a></h3><h4 id="基本介绍-10" tabindex="-1"><a class="header-anchor" href="#基本介绍-10"><span>基本介绍</span></a></h4><p>归档日志（BINLOG）也叫二进制日志，是因为采用二进制进行存储，记录了所有的 DDL（数据定义语言）语句和 DML（数据操作语言）语句，但<strong>不包括数据查询语句，在事务提交前的最后阶段写入</strong></p><p>作用：<strong>灾难时的数据恢复和 MySQL 的主从复制</strong></p><p>归档日志默认情况下是没有开启的，需要在 MySQL 配置文件中开启，并配置 MySQL 日志的格式：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/mysql</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> my.cnf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如: mysqlbin.000001</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">log_bin</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">mysqlbin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 配置二进制日志的格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">binlog_format</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">STATEMENT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志存放位置：配置时给定了文件名但是没有指定路径，日志默认写入MySQL 的数据目录</p><p>日志格式：</p><ul><li><p>STATEMENT：该日志格式在日志文件中记录的都是 <strong>SQL 语句</strong>，每一条对数据进行修改的 SQL 都会记录在日志文件中，通过 mysqlbinlog 工具，可以查看到每条语句的文本。主从复制时，从库会将日志解析为原语句，并在从库重新执行一遍</p><p>缺点：可能会导致主备不一致，因为记录的 SQL 在不同的环境中可能选择的索引不同，导致结果不同</p></li><li><p>ROW：该日志格式在日志文件中记录的是每一行的<strong>数据变更</strong>，而不是记录 SQL 语句。比如执行 SQL 语句 <code>update tb_book set status=&#39;1&#39;</code>，如果是 STATEMENT，在日志中会记录一行 SQL 语句； 如果是 ROW，由于是对全表进行更新，就是每一行记录都会发生变更，ROW 格式的日志中会记录每一行的数据变更</p><p>缺点：记录的数据比较多，占用很多的存储空间</p></li><li><p>MIXED：这是 MySQL 默认的日志格式，混合了STATEMENT 和 ROW 两种格式，MIXED 格式能尽量利用两种模式的优点，而避开它们的缺点</p></li></ul><hr><h4 id="日志刷盘-1" tabindex="-1"><a class="header-anchor" href="#日志刷盘-1"><span>日志刷盘</span></a></h4><p>事务执行过程中，先将日志写（write）到 binlog cache，事务提交时再把 binlog cache 写（fsync）到 binlog 文件中，一个事务的 binlog 是不能被拆开的，所以不论这个事务多大也要确保一次性写入</p><p>事务提交时执行器把 binlog cache 里的完整事务写入到 binlog 中，并清空 binlog cache</p><p>write 和 fsync 的时机由参数 sync_binlog 控制的：</p><ul><li>sync_binlog=0：表示每次提交事务都只 write，不 fsync</li><li>sync_binlog=1：表示每次提交事务都会执行 fsync</li><li>sync_binlog=N(N&gt;1)：表示每次提交事务都 write，但累积 N 个事务后才 fsync，但是如果主机发生异常重启，会丢失最近 N 个事务的 binlog 日志</li></ul><hr><h4 id="日志读取" tabindex="-1"><a class="header-anchor" href="#日志读取"><span>日志读取</span></a></h4><p>日志文件存储位置：/var/lib/mysql</p><p>由于日志以二进制方式存储，不能直接读取，需要用 mysqlbinlog 工具来查看，语法如下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqlbinlog</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> log-file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看 STATEMENT 格式日志：</p><ul><li><p>执行插入语句：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>INSERT INTO tb_book VALUES(NULL,&#39;Lucene&#39;,&#39;2088-05-01&#39;,&#39;0&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><code>cd /var/lib/mysql</code>：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">-rw-r-----</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mysql</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">      177</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 5月</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  23</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 21:08</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mysqlbin.000001</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">-rw-r-----</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mysql</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       18</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 5月</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  23</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 21:04</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mysqlbin.index</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>mysqlbin.index：该文件是日志索引文件 ， 记录日志的文件名；</p><p>mysqlbing.000001：日志文件</p></li><li><p>查看日志内容：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqlbinlog</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mysqlbing.000001</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-日志读取1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>日志结尾有 COMMIT</p></li></ul><p>查看 ROW 格式日志：</p><ul><li><p>修改配置：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 配置二进制日志的格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">binlog_format</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">ROW</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>插入数据：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>INSERT INTO tb_book VALUES(NULL,&#39;SpringCloud实战&#39;,&#39;2088-05-05&#39;,&#39;0&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查看日志内容：日志格式 ROW，直接查看数据是乱码，可以在 mysqlbinlog 后面加上参数 -vv</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>mysqlbinlog -vv mysqlbin.000002</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-日志读取2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><hr><h4 id="日志删除" tabindex="-1"><a class="header-anchor" href="#日志删除"><span>日志删除</span></a></h4><p>对于比较繁忙的系统，生成日志量大，这些日志如果长时间不清除，将会占用大量的磁盘空间，需要删除日志</p><ul><li><p>Reset Master 指令删除全部 binlog 日志，删除之后，日志编号将从 xxxx.000001重新开始</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Reset Master	-- MySQL指令</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>执行指令 <code>PURGE MASTER LOGS TO &#39;mysqlbin.***</code>，该命令将删除 <code> ***</code> 编号之前的所有日志</p></li><li><p>执行指令 <code>PURGE MASTER LOGS BEFORE &#39;yyyy-mm-dd hh:mm:ss&#39;</code> ，该命令将删除日志为 <code>yyyy-mm-dd hh:mm:ss</code> 之前产生的日志</p></li><li><p>设置参数 <code>--expire_logs_days=#</code>，此参数的含义是设置日志的过期天数，过了指定的天数后日志将会被自动删除，这样做有利于减少管理日志的工作量，配置 my.cnf 文件：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">log_bin</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">mysqlbin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">binlog_format</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">ROW</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">--expire_logs_days</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="数据恢复-1" tabindex="-1"><a class="header-anchor" href="#数据恢复-1"><span>数据恢复</span></a></h4><p>误删库或者表时，需要根据 binlog 进行数据恢复</p><p>一般情况下数据库有定时的全量备份，假如每天 0 点定时备份，12 点误删了库，恢复流程：</p><ul><li>取最近一次全量备份，用备份恢复出一个临时库</li><li>从日志文件中取出凌晨 0 点之后的日志</li><li>把除了误删除数据的语句外日志，全部应用到临时库</li></ul><p>跳过误删除语句日志的方法：</p><ul><li>如果原实例没有使用 GTID 模式，只能在应用到包含 12 点的 binlog 文件的时候，先用 –stop-position 参数执行到误操作之前的日志，然后再用 –start-position 从误操作之后的日志继续执行</li><li>如果实例使用了 GTID 模式，假设误操作命令的 GTID 是 gtid1，那么只需要提交一个空事务先将这个 GTID 加到临时实例的 GTID 集合，之后按顺序执行 binlog 的时就会自动跳过误操作的语句</li></ul><hr><h3 id="查询日志" tabindex="-1"><a class="header-anchor" href="#查询日志"><span>查询日志</span></a></h3><p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的 SQL 语句</p><p>默认情况下，查询日志是未开启的。如果需要开启查询日志，配置 my.cnf：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 该选项用来开启查询日志，可选值0或者1，0代表关闭，1代表开启 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">general_log</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 设置日志的文件名，如果没有指定，默认的文件名为host_name.log，存放在/var/lib/mysql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">general_log_file</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">mysql_query.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完毕之后，在数据库执行以下操作：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SELECT * FROM tb_book;</span></span>
<span class="line"><span>SELECT * FROM tb_book WHERE id = 1;</span></span>
<span class="line"><span>UPDATE tb_book SET name = &#39;lucene入门指南&#39; WHERE id = 5;</span></span>
<span class="line"><span>SELECT * FROM tb_book WHERE id &lt; 8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完毕之后， 再次来查询日志文件：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-查询日志.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="慢日志" tabindex="-1"><a class="header-anchor" href="#慢日志"><span>慢日志</span></a></h3><p>慢查询日志记录所有执行时间超过 long_query_time 并且扫描记录数不小于 min_examined_row_limit 的所有的 SQL 语句的日志long_query_time 默认为 10 秒，最小为 0， 精度到微秒</p><p>慢查询日志默认是关闭的，可以通过两个参数来控制慢查询日志，配置文件 <code>/etc/mysql/my.cnf</code>：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 该参数用来控制慢查询日志是否开启，可选值0或者1，0代表关闭，1代表开启 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">slow_query_log</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 该参数用来指定慢查询日志的文件名，存放在 /var/lib/mysql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">slow_query_log_file</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">slow_query.log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 该选项用来配置查询的时间限制，超过这个时间将认为值慢查询，将需要进行日志记录，默认10s</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">long_query_time</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志读取：</p><ul><li><p>直接通过 cat 指令查询该日志文件：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> slow_query.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-慢日志读取1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>如果慢查询日志内容很多，直接查看文件比较繁琐，可以借助 mysql 自带的 mysqldumpslow 工具对慢查询日志进行分类汇总：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mysqldumpslow</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> slow_query.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-慢日志读取2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><hr><h2 id="范式" tabindex="-1"><a class="header-anchor" href="#范式"><span>范式</span></a></h2><h3 id="第一范式" tabindex="-1"><a class="header-anchor" href="#第一范式"><span>第一范式</span></a></h3><p>建立科学的，<strong>规范的数据表</strong>就需要满足一些规则来优化数据的设计和存储，这些规则就称为范式</p><p>**1NF：**数据库表的每一列都是不可分割的原子数据项，不能是集合、数组等非原子数据项。即表中的某个列有多个值时，必须拆分为不同的列。简而言之，<strong>第一范式每一列不可再拆分，称为原子性</strong></p><p>基本表：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/普通表.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第一范式表：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/第一范式.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="第二范式" tabindex="-1"><a class="header-anchor" href="#第二范式"><span>第二范式</span></a></h3><p>**2NF：**在满足第一范式的基础上，非主属性完全依赖于主码（主关键字、主键），消除非主属性对主码的部分函数依赖。简而言之，<strong>表中的每一个字段 （所有列）都完全依赖于主键，记录的唯一性</strong></p><p>作用：遵守第二范式减少数据冗余，通过主键区分相同数据。</p><ol><li>函数依赖：A → B，如果通过 A 属性(属性组)的值，可以确定唯一 B 属性的值，则称 B 依赖于 A <ul><li>学号 → 姓名；(学号，课程名称) → 分数</li></ul></li><li>完全函数依赖：A → B，如果A是一个属性组，则 B 属性值的确定需要依赖于 A 属性组的所有属性值 <ul><li>(学号，课程名称) → 分数</li></ul></li><li>部分函数依赖：A → B，如果 A 是一个属性组，则 B 属性值的确定只需要依赖于 A 属性组的某些属性值 <ul><li>(学号，课程名称) → 姓名</li></ul></li><li>传递函数依赖：A → B，B → C，如果通过A属性(属性组)的值，可以确定唯一 B 属性的值，在通过 B 属性(属性组)的值，可以确定唯一 C 属性的值，则称 C 传递函数依赖于 A <ul><li>学号 → 系名，系名 → 系主任</li></ul></li><li>码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码 <ul><li>该表中的码：(学号，课程名称)</li><li>主属性：码属性组中的所有属性</li><li>非主属性：除码属性组以外的属性</li></ul></li></ol><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/第二范式.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="第三范式" tabindex="-1"><a class="header-anchor" href="#第三范式"><span>第三范式</span></a></h3><p>**3NF：**在满足第二范式的基础上，表中的任何属性不依赖于其它非主属性，消除传递依赖。简而言之，<strong>非主键都直接依赖于主键，而不是通过其它的键来间接依赖于主键</strong>。</p><p>作用：可以通过主键 id 区分相同数据，修改数据的时候只需要修改一张表（方便修改），反之需要修改多表。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/第三范式.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/三大范式.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,1796),t=[l];function d(p,r){return a(),i("div",null,t)}const o=s(e,[["render",d],["__file","MySQL.html.vue"]]),g=JSON.parse('{"path":"/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL.html","title":"MySQL","lang":"zh-CN","frontmatter":{"title":"MySQL","icon":"pen-to-square","date":"2023-01-14T00:00:00.000Z","category":["MySQL"],"tag":["关系型数据库","视图","索引","事务"],"description":"MySQL 简介 数据库 数据库：DataBase，简称 DB，存储和管理数据的仓库 数据库的优势： 可以持久化存储数据 方便存储和管理数据 使用了统一的方式操作数据库 SQL 数据库、数据表、数据的关系介绍： 数据库 用于存储和管理数据的仓库 一个库中可以包含多个数据表 数据表 数据库最重要的组成部分之一 由纵向的列和横向的行组成（类似 excel ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL.html"}],["meta",{"property":"og:site_name","content":"麻花的小站"}],["meta",{"property":"og:title","content":"MySQL"}],["meta",{"property":"og:description","content":"MySQL 简介 数据库 数据库：DataBase，简称 DB，存储和管理数据的仓库 数据库的优势： 可以持久化存储数据 方便存储和管理数据 使用了统一的方式操作数据库 SQL 数据库、数据表、数据的关系介绍： 数据库 用于存储和管理数据的仓库 一个库中可以包含多个数据表 数据表 数据库最重要的组成部分之一 由纵向的列和横向的行组成（类似 excel ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-23T09:26:56.000Z"}],["meta",{"property":"article:author","content":"Jack-Chen"}],["meta",{"property":"article:tag","content":"关系型数据库"}],["meta",{"property":"article:tag","content":"视图"}],["meta",{"property":"article:tag","content":"索引"}],["meta",{"property":"article:tag","content":"事务"}],["meta",{"property":"article:published_time","content":"2023-01-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-23T09:26:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL\\",\\"image\\":[\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E6%9D%83%E9%99%90%E8%8C%83%E5%9B%B4.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SHOW_PROCESSLIST%E5%91%BD%E4%BB%A4.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E5%A4%87%E4%BB%BD.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E6%81%A2%E5%A4%8D.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SQL%E5%88%86%E7%B1%BB.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-DQL%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E5%9B%BE%E8%A7%A3.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E5%A4%9A%E8%A1%A8%E8%AE%BE%E8%AE%A1%E4%B8%80%E5%AF%B9%E4%B8%80.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E5%A4%9A%E8%A1%A8%E8%AE%BE%E8%AE%A1%E4%B8%80%E5%AF%B9%E5%A4%9A.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E5%A4%9A%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%A4%9A%E5%AF%B9%E5%A4%9A.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-JOIN%E6%9F%A5%E8%AF%A2%E5%9B%BE.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E8%87%AA%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E5%A4%9A%E8%A1%A8%E7%BB%83%E4%B9%A0%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687067490344.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687067452908.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687068663823.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687222999294.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687223807376.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687224588959.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687224857362.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687225707609.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687225756413.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1686905882743.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MERGE.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BB%8B%E7%BB%8D.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E7%BB%84%E5%90%88%E7%B4%A2%E5%BC%95%E5%9B%BE.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB%E8%81%9A%E7%B0%87%E5%92%8C%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E5%92%8C%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E6%A3%80%E9%94%81%E6%95%B0%E6%8D%AE%E5%9B%BE.jpg\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM%E4%B8%BB%E9%94%AE%E5%92%8C%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B1.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B2.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B3.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B4.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B5.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B6.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B7.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-BTree%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B8.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8E%9F%E7%90%861.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8E%9F%E7%90%862.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8%E4%BC%98%E5%8C%961.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8%E4%BC%98%E5%8C%962.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SQL%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E9%A2%91%E7%8E%87.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SQL%E8%AF%AD%E5%8F%A5%E5%BD%B1%E5%93%8D%E7%9A%84%E8%A1%8C%E6%95%B0.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SHOW_PROCESSLIST%E5%91%BD%E4%BB%A4-1720750205638-6.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-explain%E6%9F%A5%E8%AF%A2SQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-explain%E4%B9%8Bid%E7%9B%B8%E5%90%8C.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-explain%E4%B9%8Bid%E4%B8%8D%E5%90%8C.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-explain%E4%B9%8Bid%E7%9B%B8%E5%90%8C%E5%92%8C%E4%B8%8D%E5%90%8C.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-have_profiling.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-profiling.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E6%9F%A5%E7%9C%8BSQL%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%80%97%E6%97%B6.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SQL%E6%89%A7%E8%A1%8C%E6%AF%8F%E4%B8%AA%E7%8A%B6%E6%80%81%E6%B6%88%E8%80%97%E7%9A%84%E6%97%B6%E9%97%B4.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-SQL%E6%89%A7%E8%A1%8C%E6%AF%8F%E4%B8%AA%E7%8A%B6%E6%80%81%E6%B6%88%E8%80%97%E7%9A%84CPU.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%951.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%952.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%953.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%954.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%955.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%956.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%957.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%9510.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%9511.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%9512.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%9513.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%9514.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%9515.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%863.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053539419.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053603265.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053617687.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053680135.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053697186.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053720439.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053735874.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053753314.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053766267.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053801878.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053884009.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053897233.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053911184.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053921836.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687053930426.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%958.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%959.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%20load%20data.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E6%8F%92%E5%85%A5ID%E9%A1%BA%E5%BA%8F%E6%8E%92%E5%88%97%E6%95%B0%E6%8D%AE.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E6%8F%92%E5%85%A5ID%E6%97%A0%E5%BA%8F%E6%8E%92%E5%88%97%E6%95%B0%E6%8D%AE.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%85%B3%E9%97%AD%E5%94%AF%E4%B8%80%E6%80%A7%E6%A0%A1%E9%AA%8C.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E6%89%8B%E5%8A%A8%E6%8F%90%E4%BA%A4%E4%BA%8B%E5%8A%A1.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%20ORDER%20BY%E6%8E%92%E5%BA%8F1.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%20ORDER%20BY%E6%8E%92%E5%BA%8F2.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%20ORDER%20BY%E6%8E%92%E5%BA%8F3.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%20GROUP%20BY%E6%8E%92%E5%BA%8F1.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%20GROUP%20BY%E6%8E%92%E5%BA%8F2.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%20GROUP%20BY%E6%8E%92%E5%BA%8F3.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%20OR%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A21.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%20OR%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A22.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A21.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A22.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A21.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A22.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A23.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E6%8F%90%E7%A4%BA1.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E6%8F%90%E7%A4%BA2.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%BC%98%E5%8C%96SQL%E4%BD%BF%E7%94%A8%E6%8F%90%E7%A4%BA3.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687226636543.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MVCC%E7%89%88%E6%9C%AC%E9%93%BE%E9%9A%90%E8%97%8F%E5%AD%97%E6%AE%B5.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MVCC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B1.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MVCC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B2.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687227607521.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687097771548.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM%20%E9%94%81%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM%20%E8%AF%BB%E9%94%811.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM%20%E8%AF%BB%E9%94%812.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM%20%E8%AF%BB%E9%94%813.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM%20%E5%86%99%E9%94%811.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM%20%E5%86%99%E9%94%812.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E9%94%81%E4%BA%89%E7%94%A8%E6%83%85%E5%86%B5%E6%9F%A5%E7%9C%8B1.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E9%94%81%E4%BA%89%E7%94%A8%E6%83%85%E5%86%B5%E6%9F%A5%E7%9C%8B2.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-MyISAM%20%E9%94%81%E7%8A%B6%E6%80%81.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687173958031.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687173976336.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687173999332.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/1687174241521.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB%20%E9%94%81%E6%93%8D%E4%BD%9C1.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB%20%E9%94%81%E6%93%8D%E4%BD%9C2.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB%20%E9%94%81%E6%93%8D%E4%BD%9C3.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB%20%E9%94%81%E6%93%8D%E4%BD%9C4.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB%20%E9%94%81%E6%93%8D%E4%BD%9C5.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB%20%E9%94%81%E6%93%8D%E4%BD%9C6.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB%20%E9%97%B4%E9%9A%99%E9%94%811.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB%20%E9%97%B4%E9%9A%99%E9%94%812.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E6%84%8F%E5%90%91%E9%94%81%E5%85%BC%E5%AE%B9%E6%80%A7.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB%20%E9%94%81%E5%8D%87%E7%BA%A7.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-InnoDB%E6%9F%A5%E7%9C%8B%E9%94%81%E7%8A%B6%E6%80%81.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E5%9B%BE.jpg\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.jpg\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E6%9F%A5%E7%9C%8Bmaster%E7%8A%B6%E6%80%81.jpg\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E9%AA%8C%E8%AF%811.jpg\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E9%AA%8C%E8%AF%812.jpg\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E6%97%A5%E5%BF%97%E8%AF%BB%E5%8F%961.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E6%97%A5%E5%BF%97%E8%AF%BB%E5%8F%962.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E6%85%A2%E6%97%A5%E5%BF%97%E8%AF%BB%E5%8F%961.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/MySQL-%E6%85%A2%E6%97%A5%E5%BF%97%E8%AF%BB%E5%8F%962.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E6%99%AE%E9%80%9A%E8%A1%A8.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/mysql/%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F.png\\"],\\"datePublished\\":\\"2023-01-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-23T09:26:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack-Chen\\",\\"url\\":\\"https://chemnminghe.top\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"数据库","slug":"数据库","link":"#数据库","children":[]},{"level":3,"title":"MySQL","slug":"mysql-1","link":"#mysql-1","children":[]}]},{"level":2,"title":"体系架构","slug":"体系架构","link":"#体系架构","children":[{"level":3,"title":"整体架构","slug":"整体架构","link":"#整体架构","children":[]},{"level":3,"title":"建立连接","slug":"建立连接","link":"#建立连接","children":[]},{"level":3,"title":"执行流程","slug":"执行流程","link":"#执行流程","children":[]},{"level":3,"title":"终止流程","slug":"终止流程","link":"#终止流程","children":[]},{"level":3,"title":"常用工具","slug":"常用工具","link":"#常用工具","children":[]}]},{"level":2,"title":"单表操作","slug":"单表操作","link":"#单表操作","children":[{"level":3,"title":"SQL","slug":"sql","link":"#sql","children":[]},{"level":3,"title":"DDL","slug":"ddl","link":"#ddl","children":[]},{"level":3,"title":"DML","slug":"dml","link":"#dml","children":[]},{"level":3,"title":"DQL","slug":"dql","link":"#dql","children":[]},{"level":3,"title":"DCL","slug":"dcl","link":"#dcl","children":[]}]},{"level":2,"title":"多表操作","slug":"多表操作","link":"#多表操作","children":[{"level":3,"title":"约束分类","slug":"约束分类","link":"#约束分类","children":[]},{"level":3,"title":"多表设计","slug":"多表设计","link":"#多表设计","children":[]},{"level":3,"title":"连接查询","slug":"连接查询","link":"#连接查询","children":[]},{"level":3,"title":"嵌套查询","slug":"嵌套查询","link":"#嵌套查询","children":[]},{"level":3,"title":"查询练习","slug":"查询练习","link":"#查询练习","children":[]}]},{"level":2,"title":"高级结构","slug":"高级结构","link":"#高级结构","children":[{"level":3,"title":"视图","slug":"视图","link":"#视图","children":[]},{"level":3,"title":"存储过程","slug":"存储过程","link":"#存储过程","children":[]},{"level":3,"title":"存储函数","slug":"存储函数","link":"#存储函数","children":[]},{"level":3,"title":"触发器","slug":"触发器","link":"#触发器","children":[]}]},{"level":2,"title":"存储引擎","slug":"存储引擎","link":"#存储引擎","children":[{"level":3,"title":"基本介绍","slug":"基本介绍-3","link":"#基本介绍-3","children":[]},{"level":3,"title":"引擎对比","slug":"引擎对比","link":"#引擎对比","children":[]},{"level":3,"title":"引擎操作","slug":"引擎操作","link":"#引擎操作","children":[]}]},{"level":2,"title":"索引机制","slug":"索引机制","link":"#索引机制","children":[{"level":3,"title":"索引介绍","slug":"索引介绍","link":"#索引介绍","children":[]},{"level":3,"title":"索引操作","slug":"索引操作","link":"#索引操作","children":[]},{"level":3,"title":"聚簇索引","slug":"聚簇索引","link":"#聚簇索引","children":[]},{"level":3,"title":"索引结构","slug":"索引结构","link":"#索引结构","children":[]},{"level":3,"title":"设计原则","slug":"设计原则","link":"#设计原则","children":[]},{"level":3,"title":"索引优化","slug":"索引优化","link":"#索引优化","children":[]}]},{"level":2,"title":"系统优化","slug":"系统优化","link":"#系统优化","children":[{"level":3,"title":"表优化","slug":"表优化","link":"#表优化","children":[]},{"level":3,"title":"优化步骤","slug":"优化步骤","link":"#优化步骤","children":[]},{"level":3,"title":"索引优化","slug":"索引优化-1","link":"#索引优化-1","children":[]},{"level":3,"title":"SQL 优化","slug":"sql-优化","link":"#sql-优化","children":[]},{"level":3,"title":"缓冲优化","slug":"缓冲优化","link":"#缓冲优化","children":[]},{"level":3,"title":"内存优化","slug":"内存优化","link":"#内存优化","children":[]},{"level":3,"title":"存储优化","slug":"存储优化","link":"#存储优化","children":[]},{"level":3,"title":"并发优化","slug":"并发优化","link":"#并发优化","children":[]}]},{"level":2,"title":"事务机制","slug":"事务机制","link":"#事务机制","children":[{"level":3,"title":"基本介绍","slug":"基本介绍-7","link":"#基本介绍-7","children":[]},{"level":3,"title":"事务管理","slug":"事务管理","link":"#事务管理","children":[]},{"level":3,"title":"隔离级别","slug":"隔离级别","link":"#隔离级别","children":[]},{"level":3,"title":"原子特性","slug":"原子特性","link":"#原子特性","children":[]},{"level":3,"title":"隔离特性","slug":"隔离特性","link":"#隔离特性","children":[]},{"level":3,"title":"持久特性","slug":"持久特性","link":"#持久特性","children":[]},{"level":3,"title":"一致特性","slug":"一致特性","link":"#一致特性","children":[]}]},{"level":2,"title":"锁机制","slug":"锁机制","link":"#锁机制","children":[{"level":3,"title":"基本介绍","slug":"基本介绍-8","link":"#基本介绍-8","children":[]},{"level":3,"title":"全局锁","slug":"全局锁","link":"#全局锁","children":[]},{"level":3,"title":"内存结构","slug":"内存结构","link":"#内存结构","children":[]},{"level":3,"title":"Server","slug":"server","link":"#server","children":[]},{"level":3,"title":"MyISAM","slug":"myisam-1","link":"#myisam-1","children":[]},{"level":3,"title":"InnoDB","slug":"innodb-1","link":"#innodb-1","children":[]},{"level":3,"title":"乐观锁","slug":"乐观锁","link":"#乐观锁","children":[]}]},{"level":2,"title":"主从","slug":"主从","link":"#主从","children":[{"level":3,"title":"基本介绍","slug":"基本介绍-9","link":"#基本介绍-9","children":[]},{"level":3,"title":"主从复制","slug":"主从复制","link":"#主从复制","children":[]},{"level":3,"title":"主从延迟","slug":"主从延迟","link":"#主从延迟","children":[]},{"level":3,"title":"读写分离","slug":"读写分离","link":"#读写分离","children":[]},{"level":3,"title":"主从搭建","slug":"主从搭建","link":"#主从搭建","children":[]},{"level":3,"title":"主从切换","slug":"主从切换","link":"#主从切换","children":[]}]},{"level":2,"title":"日志","slug":"日志","link":"#日志","children":[{"level":3,"title":"日志分类","slug":"日志分类","link":"#日志分类","children":[]},{"level":3,"title":"错误日志","slug":"错误日志","link":"#错误日志","children":[]},{"level":3,"title":"归档日志","slug":"归档日志","link":"#归档日志","children":[]},{"level":3,"title":"查询日志","slug":"查询日志","link":"#查询日志","children":[]},{"level":3,"title":"慢日志","slug":"慢日志","link":"#慢日志","children":[]}]},{"level":2,"title":"范式","slug":"范式","link":"#范式","children":[{"level":3,"title":"第一范式","slug":"第一范式","link":"#第一范式","children":[]},{"level":3,"title":"第二范式","slug":"第二范式","link":"#第二范式","children":[]},{"level":3,"title":"第三范式","slug":"第三范式","link":"#第三范式","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1720770040000,"updatedTime":1729675616000,"contributors":[{"name":"陈铭鹤","email":"615880048@qq.com","commits":3}]},"readingTime":{"minutes":274.02,"words":82207},"filePathRelative":"posts/数据库/MySQL.md","localizedDate":"2023年1月14日","excerpt":"\\n<h2>简介</h2>\\n<h3>数据库</h3>\\n<p>数据库：DataBase，简称 DB，存储和管理数据的仓库</p>\\n<p>数据库的优势：</p>\\n<ul>\\n<li>可以持久化存储数据</li>\\n<li>方便存储和管理数据</li>\\n<li>使用了统一的方式操作数据库 SQL</li>\\n</ul>\\n<p>数据库、数据表、数据的关系介绍：</p>\\n<ul>\\n<li>数据库\\n<ul>\\n<li>用于存储和管理数据的仓库</li>\\n<li>一个库中可以包含多个数据表</li>\\n</ul>\\n</li>\\n<li>数据表\\n<ul>\\n<li>数据库最重要的组成部分之一</li>\\n<li>由纵向的列和横向的行组成（类似 excel 表格）</li>\\n<li>可以指定列名、数据类型、约束等</li>\\n<li>一个表中可以存储多条数据</li>\\n</ul>\\n</li>\\n<li>数据：想要永久化存储的数据</li>\\n</ul>","autoDesc":true}');export{o as comp,g as data};
