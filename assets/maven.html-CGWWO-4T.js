import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as n}from"./app-BYKnUcUk.js";const l={},e=n(`<h1 id="maven" tabindex="-1"><a class="header-anchor" href="#maven"><span>Maven</span></a></h1><h1 id="根据坐标创建-maven-工程" tabindex="-1"><a class="header-anchor" href="#根据坐标创建-maven-工程"><span>根据坐标创建 Maven 工程</span></a></h1><h2 id="_1、maven-核心概念-坐标" tabindex="-1"><a class="header-anchor" href="#_1、maven-核心概念-坐标"><span>1、Maven 核心概念：坐标</span></a></h2><h3 id="_1数学中的坐标" tabindex="-1"><a class="header-anchor" href="#_1数学中的坐标"><span>①数学中的坐标</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095021593.png" alt="image-20240712095021593" tabindex="0" loading="lazy"><figcaption>image-20240712095021593</figcaption></figure><p>使用 x、y、z 三个**『向量』<strong>作为空间的坐标系，可以在</strong>『空间』<strong>中唯一的定位到一个</strong>『点』**。</p><h3 id="_2maven中的坐标" tabindex="-1"><a class="header-anchor" href="#_2maven中的坐标"><span>②Maven中的坐标</span></a></h3><h4 id="_1-向量说明" tabindex="-1"><a class="header-anchor" href="#_1-向量说明"><span>[1]向量说明</span></a></h4><p>使用三个**『向量』<strong>在</strong>『Maven的仓库』<strong>中</strong>唯一<strong>的定位到一个</strong>『jar』**包。</p><ul><li><strong>groupId</strong>：公司或组织的 id</li><li><strong>artifactId</strong>：一个项目或者是项目中的一个模块的 id</li><li><strong>version</strong>：版本号</li></ul><h4 id="_2-三个向量的取值方式" tabindex="-1"><a class="header-anchor" href="#_2-三个向量的取值方式"><span>[2]三个向量的取值方式</span></a></h4><ul><li>groupId：公司或组织域名的倒序，通常也会加上项目名称 <ul><li>例如：com.atchen.maven</li></ul></li><li>artifactId：模块的名称，将来作为 Maven 工程的工程名</li><li>version：模块的版本号，根据自己的需要设定 <ul><li>例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本</li><li>例如：RELEASE 表示正式版本</li></ul></li></ul><p>举例：</p><ul><li>groupId：com.chen.maven</li><li>artifactId：pro01-atchen-maven</li><li>version：1.0-SNAPSHOT</li></ul><h3 id="_3坐标和仓库中-jar-包的存储路径之间的对应关系" tabindex="-1"><a class="header-anchor" href="#_3坐标和仓库中-jar-包的存储路径之间的对应关系"><span>③坐标和仓库中 jar 包的存储路径之间的对应关系</span></a></h3><p>坐标：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;javax.servlet&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;servlet-api&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;2.5&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面坐标对应的 jar 包在 Maven 本地仓库中的位置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Maven本地仓库根目录\\javax\\servlet\\servlet-api\\2.5\\servlet-api-2.5.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一定要学会根据坐标到本地仓库中找到对应的 jar 包。</p><h2 id="_2、实验操作" tabindex="-1"><a class="header-anchor" href="#_2、实验操作"><span>2、实验操作</span></a></h2><h3 id="_1创建目录作为后面操作的工作空间" tabindex="-1"><a class="header-anchor" href="#_1创建目录作为后面操作的工作空间"><span>①创建目录作为后面操作的工作空间</span></a></h3><p>例如：D:maven\\maven-workspace\\spaceVideo</p><p>此时我们已经有了三个目录，分别是：</p><ul><li>Maven 核心程序：中军大帐</li><li>Maven 本地仓库：兵营</li><li>本地工作空间：战场</li></ul><h3 id="_2在工作空间目录下打开命令行窗口" tabindex="-1"><a class="header-anchor" href="#_2在工作空间目录下打开命令行窗口"><span>②在工作空间目录下打开命令行窗口</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/1682675802157.png" alt="1682675802157" tabindex="0" loading="lazy"><figcaption>1682675802157</figcaption></figure><h3 id="_3使用命令生成maven工程" tabindex="-1"><a class="header-anchor" href="#_3使用命令生成maven工程"><span>③使用命令生成Maven工程</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img008.be45c9ad.png" alt="images" tabindex="0" loading="lazy"><figcaption>images</figcaption></figure><p>运行 <strong>mvn archetype:generate</strong> 命令</p><p>下面根据提示操作</p><p>Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7:【直接回车，使用默认值】</p><p>Define value for property &#39;groupId&#39;: com.chen.maven</p><p>Define value for property &#39;artifactId&#39;: pro01-maven-java</p><p>Define value for property &#39;version&#39; 1.0-SNAPSHOT: :【直接回车，使用默认值】</p><p>Define value for property &#39;package&#39; com.chen.maven: :【直接回车，使用默认值】</p><p>Confirm properties configuration: groupId: com.chen.maven artifactId: pro01-maven-java version: 1.0-SNAPSHOT package: com.chen.maven Y: :【直接回车，表示确认。如果前面有输入错误，想要重新输入，则输入 N 再回车。】</p><h3 id="_4调整" tabindex="-1"><a class="header-anchor" href="#_4调整"><span>④调整</span></a></h3><p>Maven 默认生成的工程，对 junit 依赖的是较低的 3.8.1 版本，我们可以改成较适合的 4.12 版本。</p><p>自动生成的 App.java 和 AppTest.java 可以删除。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 依赖信息配置 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- dependencies复数标签：里面包含dependency单数标签 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	&lt;!-- dependency单数标签：配置一个具体的依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		&lt;!-- 通过坐标来依赖其他jar包 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;junit&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;junit&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;4.12&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		&lt;!-- 依赖的范围 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;test&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5自动生成的-pom-xml-解读" tabindex="-1"><a class="header-anchor" href="#_5自动生成的-pom-xml-解读"><span>⑤自动生成的 pom.xml 解读</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  &lt;!-- 当前Maven工程的坐标 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;com.chen.maven&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro01-maven-java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;1.0-SNAPSHOT&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  &lt;!-- 当前Maven工程的打包方式，可选值有下面三种： --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  &lt;!-- jar：表示这个工程是一个Java工程  --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  &lt;!-- war：表示这个工程是一个Web工程 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  &lt;!-- pom：表示这个工程是“管理其他工程”的工程 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">packaging</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;jar&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">packaging</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro01-maven-java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;http://maven.apache.org&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	&lt;!-- 工程构建过程中读取源码时使用的字符集 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">project.build.sourceEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;UTF-8&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">project.build.sourceEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  &lt;!-- 当前工程所依赖的jar包 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	&lt;!-- 使用dependency配置一个具体的依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	  &lt;!-- 在dependency标签内使用具体的坐标依赖我们需要的一个jar包 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;junit&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;junit&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;4.12&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	  &lt;!-- scope标签配置依赖的范围 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;test&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、maven核心概念-pom" tabindex="-1"><a class="header-anchor" href="#_3、maven核心概念-pom"><span>3、Maven核心概念：POM</span></a></h2><h3 id="_1含义" tabindex="-1"><a class="header-anchor" href="#_1含义"><span>①含义</span></a></h3><p>POM：<strong>P</strong>roject <strong>O</strong>bject <strong>M</strong>odel，项目对象模型。和 POM 类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现。</p><h3 id="_2模型化思想" tabindex="-1"><a class="header-anchor" href="#_2模型化思想"><span>②模型化思想</span></a></h3><p>POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算与现实事物相关的数据。</p><h3 id="_3对应的配置文件" tabindex="-1"><a class="header-anchor" href="#_3对应的配置文件"><span>③对应的配置文件</span></a></h3><p>POM 理念集中体现在 Maven 工程根目录下 <strong>pom.xml</strong> 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用。</p><h2 id="_4、maven核心概念-约定的目录结构" tabindex="-1"><a class="header-anchor" href="#_4、maven核心概念-约定的目录结构"><span>4、Maven核心概念：约定的目录结构</span></a></h2><h3 id="_1各个目录的作用" tabindex="-1"><a class="header-anchor" href="#_1各个目录的作用"><span>①各个目录的作用</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img011.621b1ac3.png" alt="./images" tabindex="0" loading="lazy"><figcaption>./images</figcaption></figure><p>另外还有一个 target 目录专门存放构建操作输出的结果。</p><h3 id="_2约定目录结构的意义" tabindex="-1"><a class="header-anchor" href="#_2约定目录结构的意义"><span>②约定目录结构的意义</span></a></h3><p>Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录。</p><h3 id="_3约定大于配置" tabindex="-1"><a class="header-anchor" href="#_3约定大于配置"><span>③约定大于配置</span></a></h3><p>Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。</p><p>目前开发领域的技术发展趋势就是：约定大于配置，配置大于编码。n：命令行环境</p><h1 id="在-maven-工程中编写代码" tabindex="-1"><a class="header-anchor" href="#在-maven-工程中编写代码"><span>在 Maven 工程中编写代码</span></a></h1><h2 id="_1、主体程序" tabindex="-1"><a class="header-anchor" href="#_1、主体程序"><span>1、主体程序</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img012.0bcc2c5d-1682678008489.png" alt="./images" tabindex="0" loading="lazy"><figcaption>./images</figcaption></figure><p>主体程序指的是被测试的程序，同时也是将来在项目中真正要使用的程序。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;"> com.chen.maven</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> j;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、测试程序" tabindex="-1"><a class="header-anchor" href="#_2、测试程序"><span>2、测试程序</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img013.8b57a581-1682678008469.png" alt="./images" tabindex="0" loading="lazy"><figcaption>./images</figcaption></figure><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;"> com.chen.maven</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.junit.Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> com.chen.maven.Calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 静态导入的效果是将Assert类中的静态资源导入当前类</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 这样一来，在当前类中就可以直接使用Assert类中的静态资源，不需要写类名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.junit.Assert.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> CalculatorTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> testSum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 1.创建Calculator对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">		Calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> calculator</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 2.调用Calculator对象的方法，获取到程序运行实际的结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> actualResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 3.声明一个变量，表示程序运行期待的结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> expectedResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 4.使用断言来判断实际结果和期待结果是否一致</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 如果一致：测试通过，不会抛出异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 如果不一致：抛出异常，测试失败</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">		assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(expectedResult, actualResult);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="执行-maven-的构建命令" tabindex="-1"><a class="header-anchor" href="#执行-maven-的构建命令"><span>执行 Maven 的构建命令</span></a></h1><h2 id="_1、要求" tabindex="-1"><a class="header-anchor" href="#_1、要求"><span>1、要求</span></a></h2><p>运行 Maven 中和构建操作相关的命令时，必须进入到 pom.xml 所在的目录。如果没有在 pom.xml 所在的目录运行 Maven 的构建命令，那么会看到下面的错误信息：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">The</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> goal you specified requires a project to execute but there is no </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">POM</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> in </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> directory</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>mvn -v 命令和构建操作无关，只要正确配置了 PATH，在任何目录下执行都可以。而构建相关的命令要在 pom.xml 所在目录下运行——操作哪个工程，就进入这个工程的 pom.xml 目录。</p><h2 id="_2、清理操作" tabindex="-1"><a class="header-anchor" href="#_2、清理操作"><span>2、清理操作</span></a></h2><p>mvn clean</p><p>效果：删除 target 目录</p><h2 id="_3、编译操作" tabindex="-1"><a class="header-anchor" href="#_3、编译操作"><span>3、编译操作</span></a></h2><p>主程序编译：mvn compile</p><p>测试程序编译：mvn test-compile</p><p>主体程序编译结果存放的目录：target/classes</p><p>测试程序编译结果存放的目录：target/test-classes</p><h2 id="_4、测试操作" tabindex="-1"><a class="header-anchor" href="#_4、测试操作"><span>4、测试操作</span></a></h2><p>mvn test</p><p>测试的报告存放的目录：target/surefire-reports</p><h2 id="_5、打包操作" tabindex="-1"><a class="header-anchor" href="#_5、打包操作"><span>5、打包操作</span></a></h2><p>mvn package</p><p>打包的结果——jar 包，存放的目录：target</p><h2 id="_6、安装操作" tabindex="-1"><a class="header-anchor" href="#_6、安装操作"><span>6、安装操作</span></a></h2><p>mvn install</p><div class="language-log line-numbers-mode" data-highlighter="shiki" data-ext="log" data-title="log" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#98C379;">[INFO]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Installing D:\\maven-workspace\\space201026\\pro01-maven-java\\target\\pro01-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">maven-java-1.0-SNAPSHOT.jar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> to D:\\maven-rep1026\\com\\chen\\maven\\pro01-maven-java\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-SNAPSHOT\\pro01-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">maven-java-1.0-SNAPSHOT.jar</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#98C379;">[INFO]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Installing D:\\maven-workspace\\space201026\\pro01-maven-java\\pom.xml to D:\\maven-rep1026\\com\\chen\\maven\\pro01-maven-java\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-SNAPSHOT\\pro01-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">maven-java-1.0-SNAPSHOT.pom</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装的效果是将本地构建过程中生成的 jar 包存入 Maven 本地仓库。这个 jar 包在 Maven 仓库中的路径是根据它的坐标生成的。</p><p>坐标信息如下：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;com.chen.maven&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro01-maven-java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;1.0-SNAPSHOT&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Maven 仓库中生成的路径如下：</p><div class="language-log line-numbers-mode" data-highlighter="shiki" data-ext="log" data-title="log" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#ABB2BF;">D</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:\\maven-rep1026\\com\\chen\\maven\\pro01-maven-java\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-SNAPSHOT\\pro01-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">maven-java-1.0-SNAPSHOT.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>另外，安装操作还会将 pom.xml 文件转换为 XXX.pom 文件一起存入本地仓库。所以我们在 Maven 的本地仓库中想看一个 jar 包原始的 pom.xml 文件时，查看对应 XXX.pom 文件即可，它们是名字发生了改变，本质上是同一个文件。</p><h1 id="创建-maven-版的-web-工程" tabindex="-1"><a class="header-anchor" href="#创建-maven-版的-web-工程"><span>创建 Maven 版的 Web 工程</span></a></h1><h2 id="_1、说明" tabindex="-1"><a class="header-anchor" href="#_1、说明"><span>1、说明</span></a></h2><p>使用 mvn archetype:generate 命令生成 Web 工程时，需要使用一个专门的 archetype。这个专门生成 Web 工程骨架的 archetype 可以参照官网看到它的用法：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/1682684649467.png" alt="1682684649467" tabindex="0" loading="lazy"><figcaption>1682684649467</figcaption></figure><p>参数 archetypeGroupId、archetypeArtifactId、archetypeVersion 用来指定现在使用的 maven-archetype-webapp 的坐标。</p><h2 id="_2、操作" tabindex="-1"><a class="header-anchor" href="#_2、操作"><span>2、操作</span></a></h2><p>注意：如果在上一个工程的目录下执行 mvn archetype:generate 命令，那么 Maven 会报错：不能在一个非 pom 的工程下再创建其他工程。所以不要再刚才创建的工程里再创建新的工程，<strong>请回到工作空间根目录</strong>来操作。</p><p>然后运行生成工程的命令：</p><div class="language-log line-numbers-mode" data-highlighter="shiki" data-ext="log" data-title="log" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">mvn archetype:generate -DarchetypeGroupId=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">org.apache.maven.archetypes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>下面的操作按照提示执行：</p><p>Define value for property &#39;groupId&#39;: com.chen.maven Define value for property &#39;artifactId&#39;: pro02-maven-web Define value for property &#39;version&#39; 1.0-SNAPSHOT: :【直接回车，使用默认值】</p><p>Define value for property &#39;package&#39; com.chen.maven: :【直接回车，使用默认值】 Confirm properties configuration: groupId: com.chen.maven artifactId: pro02-maven-web version: 1.0-SNAPSHOT package: com.chen.maven Y: :【直接回车，表示确认】</p><h2 id="_3、生成的pom-xml" tabindex="-1"><a class="header-anchor" href="#_3、生成的pom-xml"><span>3、生成的pom.xml</span></a></h2><p>确认打包的方式是war包形式</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">packaging</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;war&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">packaging</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>1</p><h2 id="_4、生成的web工程的目录结构" tabindex="-1"><a class="header-anchor" href="#_4、生成的web工程的目录结构"><span>4、生成的Web工程的目录结构</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095212622.png" alt="image-20240712095212622" tabindex="0" loading="lazy"><figcaption>image-20240712095212622</figcaption></figure><p>webapp 目录下有 index.jsp</p><p>WEB-INF 目录下有 web.xml</p><h2 id="_5、创建-servlet" tabindex="-1"><a class="header-anchor" href="#_5、创建-servlet"><span>5、创建 Servlet</span></a></h2><h3 id="_1在-main-目录下创建-java-目录" tabindex="-1"><a class="header-anchor" href="#_1在-main-目录下创建-java-目录"><span>①在 main 目录下创建 java 目录</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095252119.png" alt="image-20240712095252119" tabindex="0" loading="lazy"><figcaption>image-20240712095252119</figcaption></figure><h3 id="_2在-java-目录下创建-servlet-类所在的包的目录" tabindex="-1"><a class="header-anchor" href="#_2在-java-目录下创建-servlet-类所在的包的目录"><span>②在 java 目录下创建 Servlet 类所在的包的目录</span></a></h3><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095302641.png" alt="image-20240712095302641" tabindex="0" loading="lazy"><figcaption>image-20240712095302641</figcaption></figure><h3 id="_3在包下创建-servlet-类" tabindex="-1"><a class="header-anchor" href="#_3在包下创建-servlet-类"><span>③在包下创建 Servlet 类</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;"> com.chen.maven</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServletRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServletResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.io.IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> HelloServlet</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> HttpServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> doGet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">		response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;hello maven web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4在-web-xml-中注册-servlet" tabindex="-1"><a class="header-anchor" href="#_4在-web-xml-中注册-servlet"><span>④在 web.xml 中注册 Servlet</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;helloServlet&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;com.chen.maven.HelloServlet&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;helloServlet&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;/helloServlet&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、在-index-jsp-页面编写超链接" tabindex="-1"><a class="header-anchor" href="#_6、在-index-jsp-页面编写超链接"><span>6、在 index.jsp 页面编写超链接</span></a></h2><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;Hello World!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;helloServlet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;Access Servlet&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JSP全称是 Java Server Page，和 Thymeleaf 一样，是服务器端页面渲染技术。这里我们不必关心 JSP 语法细节，编写一个超链接标签即可。</p><h2 id="_7、编译" tabindex="-1"><a class="header-anchor" href="#_7、编译"><span>7、编译</span></a></h2><p>此时直接执行 mvn compile 命令出错：</p><p>DANGER</p><p>程序包 javax.servlet.http 不存在</p><p>程序包 javax.servlet 不存在</p><p>找不到符号</p><p>符号: 类 HttpServlet</p><p>……</p><p>上面的错误信息说明：我们的 Web 工程用到了 HttpServlet 这个类，而 HttpServlet 这个类属于 servlet-api.jar 这个 jar 包。此时我们说，Web 工程需要依赖 servlet-api.jar 包。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img018.f836f056.png" alt="img018.f836f056" tabindex="0" loading="lazy"><figcaption>img018.f836f056</figcaption></figure><h2 id="_8、配置对-servlet-api-jar-包的依赖" tabindex="-1"><a class="header-anchor" href="#_8、配置对-servlet-api-jar-包的依赖"><span>8、配置对 servlet-api.jar 包的依赖</span></a></h2><p>对于不知道详细信息的依赖可以到https://mvnrepository.com/网站查询。使用关键词搜索，然后在搜索结果列表中选择适合的使用。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img019.46741083.png" alt="img019.46741083" tabindex="0" loading="lazy"><figcaption>img019.46741083</figcaption></figure><p>比如，我们找到的 servlet-api 的依赖信息：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;javax.servlet&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;javax.servlet-api&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;3.1.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;provided&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以把上面的信息加入 pom.xml。重新执行 mvn compile 命令。</p><h2 id="_9、将-web-工程打包为-war-包" tabindex="-1"><a class="header-anchor" href="#_9、将-web-工程打包为-war-包"><span>9、将 Web 工程打包为 war 包</span></a></h2><p>运行 mvn package 命令，生成 war 包的位置如下图所示：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095342870.png" alt="image-20240712095342870" tabindex="0" loading="lazy"><figcaption>image-20240712095342870</figcaption></figure><h2 id="_10、将-war-包部署到-tomcat-上运行" tabindex="-1"><a class="header-anchor" href="#_10、将-war-包部署到-tomcat-上运行"><span>10、将 war 包部署到 Tomcat 上运行</span></a></h2><p>将 war 包复制到 Tomcat/webapps 目录下</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095350152.png" alt="image-20240712095350152" tabindex="0" loading="lazy"><figcaption>image-20240712095350152</figcaption></figure><p>启动 Tomcat：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095407055.png" alt="image-20240712095407055" tabindex="0" loading="lazy"><figcaption>image-20240712095407055</figcaption></figure><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095418191.png" alt="image-20240712095418191" tabindex="0" loading="lazy"><figcaption>image-20240712095418191</figcaption></figure><p>通过浏览器尝试访问：http://localhost:8080/pro02-maven-web/index.jsp</p><h1 id="让-web-工程依赖-java-工程" tabindex="-1"><a class="header-anchor" href="#让-web-工程依赖-java-工程"><span>让 Web 工程依赖 Java 工程</span></a></h1><h2 id="_1、观念" tabindex="-1"><a class="header-anchor" href="#_1、观念"><span>1、观念</span></a></h2><p>明确一个意识：从来只有 Web 工程依赖 Java 工程，没有反过来 Java 工程依赖 Web 工程。本质上来说，Web 工程依赖的 Java 工程其实就是 Web 工程里导入的 jar 包。最终 Java 工程会变成 jar 包，放在 Web 工程的 WEB-INF/lib 目录下。</p><h2 id="_2、操作-1" tabindex="-1"><a class="header-anchor" href="#_2、操作-1"><span>2、操作</span></a></h2><p>在 pro02-maven-web 工程的 pom.xml 中，找到 dependencies 标签，在 dependencies 标签中做如下配置：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 配置对Java工程pro01-maven-java的依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 具体的配置方式：在dependency标签内使用坐标实现依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;com.chen.maven&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro01-maven-java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;1.0-SNAPSHOT&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、在-web-工程中-编写测试代码" tabindex="-1"><a class="header-anchor" href="#_3、在-web-工程中-编写测试代码"><span>3、在 Web 工程中，编写测试代码</span></a></h2><h3 id="_1补充创建目录" tabindex="-1"><a class="header-anchor" href="#_1补充创建目录"><span>①补充创建目录</span></a></h3><p>pro02-maven-web**\\src\\test\\java\\com\\chen\\maven**</p><h3 id="_2确认-web-工程依赖了-junit" tabindex="-1"><a class="header-anchor" href="#_2确认-web-工程依赖了-junit"><span>②确认 Web 工程依赖了 junit</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;junit&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;junit&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;4.12&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;test&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3创建测试类" tabindex="-1"><a class="header-anchor" href="#_3创建测试类"><span>③创建测试类</span></a></h3><p>把 Java 工程的 CalculatorTest.java 类复制到 pro02-maven-wb**\\src\\test\\java\\com\\chen\\maven** 目录下</p><h2 id="_4、执行maven命令" tabindex="-1"><a class="header-anchor" href="#_4、执行maven命令"><span>4、执行Maven命令</span></a></h2><h3 id="_1测试命令" tabindex="-1"><a class="header-anchor" href="#_1测试命令"><span>①测试命令</span></a></h3><p>mvn test</p><p>说明：测试操作中会提前自动执行编译操作，测试成功就说明编译也是成功的。</p><h3 id="_2打包命令" tabindex="-1"><a class="header-anchor" href="#_2打包命令"><span>②打包命令</span></a></h3><p>mvn package</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img024.91b00e04.png" alt="img024.91b00e04" tabindex="0" loading="lazy"><figcaption>img024.91b00e04</figcaption></figure><p>通过查看 war 包内的结构，我们看到被 Web 工程依赖的 Java 工程确实是会变成 Web 工程的 WEB-INF/lib 目录下的 jar 包。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095440745.png" alt="image-20240712095440745" tabindex="0" loading="lazy"><figcaption>image-20240712095440745</figcaption></figure><h3 id="_3查看当前-web-工程所依赖的-jar-包的列表" tabindex="-1"><a class="header-anchor" href="#_3查看当前-web-工程所依赖的-jar-包的列表"><span>③查看当前 Web 工程所依赖的 jar 包的列表</span></a></h3><p>mvn dependency:list</p><p>[INFO] The following files have been resolved: [INFO] org.hamcrest:hamcrest-core🫙1.3:test [INFO] javax.servlet:javax.servlet-api🫙3.1.0:provided [INFO] com.chen.maven:pro01-maven-java🫙1.0-SNAPSHOT:compile [INFO] junit:junit🫙4.12:test</p><p>说明：javax.servlet:javax.servlet-api🫙3.1.0:provided 格式显示的是一个 jar 包的坐标信息。格式是：</p><p>groupId:artifactId:打包方式:version:依赖的范围</p><p>这样的格式虽然和我们 XML 配置文件中坐标的格式不同，但是本质上还是坐标信息，大家需要能够认识这样的格式，将来从 Maven 命令的日志或错误信息中看到这样格式的信息，就能够识别出来这是坐标。进而根据坐标到Maven 仓库找到对应的jar包，用这样的方式解决我们遇到的报错的情况。</p><h3 id="_4以树形结构查看当前-web-工程的依赖信息" tabindex="-1"><a class="header-anchor" href="#_4以树形结构查看当前-web-工程的依赖信息"><span>④以树形结构查看当前 Web 工程的依赖信息</span></a></h3><p>mvn dependency:tree</p><p>[INFO] com.chen.maven:pro02-maven-web:war:1.0-SNAPSHOT [INFO] +- junit:junit🫙4.12:test [INFO] | - org.hamcrest:hamcrest-core🫙1.3:test [INFO] +- javax.servlet:javax.servlet-api🫙3.1.0:provided [INFO] - com.chen.maven:pro01-maven-java🫙1.0-SNAPSHOT:compile</p><p>我们在 pom.xml 中并没有依赖 hamcrest-core，但是它却被加入了我们依赖的列表。原因是：junit 依赖了hamcrest-core，然后基于依赖的传递性，hamcrest-core 被传递到我们的工程了。</p><h1 id="测试依赖的范围" tabindex="-1"><a class="header-anchor" href="#测试依赖的范围"><span>测试依赖的范围</span></a></h1><h2 id="_1、依赖范围" tabindex="-1"><a class="header-anchor" href="#_1、依赖范围"><span>1、依赖范围</span></a></h2><p>标签的位置：dependencies/dependency/<strong>scope</strong></p><p>标签的可选值：<strong>compile</strong>/<strong>test</strong>/<strong>provided</strong>/system/runtime/<strong>import</strong></p><p>默认的标签是compile</p><h3 id="_1compile-和-test-对比" tabindex="-1"><a class="header-anchor" href="#_1compile-和-test-对比"><span>①compile 和 test 对比</span></a></h3><p>例：在test目录下，导入compile类型的依赖是有效的</p><table><thead><tr><th></th><th>main目录（空间）</th><th>test目录（空间）</th><th>开发过程（时间）</th><th>部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td>有效</td><td>有效</td><td>有效</td><td>有效</td></tr><tr><td>test</td><td>无效</td><td>有效</td><td>有效</td><td>无效</td></tr></tbody></table><h3 id="_2compile-和-provided-对比" tabindex="-1"><a class="header-anchor" href="#_2compile-和-provided-对比"><span>②compile 和 provided 对比</span></a></h3><table><thead><tr><th></th><th>main目录（空间）</th><th>test目录（空间）</th><th>开发过程（时间）</th><th>部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td>有效</td><td>有效</td><td>有效</td><td>有效</td></tr><tr><td>provided</td><td>有效</td><td>有效</td><td>有效</td><td>无效</td></tr></tbody></table><h3 id="_3结论" tabindex="-1"><a class="header-anchor" href="#_3结论"><span>③结论</span></a></h3><p>compile：通常使用的第三方框架的 jar 包这样在项目实际运行时真正要用到的 jar 包都是以 compile 范围进行依赖的。比如 SSM 框架所需jar包。</p><p>test：测试过程中使用的 jar 包，以 test 范围依赖进来。比如 junit。</p><p>provided：在开发过程中需要用到的“服务器上的 jar 包”通常以 provided 范围依赖进来。比如 servlet-api、jsp-api。而这个范围的 jar 包之所以不参与部署、不放进 war 包，就是避免和服务器上已有的同类 jar 包产生冲突，同时减轻服务器的负担。说白了就是：“<strong>服务器上已经有了，你就别带啦！</strong>”</p><h2 id="_2、测试" tabindex="-1"><a class="header-anchor" href="#_2、测试"><span>2、测试</span></a></h2><h3 id="_1验证-compile-范围对-main-目录有效" tabindex="-1"><a class="header-anchor" href="#_1验证-compile-范围对-main-目录有效"><span>①验证 compile 范围对 main 目录有效</span></a></h3><p>TIP</p><p>main目录下的类：HelloServlet 使用compile范围导入的依赖：pro01-chen-maven</p><p>验证：使用compile范围导入的依赖对main目录下的类来说是有效的</p><p>有效：HelloServlet 能够使用 pro01-chen-maven 工程中的 Calculator 类</p><p>验证方式：在 HelloServlet 类中导入 Calculator 类，然后编译就说明有效。</p><h3 id="_2验证test范围对main目录无效" tabindex="-1"><a class="header-anchor" href="#_2验证test范围对main目录无效"><span>②验证test范围对main目录无效</span></a></h3><p>测试方式：在主体程序中导入org.junit.Test这个注解，然后执行编译。</p><p>具体操作：在pro01-maven-java\\src\\main\\java\\com\\chen\\maven目录下修改Calculator.java</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;"> com.chen.maven</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.junit.Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> j;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行Maven编译命令：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[ERROR] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">maven</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">workspace</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">space201026</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">pro01</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">maven</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">java</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">src</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">java</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">com</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">chen</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">maven</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">java</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">] 程序包org</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">junit不存在</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3验证test和provided范围不参与服务器部署" tabindex="-1"><a class="header-anchor" href="#_3验证test和provided范围不参与服务器部署"><span>③验证test和provided范围不参与服务器部署</span></a></h3><p>其实就是验证：通过compile范围依赖的jar包会放入war包，通过test范围依赖的jar包不会放入war包。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img026.0ad36150.png" alt="img026.0ad36150" tabindex="0" loading="lazy"><figcaption>img026.0ad36150</figcaption></figure><h3 id="_4验证provided范围对测试程序有效" tabindex="-1"><a class="header-anchor" href="#_4验证provided范围对测试程序有效"><span>④验证provided范围对测试程序有效</span></a></h3><p>测试方式是在pro02-maven-web的测试程序中加入servlet-api.jar包中的类。</p><p>修改：<strong>pro02-maven-web</strong>\\src\\test\\java\\com\\chen\\maven\\CalculatorTest.java</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;"> com.chen.maven</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServletRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServletResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.junit.Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> com.chen.maven.Calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 静态导入的效果是将Assert类中的静态资源导入当前类</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 这样一来，在当前类中就可以直接使用Assert类中的静态资源，不需要写类名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.junit.Assert.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> CalculatorTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> testSum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 1.创建Calculator对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">		Calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> calculator</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 2.调用Calculator对象的方法，获取到程序运行实际的结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> actualResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 3.声明一个变量，表示程序运行期待的结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> expectedResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 4.使用断言来判断实际结果和期待结果是否一致</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 如果一致：测试通过，不会抛出异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		// 如果不一致：抛出异常，测试失败</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">		assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(expectedResult, actualResult);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后运行Maven的编译命令：mvn compile</p><p>然后看到编译成功。</p><h1 id="测试依赖的传递性" tabindex="-1"><a class="header-anchor" href="#测试依赖的传递性"><span>测试依赖的传递性</span></a></h1><h2 id="_1、依赖的传递性" tabindex="-1"><a class="header-anchor" href="#_1、依赖的传递性"><span>1、依赖的传递性</span></a></h2><h3 id="_1概念" tabindex="-1"><a class="header-anchor" href="#_1概念"><span>①概念</span></a></h3><p>A 依赖 B，B 依赖 C，那么在 A 没有配置对 C 的依赖的情况下，A 里面能不能直接使用 C？</p><h3 id="_2传递的原则" tabindex="-1"><a class="header-anchor" href="#_2传递的原则"><span>②传递的原则</span></a></h3><p>在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围。</p><ul><li>B 依赖 C 时使用 compile 范围：可以传递</li><li>B 依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地方明确配置依赖才可以。</li></ul><h2 id="_2、使用-compile-范围依赖-spring-core" tabindex="-1"><a class="header-anchor" href="#_2、使用-compile-范围依赖-spring-core"><span>2、使用 compile 范围依赖 spring-core</span></a></h2><p>测试方式：让 pro01-maven-java 工程依赖 spring-core</p><p>具体操作：编辑 pro01-maven-java 工程根目录下 pom.xml</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-core&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;4.0.0.RELEASE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 mvn dependency:tree 命令查看效果：</p><p>[INFO] com.chen.maven:pro01-maven-java🫙1.0-SNAPSHOT [INFO] +- junit:junit🫙4.12:test [INFO] | - org.hamcrest:hamcrest-core🫙1.3:test [INFO] - org.springframework:spring-core🫙4.0.0.RELEASE:compile [INFO] - commons-logging:commons-logging🫙1.1.1:compile</p><p>还可以在 Web 工程中，使用 mvn dependency:tree 命令查看效果（<strong>需要重新将 pro01-maven-java 安装到仓库）</strong>：</p><p>[INFO] com.chen.maven:pro02-maven-web:war:1.0-SNAPSHOT [INFO] +- junit:junit🫙4.12:test [INFO] | - org.hamcrest:hamcrest-core🫙1.3:test [INFO] +- javax.servlet:javax.servlet-api🫙3.1.0:provided [INFO] - com.chen.maven:pro01-maven-java🫙1.0-SNAPSHOT:compile [INFO] - org.springframework:spring-core🫙4.0.0.RELEASE:compile [INFO] - commons-logging:commons-logging🫙1.1.1:compile</p><h2 id="_3、验证-test-和-provided-范围不能传递" tabindex="-1"><a class="header-anchor" href="#_3、验证-test-和-provided-范围不能传递"><span>3、验证 test 和 provided 范围不能传递</span></a></h2><p>从上面的例子已经能够看到，pro01-maven-java 依赖了 junit，但是在 pro02-maven-web 工程中查看依赖树的时候并没有看到 junit。</p><p>要验证 provided 范围不能传递，可以在 pro01-maven-java 工程中加入 servlet-api 的依赖。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;javax.servlet&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;javax.servlet-api&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;3.1.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;provided&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果还是和之前一样：</p><p>[INFO] com.chen.maven:pro02-maven-web:war:1.0-SNAPSHOT [INFO] +- junit:junit🫙4.12:test [INFO] | - org.hamcrest:hamcrest-core🫙1.3:test [INFO] +- javax.servlet:javax.servlet-api🫙3.1.0:provided [INFO] - com.chen.maven:pro01-maven-java🫙1.0-SNAPSHOT:compile [INFO] - org.springframework:spring-core🫙4.0.0.RELEASE:compile [INFO] - commons-logging:commons-logging🫙1.1.1:compile</p><h1 id="测试依赖的排除" tabindex="-1"><a class="header-anchor" href="#测试依赖的排除"><span>测试依赖的排除</span></a></h1><h2 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念"><span>1、概念</span></a></h2><p>当 A 依赖 B，B 依赖 C 而且 C 可以传递到 A 的时候，A 不想要 C，需要在 A 里面把 C 排除掉。而往往这种情况都是为了避免 jar 包之间的冲突。</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img027.2faff879.png" alt="img027.2faff879" tabindex="0" loading="lazy"><figcaption>img027.2faff879</figcaption></figure><p>所以配置依赖的排除其实就是阻止某些 jar 包的传递。因为这样的 jar 包传递过来会和其他 jar 包冲突。</p><h2 id="_2、配置方式" tabindex="-1"><a class="header-anchor" href="#_2、配置方式"><span>2、配置方式</span></a></h2><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;com.atguigu.maven&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro01-maven-java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;1.0-SNAPSHOT&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;compile&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	&lt;!-- 使用excludes标签配置依赖的排除	--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">exclusions</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		&lt;!-- 在exclude标签中配置一个具体的排除 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">exclusion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">			&lt;!-- 指定要排除的依赖的坐标（不需要写version） --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;commons-logging&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;commons-logging&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">exclusion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">exclusions</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、测试" tabindex="-1"><a class="header-anchor" href="#_3、测试"><span>3、测试</span></a></h2><p>测试的方式：在 pro02-maven-web 工程中配置对 commons-logging 的排除</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;com.atguigu.maven&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro01-maven-java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;1.0-SNAPSHOT&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;compile&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	&lt;!-- 使用excludes标签配置依赖的排除	--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">exclusions</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		&lt;!-- 在exclude标签中配置一个具体的排除 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">exclusion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">			&lt;!-- 指定要排除的依赖的坐标（不需要写version） --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;commons-logging&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;commons-logging&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">exclusion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">exclusions</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 mvn dependency:tree 命令查看效果：</p><p>[INFO] com.atguigu.maven:pro02-maven-web:war:1.0-SNAPSHOT [INFO] +- junit:junit🫙4.12:test [INFO] | - org.hamcrest:hamcrest-core🫙1.3:test [INFO] +- javax.servlet:javax.servlet-api🫙3.1.0:provided [INFO] - com.atguigu.maven:pro01-maven-java🫙1.0-SNAPSHOT:compile [INFO] - org.springframework:spring-core🫙4.0.0.RELEASE:compile</p><p>发现在 spring-core 下面就没有 commons-logging 了。</p><h1 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h1><h2 id="_1、概念-1" tabindex="-1"><a class="header-anchor" href="#_1、概念-1"><span>1、概念</span></a></h2><p>Maven工程之间，A 工程继承 B 工程</p><ul><li>B 工程：父工程</li><li>A 工程：子工程</li></ul><p>本质上是 A 工程的 pom.xml 中的配置继承了 B 工程中 pom.xml 的配置。</p><h2 id="_2、作用" tabindex="-1"><a class="header-anchor" href="#_2、作用"><span>2、作用</span></a></h2><p>在父工程中统一管理项目中的依赖信息，具体来说是管理依赖信息的版本。</p><p>它的背景是：</p><ul><li>对一个比较大型的项目进行了模块拆分。</li><li>一个 project 下面，创建了很多个 module。</li><li>每一个 module 都需要配置自己的依赖信息。</li></ul><p>它背后的需求是：</p><ul><li>在每一个 module 中各自维护各自的依赖信息很容易发生出入，不易统一管理。</li><li>使用同一个框架内的不同 jar 包，它们应该是同一个版本，所以整个项目中使用的框架版本需要统一。</li><li>使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索。</li></ul><p>通过在父工程中为整个项目维护依赖信息的组合既<strong>保证了整个项目使用规范、准确的 jar 包</strong>；又能够将<strong>以往的经验沉淀</strong>下来，节约时间和精力。</p><h2 id="_3、举例" tabindex="-1"><a class="header-anchor" href="#_3、举例"><span>3、举例</span></a></h2><p>在一个工程中依赖多个 Spring 的 jar 包</p><p>[INFO] +- org.springframework:spring-core🫙4.0.0.RELEASE:compile [INFO] | - commons-logging:commons-logging🫙1.1.1:compile [INFO] +- org.springframework:spring-beans🫙4.0.0.RELEASE:compile [INFO] +- org.springframework:spring-context🫙4.0.0.RELEASE:compile [INFO] +- org.springframework:spring-expression🫙4.0.0.RELEASE:compile [INFO] +- org.springframework:spring-aop🫙4.0.0.RELEASE:compile [INFO] | - aopalliance:aopalliance🫙1.0:compile</p><p>使用 Spring 时要求所有 Spring 自己的 jar 包版本必须一致。为了能够对这些 jar 包的版本进行统一管理，我们使用继承这个机制，将所有版本信息统一在父工程中进行管理。</p><h2 id="_4、操作" tabindex="-1"><a class="header-anchor" href="#_4、操作"><span>4、操作</span></a></h2><h3 id="_1创建父工程" tabindex="-1"><a class="header-anchor" href="#_1创建父工程"><span>①创建父工程</span></a></h3><p>创建的过程和前面创建 pro01-maven-java 一样。</p><p>工程名称：pro03-maven-parent</p><p>工程创建好之后，要修改它的打包方式：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;com.atguigu.maven&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro03-maven-parent&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;1.0-SNAPSHOT&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  &lt;!-- 当前工程作为父工程，它要去管理子工程，所以打包方式必须是 pom --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">packaging</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pom&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">packaging</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有打包方式为 pom 的 Maven 工程能够管理其他 Maven 工程。打包方式为 pom 的 Maven 工程中不写业务代码，它是专门管理其他 Maven 工程的工程。</p><h3 id="_2创建模块工程" tabindex="-1"><a class="header-anchor" href="#_2创建模块工程"><span>②创建模块工程</span></a></h3><p>模块工程类似于 IDEA 中的 module，所以需要<strong>进入 pro03-maven-parent 工程的根目录</strong>，然后运行 mvn archetype:generate 命令来创建模块工程。</p><p>假设，我们创建三个模块工程：</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095508222.png" alt="image-20240712095508222" tabindex="0" loading="lazy"><figcaption>image-20240712095508222</figcaption></figure><h3 id="_3查看被添加新内容的父工程-pom-xml" tabindex="-1"><a class="header-anchor" href="#_3查看被添加新内容的父工程-pom-xml"><span>③查看被添加新内容的父工程 pom.xml</span></a></h3><p>下面 modules 和 module 标签是聚合功能的配置</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">modules</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro04-maven-module&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro05-maven-module&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro06-maven-module&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">modules</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4解读子工程的pom-xml" tabindex="-1"><a class="header-anchor" href="#_4解读子工程的pom-xml"><span>④解读子工程的pom.xml</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 使用parent标签指定当前工程的父工程 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	&lt;!-- 父工程的坐标 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;com.atguigu.maven&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro03-maven-parent&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;1.0-SNAPSHOT&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 子工程的坐标 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 如果子工程坐标中的groupId和version与父工程一致，那么可以省略 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- &lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro04-maven-module&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; --&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5在父工程中配置依赖的统一管理" tabindex="-1"><a class="header-anchor" href="#_5在父工程中配置依赖的统一管理"><span>⑤在父工程中配置依赖的统一管理</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 使用dependencyManagement标签配置对依赖的管理 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 被管理的依赖并没有真正被引入到工程 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependencyManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-core&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;4.0.0.RELEASE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-beans&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;4.0.0.RELEASE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-context&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;4.0.0.RELEASE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-expression&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;4.0.0.RELEASE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-aop&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;4.0.0.RELEASE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependencyManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6子工程中引用那些被父工程管理的依赖" tabindex="-1"><a class="header-anchor" href="#_6子工程中引用那些被父工程管理的依赖"><span>⑥子工程中引用那些被父工程管理的依赖</span></a></h3><p>关键点：省略版本号</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 子工程引用父工程中的依赖信息时，可以把版本号去掉。	--&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 把版本号去掉就表示子工程中这个依赖的版本由父工程决定。 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 具体来说是由父工程的dependencyManagement来决定。 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-core&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-beans&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-context&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-expression&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-aop&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7在父工程中升级依赖信息的版本" tabindex="-1"><a class="header-anchor" href="#_7在父工程中升级依赖信息的版本"><span>⑦在父工程中升级依赖信息的版本</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">……</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">				&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">				&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-beans&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">				&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;4.1.4.RELEASE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">……</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后子工程中运行mvn dependency:list，效果如下：</p><p>[INFO] org.springframework:spring-aop🫙4.1.4.RELEASE:compile [INFO] org.springframework:spring-core🫙4.1.4.RELEASE:compile [INFO] org.springframework:spring-context🫙4.1.4.RELEASE:compile [INFO] org.springframework:spring-beans🫙4.1.4.RELEASE:compile [INFO] org.springframework:spring-expression🫙4.1.4.RELEASE:compile</p><h3 id="_8在父工程中声明自定义属性" tabindex="-1"><a class="header-anchor" href="#_8在父工程中声明自定义属性"><span>⑧在父工程中声明自定义属性</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- 通过自定义属性，统一指定Spring的版本 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">project.build.sourceEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;UTF-8&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">project.build.sourceEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	&lt;!-- 自定义标签，维护Spring版本数据 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">atguigu.spring.version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;4.3.6.RELEASE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">atguigu.spring.version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要的地方使用\${}的形式来引用自定义的属性名：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">				&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">				&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;spring-core&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">				&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;\${atguigu.spring.version}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>真正实现“一处修改，处处生效”。</p><h2 id="_5、实际意义" tabindex="-1"><a class="header-anchor" href="#_5、实际意义"><span>5、实际意义</span></a></h2><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img037.53c95c38.jpg" alt="img037.53c95c38" tabindex="0" loading="lazy"><figcaption>img037.53c95c38</figcaption></figure><p>编写一套符合要求、开发各种功能都能正常工作的依赖组合并不容易。如果公司里已经有人总结了成熟的组合方案，那么再开发新项目时，如果不使用原有的积累，而是重新摸索，会浪费大量的时间。为了提高效率，我们可以使用工程继承的机制，让成熟的依赖组合方案能够保留下来。</p><p>如上图所示，公司级的父工程中管理的就是成熟的依赖组合方案，各个新项目、子系统各取所需即可.</p><h1 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合"><span>聚合</span></a></h1><h2 id="_1、聚合本身的含义" tabindex="-1"><a class="header-anchor" href="#_1、聚合本身的含义"><span>1、聚合本身的含义</span></a></h2><p>部分组成整体</p><figure><img src="https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img029.48831f65.jpg" alt="img029.48831f65" tabindex="0" loading="lazy"><figcaption>img029.48831f65</figcaption></figure><p>动画片《战神金刚》中的经典台词：“我来组成头部！我来组成手臂！”就是聚合关系最生动的体现。</p><h2 id="_2、maven-中的聚合" tabindex="-1"><a class="header-anchor" href="#_2、maven-中的聚合"><span>2、Maven 中的聚合</span></a></h2><p>使用一个“总工程”将各个“模块工程”汇集起来，作为一个整体对应完整的项目。</p><ul><li><p>项目：整体</p></li><li><p>模块：部分</p></li></ul><p>概念的对应关系：</p><p>从继承关系角度来看：</p><ul><li>父工程</li><li>子工程</li></ul><p>从聚合关系角度来看：</p><ul><li>总工程</li><li>模块工程</li></ul><h2 id="_3、好处" tabindex="-1"><a class="header-anchor" href="#_3、好处"><span>3、好处</span></a></h2><ul><li><p>一键执行 Maven 命令：很多构建命令都可以在“总工程”中一键执行。</p><p>以 mvn install 命令为例：Maven 要求有父工程时先安装父工程；有依赖的工程时，先安装被依赖的工程。我们自己考虑这些规则会很麻烦。但是工程聚合之后，在总工程执行 mvn install 可以一键完成安装，而且会自动按照正确的顺序执行。</p></li><li><p>配置聚合之后，各个模块工程会在总工程中展示一个列表，让项目中的各个模块一目了然。</p></li></ul><h2 id="_4、聚合的配置" tabindex="-1"><a class="header-anchor" href="#_4、聚合的配置"><span>4、聚合的配置</span></a></h2><p>在总工程中配置 modules 即可：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">modules</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro04-maven-module&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro05-maven-module&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;pro06-maven-module&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">modules</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、依赖循环问题" tabindex="-1"><a class="header-anchor" href="#_5、依赖循环问题"><span>5、依赖循环问题</span></a></h2><p>如果 A 工程依赖 B 工程，B 工程依赖 C 工程，C 工程又反过来依赖 A 工程，那么在执行构建操作时会报下面的错误：</p><p>DANGER</p><p>[ERROR] [ERROR] The projects in the reactor contain a cyclic reference:</p><p>这个错误的含义是：循环引用。</p>`,328),t=[e];function h(p,k){return a(),s("div",null,t)}const g=i(l,[["render",h],["__file","maven.html.vue"]]),c=JSON.parse('{"path":"/posts/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven.html","title":"Maven","lang":"zh-CN","frontmatter":{"title":"Maven","icon":"pen-to-square","date":"2023-01-13T00:00:00.000Z","category":["Maven"],"tag":["依赖加载","仓库"],"description":"Maven 根据坐标创建 Maven 工程 1、Maven 核心概念：坐标 ①数学中的坐标 image-20240712095021593image-20240712095021593 使用 x、y、z 三个**『向量』作为空间的坐标系，可以在『空间』中唯一的定位到一个『点』**。 ②Maven中的坐标 [1]向量说明 使用三个**『向量』在『Mave...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven.html"}],["meta",{"property":"og:site_name","content":"麻花的小站"}],["meta",{"property":"og:title","content":"Maven"}],["meta",{"property":"og:description","content":"Maven 根据坐标创建 Maven 工程 1、Maven 核心概念：坐标 ①数学中的坐标 image-20240712095021593image-20240712095021593 使用 x、y、z 三个**『向量』作为空间的坐标系，可以在『空间』中唯一的定位到一个『点』**。 ②Maven中的坐标 [1]向量说明 使用三个**『向量』在『Mave..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095021593.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T08:44:09.000Z"}],["meta",{"property":"article:author","content":"Jack-Chen"}],["meta",{"property":"article:tag","content":"依赖加载"}],["meta",{"property":"article:tag","content":"仓库"}],["meta",{"property":"article:published_time","content":"2023-01-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T08:44:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Maven\\",\\"image\\":[\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095021593.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/1682675802157.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img008.be45c9ad.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img011.621b1ac3.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img012.0bcc2c5d-1682678008489.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img013.8b57a581-1682678008469.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/1682684649467.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095212622.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095252119.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095302641.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img018.f836f056.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img019.46741083.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095342870.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095350152.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095407055.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095418191.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img024.91b00e04.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095440745.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img026.0ad36150.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img027.2faff879.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095508222.png\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img037.53c95c38.jpg\\",\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/img029.48831f65.jpg\\"],\\"datePublished\\":\\"2023-01-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T08:44:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack-Chen\\",\\"url\\":\\"https://chemnminghe.top\\"}]}"]]},"headers":[{"level":2,"title":"1、Maven 核心概念：坐标","slug":"_1、maven-核心概念-坐标","link":"#_1、maven-核心概念-坐标","children":[{"level":3,"title":"①数学中的坐标","slug":"_1数学中的坐标","link":"#_1数学中的坐标","children":[]},{"level":3,"title":"②Maven中的坐标","slug":"_2maven中的坐标","link":"#_2maven中的坐标","children":[]},{"level":3,"title":"③坐标和仓库中 jar 包的存储路径之间的对应关系","slug":"_3坐标和仓库中-jar-包的存储路径之间的对应关系","link":"#_3坐标和仓库中-jar-包的存储路径之间的对应关系","children":[]}]},{"level":2,"title":"2、实验操作","slug":"_2、实验操作","link":"#_2、实验操作","children":[{"level":3,"title":"①创建目录作为后面操作的工作空间","slug":"_1创建目录作为后面操作的工作空间","link":"#_1创建目录作为后面操作的工作空间","children":[]},{"level":3,"title":"②在工作空间目录下打开命令行窗口","slug":"_2在工作空间目录下打开命令行窗口","link":"#_2在工作空间目录下打开命令行窗口","children":[]},{"level":3,"title":"③使用命令生成Maven工程","slug":"_3使用命令生成maven工程","link":"#_3使用命令生成maven工程","children":[]},{"level":3,"title":"④调整","slug":"_4调整","link":"#_4调整","children":[]},{"level":3,"title":"⑤自动生成的 pom.xml 解读","slug":"_5自动生成的-pom-xml-解读","link":"#_5自动生成的-pom-xml-解读","children":[]}]},{"level":2,"title":"3、Maven核心概念：POM","slug":"_3、maven核心概念-pom","link":"#_3、maven核心概念-pom","children":[{"level":3,"title":"①含义","slug":"_1含义","link":"#_1含义","children":[]},{"level":3,"title":"②模型化思想","slug":"_2模型化思想","link":"#_2模型化思想","children":[]},{"level":3,"title":"③对应的配置文件","slug":"_3对应的配置文件","link":"#_3对应的配置文件","children":[]}]},{"level":2,"title":"4、Maven核心概念：约定的目录结构","slug":"_4、maven核心概念-约定的目录结构","link":"#_4、maven核心概念-约定的目录结构","children":[{"level":3,"title":"①各个目录的作用","slug":"_1各个目录的作用","link":"#_1各个目录的作用","children":[]},{"level":3,"title":"②约定目录结构的意义","slug":"_2约定目录结构的意义","link":"#_2约定目录结构的意义","children":[]},{"level":3,"title":"③约定大于配置","slug":"_3约定大于配置","link":"#_3约定大于配置","children":[]}]},{"level":2,"title":"1、主体程序","slug":"_1、主体程序","link":"#_1、主体程序","children":[]},{"level":2,"title":"2、测试程序","slug":"_2、测试程序","link":"#_2、测试程序","children":[]},{"level":2,"title":"1、要求","slug":"_1、要求","link":"#_1、要求","children":[]},{"level":2,"title":"2、清理操作","slug":"_2、清理操作","link":"#_2、清理操作","children":[]},{"level":2,"title":"3、编译操作","slug":"_3、编译操作","link":"#_3、编译操作","children":[]},{"level":2,"title":"4、测试操作","slug":"_4、测试操作","link":"#_4、测试操作","children":[]},{"level":2,"title":"5、打包操作","slug":"_5、打包操作","link":"#_5、打包操作","children":[]},{"level":2,"title":"6、安装操作","slug":"_6、安装操作","link":"#_6、安装操作","children":[]},{"level":2,"title":"1、说明","slug":"_1、说明","link":"#_1、说明","children":[]},{"level":2,"title":"2、操作","slug":"_2、操作","link":"#_2、操作","children":[]},{"level":2,"title":"3、生成的pom.xml","slug":"_3、生成的pom-xml","link":"#_3、生成的pom-xml","children":[]},{"level":2,"title":"4、生成的Web工程的目录结构","slug":"_4、生成的web工程的目录结构","link":"#_4、生成的web工程的目录结构","children":[]},{"level":2,"title":"5、创建 Servlet","slug":"_5、创建-servlet","link":"#_5、创建-servlet","children":[{"level":3,"title":"①在 main 目录下创建 java 目录","slug":"_1在-main-目录下创建-java-目录","link":"#_1在-main-目录下创建-java-目录","children":[]},{"level":3,"title":"②在 java 目录下创建 Servlet 类所在的包的目录","slug":"_2在-java-目录下创建-servlet-类所在的包的目录","link":"#_2在-java-目录下创建-servlet-类所在的包的目录","children":[]},{"level":3,"title":"③在包下创建 Servlet 类","slug":"_3在包下创建-servlet-类","link":"#_3在包下创建-servlet-类","children":[]},{"level":3,"title":"④在 web.xml 中注册 Servlet","slug":"_4在-web-xml-中注册-servlet","link":"#_4在-web-xml-中注册-servlet","children":[]}]},{"level":2,"title":"6、在 index.jsp 页面编写超链接","slug":"_6、在-index-jsp-页面编写超链接","link":"#_6、在-index-jsp-页面编写超链接","children":[]},{"level":2,"title":"7、编译","slug":"_7、编译","link":"#_7、编译","children":[]},{"level":2,"title":"8、配置对 servlet-api.jar 包的依赖","slug":"_8、配置对-servlet-api-jar-包的依赖","link":"#_8、配置对-servlet-api-jar-包的依赖","children":[]},{"level":2,"title":"9、将 Web 工程打包为 war 包","slug":"_9、将-web-工程打包为-war-包","link":"#_9、将-web-工程打包为-war-包","children":[]},{"level":2,"title":"10、将 war 包部署到 Tomcat 上运行","slug":"_10、将-war-包部署到-tomcat-上运行","link":"#_10、将-war-包部署到-tomcat-上运行","children":[]},{"level":2,"title":"1、观念","slug":"_1、观念","link":"#_1、观念","children":[]},{"level":2,"title":"2、操作","slug":"_2、操作-1","link":"#_2、操作-1","children":[]},{"level":2,"title":"3、在 Web 工程中，编写测试代码","slug":"_3、在-web-工程中-编写测试代码","link":"#_3、在-web-工程中-编写测试代码","children":[{"level":3,"title":"①补充创建目录","slug":"_1补充创建目录","link":"#_1补充创建目录","children":[]},{"level":3,"title":"②确认 Web 工程依赖了 junit","slug":"_2确认-web-工程依赖了-junit","link":"#_2确认-web-工程依赖了-junit","children":[]},{"level":3,"title":"③创建测试类","slug":"_3创建测试类","link":"#_3创建测试类","children":[]}]},{"level":2,"title":"4、执行Maven命令","slug":"_4、执行maven命令","link":"#_4、执行maven命令","children":[{"level":3,"title":"①测试命令","slug":"_1测试命令","link":"#_1测试命令","children":[]},{"level":3,"title":"②打包命令","slug":"_2打包命令","link":"#_2打包命令","children":[]},{"level":3,"title":"③查看当前 Web 工程所依赖的 jar 包的列表","slug":"_3查看当前-web-工程所依赖的-jar-包的列表","link":"#_3查看当前-web-工程所依赖的-jar-包的列表","children":[]},{"level":3,"title":"④以树形结构查看当前 Web 工程的依赖信息","slug":"_4以树形结构查看当前-web-工程的依赖信息","link":"#_4以树形结构查看当前-web-工程的依赖信息","children":[]}]},{"level":2,"title":"1、依赖范围","slug":"_1、依赖范围","link":"#_1、依赖范围","children":[{"level":3,"title":"①compile 和 test 对比","slug":"_1compile-和-test-对比","link":"#_1compile-和-test-对比","children":[]},{"level":3,"title":"②compile 和 provided 对比","slug":"_2compile-和-provided-对比","link":"#_2compile-和-provided-对比","children":[]},{"level":3,"title":"③结论","slug":"_3结论","link":"#_3结论","children":[]}]},{"level":2,"title":"2、测试","slug":"_2、测试","link":"#_2、测试","children":[{"level":3,"title":"①验证 compile 范围对 main 目录有效","slug":"_1验证-compile-范围对-main-目录有效","link":"#_1验证-compile-范围对-main-目录有效","children":[]},{"level":3,"title":"②验证test范围对main目录无效","slug":"_2验证test范围对main目录无效","link":"#_2验证test范围对main目录无效","children":[]},{"level":3,"title":"③验证test和provided范围不参与服务器部署","slug":"_3验证test和provided范围不参与服务器部署","link":"#_3验证test和provided范围不参与服务器部署","children":[]},{"level":3,"title":"④验证provided范围对测试程序有效","slug":"_4验证provided范围对测试程序有效","link":"#_4验证provided范围对测试程序有效","children":[]}]},{"level":2,"title":"1、依赖的传递性","slug":"_1、依赖的传递性","link":"#_1、依赖的传递性","children":[{"level":3,"title":"①概念","slug":"_1概念","link":"#_1概念","children":[]},{"level":3,"title":"②传递的原则","slug":"_2传递的原则","link":"#_2传递的原则","children":[]}]},{"level":2,"title":"2、使用 compile 范围依赖 spring-core","slug":"_2、使用-compile-范围依赖-spring-core","link":"#_2、使用-compile-范围依赖-spring-core","children":[]},{"level":2,"title":"3、验证 test 和 provided 范围不能传递","slug":"_3、验证-test-和-provided-范围不能传递","link":"#_3、验证-test-和-provided-范围不能传递","children":[]},{"level":2,"title":"1、概念","slug":"_1、概念","link":"#_1、概念","children":[]},{"level":2,"title":"2、配置方式","slug":"_2、配置方式","link":"#_2、配置方式","children":[]},{"level":2,"title":"3、测试","slug":"_3、测试","link":"#_3、测试","children":[]},{"level":2,"title":"1、概念","slug":"_1、概念-1","link":"#_1、概念-1","children":[]},{"level":2,"title":"2、作用","slug":"_2、作用","link":"#_2、作用","children":[]},{"level":2,"title":"3、举例","slug":"_3、举例","link":"#_3、举例","children":[]},{"level":2,"title":"4、操作","slug":"_4、操作","link":"#_4、操作","children":[{"level":3,"title":"①创建父工程","slug":"_1创建父工程","link":"#_1创建父工程","children":[]},{"level":3,"title":"②创建模块工程","slug":"_2创建模块工程","link":"#_2创建模块工程","children":[]},{"level":3,"title":"③查看被添加新内容的父工程 pom.xml","slug":"_3查看被添加新内容的父工程-pom-xml","link":"#_3查看被添加新内容的父工程-pom-xml","children":[]},{"level":3,"title":"④解读子工程的pom.xml","slug":"_4解读子工程的pom-xml","link":"#_4解读子工程的pom-xml","children":[]},{"level":3,"title":"⑤在父工程中配置依赖的统一管理","slug":"_5在父工程中配置依赖的统一管理","link":"#_5在父工程中配置依赖的统一管理","children":[]},{"level":3,"title":"⑥子工程中引用那些被父工程管理的依赖","slug":"_6子工程中引用那些被父工程管理的依赖","link":"#_6子工程中引用那些被父工程管理的依赖","children":[]},{"level":3,"title":"⑦在父工程中升级依赖信息的版本","slug":"_7在父工程中升级依赖信息的版本","link":"#_7在父工程中升级依赖信息的版本","children":[]},{"level":3,"title":"⑧在父工程中声明自定义属性","slug":"_8在父工程中声明自定义属性","link":"#_8在父工程中声明自定义属性","children":[]}]},{"level":2,"title":"5、实际意义","slug":"_5、实际意义","link":"#_5、实际意义","children":[]},{"level":2,"title":"1、聚合本身的含义","slug":"_1、聚合本身的含义","link":"#_1、聚合本身的含义","children":[]},{"level":2,"title":"2、Maven 中的聚合","slug":"_2、maven-中的聚合","link":"#_2、maven-中的聚合","children":[]},{"level":2,"title":"3、好处","slug":"_3、好处","link":"#_3、好处","children":[]},{"level":2,"title":"4、聚合的配置","slug":"_4、聚合的配置","link":"#_4、聚合的配置","children":[]},{"level":2,"title":"5、依赖循环问题","slug":"_5、依赖循环问题","link":"#_5、依赖循环问题","children":[]}],"git":{"createdTime":1720770040000,"updatedTime":1721465049000,"contributors":[{"name":"陈铭鹤","email":"615880048@qq.com","commits":2}]},"readingTime":{"minutes":23.8,"words":7140},"filePathRelative":"posts/开发工具/maven.md","localizedDate":"2023年1月13日","excerpt":"\\n<h1>根据坐标创建 Maven 工程</h1>\\n<h2>1、Maven 核心概念：坐标</h2>\\n<h3>①数学中的坐标</h3>\\n<figure><img src=\\"https://jackchen-note.oss-cn-beijing.aliyuncs.com/Java/maven/image-20240712095021593.png\\" alt=\\"image-20240712095021593\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240712095021593</figcaption></figure>\\n<p>使用 x、y、z 三个**『向量』<strong>作为空间的坐标系，可以在</strong>『空间』<strong>中唯一的定位到一个</strong>『点』**。</p>","autoDesc":true}');export{g as comp,c as data};
